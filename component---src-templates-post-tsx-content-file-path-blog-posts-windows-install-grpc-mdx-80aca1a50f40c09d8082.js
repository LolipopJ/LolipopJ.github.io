"use strict";(self.webpackChunkhomepage=self.webpackChunkhomepage||[]).push([[2971],{9859:function(e,n,a){a.r(n),a.d(n,{Head:function(){return _},default:function(){return k}});var t=a(8453),l=a(6540);function s(e){const n=Object.assign({p:"p",span:"span",h2:"h2",ul:"ul",li:"li",h3:"h3",a:"a",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",strong:"strong",blockquote:"blockquote"},(0,t.R)(),e.components);return l.createElement(l.Fragment,null,l.createElement(n.p,null,"本博客基于 CMake 实现编译 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">gRPC 1.28.1</code>'}})," 版本。"),"\n",l.createElement(n.p,null,"本博客的 Windows 端使用的命令提示符界面为 Powershell。"),"\n",l.createElement(n.h2,null,"安装编译依赖软件"),"\n",l.createElement(n.p,null,"在 Windows 系统上编译 gRPC 需要首先准备下述软件："),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,"Visual Studio 2015（或 2017），将使用到 Visual C++ compiler"),"\n",l.createElement(n.li,null,"Git"),"\n",l.createElement(n.li,null,"CMake"),"\n",l.createElement(n.li,null,"nasm"),"\n",l.createElement(n.li,null,"ninja（可选）"),"\n"),"\n",l.createElement(n.h3,null,"Visual Studio 2015 (或 2017)"),"\n",l.createElement(n.p,null,"用于编译 gRPC。下简称 VS。"),"\n",l.createElement(n.p,null,"在微软的 ",l.createElement(n.a,{href:"https://visualstudio.microsoft.com/zh-hans/"},"VS 官网"),"下载安装即可。"),"\n",l.createElement(n.h3,null,"Git"),"\n",l.createElement(n.p,null,"用于拉取 gRPC 库并下载所需的第三方依赖。"),"\n",l.createElement(n.p,null,"在 ",l.createElement(n.a,{href:"https://git-scm.com/"},"Git 官网"),"下载并安装即可。"),"\n",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="powershell"><pre class="language-powershell"><code class="language-powershell"><span class="token function">PS</span> C:\\Users\\lolipop> git <span class="token operator">--</span>version\ngit version 2<span class="token punctuation">.</span>21<span class="token punctuation">.</span>0<span class="token punctuation">.</span>windows<span class="token punctuation">.</span>1</code></pre></div>'}}),"\n",l.createElement(n.h3,null,"CMake"),"\n",l.createElement(n.p,null,"用于生成编译 gRPC 的 Makefile 文件。"),"\n",l.createElement(n.p,null,"在 ",l.createElement(n.a,{href:"https://cmake.org/download/"},"CMake 官网"),"下载，可以选择下载 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.msi</code>'}})," 文件直接安装。"),"\n",l.createElement(n.p,null,"例如对于 64 位的 Windows 电脑安装 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">CMake 3.20.1</code>'}}),"，找到："),"\n",l.createElement(n.table,null,l.createElement(n.thead,null,l.createElement(n.tr,null,l.createElement(n.th,null,"Platform"),l.createElement(n.th,null,"Files"))),l.createElement(n.tbody,null,l.createElement(n.tr,null,l.createElement(n.td,null,"Windows x64 Installer: Installer tool has changed. Uninstall CMake 3.4 or lower first!"),l.createElement(n.td,null,"cmake-3.20.1-windows-x86_64.msi")))),"\n",l.createElement(n.p,null,"下载并运行 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.msi</code>'}})," 文件安装即可。"),"\n",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="powershell"><pre class="language-powershell"><code class="language-powershell"><span class="token function">PS</span> C:\\Users\\lolipop> cmake <span class="token operator">--</span>version\ncmake version 3<span class="token punctuation">.</span>20<span class="token punctuation">.</span>1</code></pre></div>'}}),"\n",l.createElement(n.h3,null,"nasm"),"\n",l.createElement(n.p,null,"gRPC 的第三方依赖 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">boringssl</code>'}})," 需要此软件。"),"\n",l.createElement(n.p,null,"在 ",l.createElement(n.a,{href:"https://www.nasm.us/"},"nasm 官网"),"下载，可以选择下载 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.exe</code>'}})," 文件直接安装。"),"\n",l.createElement(n.p,null,"例如对于 64 位的 Windows 电脑安装 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">nasm 2.15.05</code>'}}),"，可以进入 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">/pub/nasm/releasebuilds/2.15.05/win64</code>'}})," 目录下载 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">nasm-2.15.05-installer-x64.exe</code>'}})," 文件并执行安装操作。"),"\n",l.createElement(n.p,null,"nasm 默认安装目录为 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">C:\\Users\\${您的工号}\\AppData\\Local\\bin\\NASM</code>'}}),"（若非此目录，请在安装界面确认安装的路径），将该目录添加到环境变量中即可。"),"\n",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="powershell"><pre class="language-powershell"><code class="language-powershell"><span class="token function">PS</span> C:\\Users\\lolipop> nasm <span class="token operator">--</span>version\nNASM version 2<span class="token punctuation">.</span>15<span class="token punctuation">.</span>05 compiled on Aug 28 2020</code></pre></div>'}}),"\n",l.createElement(n.h3,null,"ninja（可选）"),"\n",l.createElement(n.p,null,"您可以使用 Ninja 来加速编译。"),"\n",l.createElement(n.p,null,"假如您希望使用它，后续的编译操作可参考",l.createElement(n.a,{href:"https://github.com/grpc/grpc/blob/master/BUILDING.md#windows-using-ninja-faster-build"},"官方文档"),"，本博客",l.createElement(n.strong,null,"不使用")," Ninja 加速编译。"),"\n",l.createElement(n.h2,null,"拉取 gRPC 库"),"\n",l.createElement(n.p,null,"建议在能够连接 Github 的机器环境利用 Git 克隆 gRPC 库并获取第三方依赖，再打包出来给 windows 系统编译使用。"),"\n",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token comment"># 克隆 gRPC 仓库</span>\n<span class="token comment"># 对于特定的分支，例如 gRPC 1.28.1 版本，可以使用此命令：</span>\n<span class="token comment"># git clone https://github.com/grpc/grpc.git -b v1.28.1</span>\n<span class="token function">git</span> clone https://github.com/grpc/grpc.git\n<span class="token comment"># 获取 gRPC 第三方依赖</span>\n<span class="token builtin class-name">cd</span> grpc\n<span class="token function">git</span> submodule update <span class="token parameter variable">--init</span></code></pre></div>'}}),"\n",l.createElement(n.h2,null,"编译安装 gRPC"),"\n",l.createElement(n.p,null,"特别的，如果您使用的 CMake 版本低于 3.13，或编译的 gRPC 版本低于 1.27，在执行 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">cmake</code>'}})," 命令之前，需要自行手动编译安装 gRPC 的依赖库，且在执行 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">cmake</code>'}})," 命令时指定这些库的路径，这里是",l.createElement(n.a,{href:"https://github.com/grpc/grpc/blob/master/BUILDING.md#install-after-build"},"官方的说明"),"。"),"\n",l.createElement(n.p,null,"下面的内容基于的 CMake 版本不低于 3.13，且编译的 gRPC 版本不低于 1.27。"),"\n",l.createElement(n.p,null,"首先创建文件夹存储编译结果，并执行 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">cmake</code>'}})," 命令生成 Makefile 文件。使用",l.createElement(n.strong,null,"管理员权限"),"打开命令行界面，执行下面的命令："),"\n",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="powershell"><pre class="language-powershell"><code class="language-powershell"><span class="token comment"># 在 grpc 目录下创建 .build 目录并进入</span>\nmd <span class="token punctuation">.</span>build\ncd <span class="token punctuation">.</span>build\n<span class="token comment"># 生成 Makefile 文件</span>\n<span class="token comment"># 其中 Visual Studio 15 2017 为当前的 VS 版本</span>\ncmake <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">-</span>DgRPC_INSTALL=ON <span class="token operator">-</span>G <span class="token string">"Visual Studio 15 2017"</span></code></pre></div>'}}),"\n",l.createElement(n.blockquote,null,"\n",l.createElement(n.p,null,"尽管",l.createElement(n.a,{href:"https://github.com/grpc/grpc/blob/master/BUILDING.md#windows-a-note-on-building-shared-libs-dlls"},"不推荐"),"，在上面执行 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">cmake</code>'}})," 命令时，您可以指定 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">-DBUILD_SHARED_LIBS=ON</code>'}})," 以编译生成 gRPC C++ 的 DLL 文件。"),"\n"),"\n",l.createElement(n.p,null,"接下来对 gRPC 进行编译安装操作，包括两种方式，这里更建议使用 VS。"),"\n",l.createElement(n.h3,null,"使用 VS 编译并安装 gRPC"),"\n",l.createElement(n.p,null,"首先，使用",l.createElement(n.strong,null,"管理员权限"),"打开 VS，否则在安装 gRPC 时会报错。"),"\n",l.createElement(n.p,null,"接着使用 VS 打开此目录下的 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">grpc.sln</code>'}})," 解决方案，找到",l.createElement(n.strong,null,"解决方案资源管理器"),"（默认情况下在 VS 的右侧）中的 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ALL_BUILD</code>'}})," 项，右键并选择",l.createElement(n.strong,null,"生成"),"按钮，开始执行编译操作。"),"\n",l.createElement(n.p,null,"编译结束后，在",l.createElement(n.strong,null,"解决方案资源管理器"),"中找到 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">INSTALL</code>'}})," 项，右键并选择",l.createElement(n.strong,null,"生成"),"按钮，开始执行安装操作。"),"\n",l.createElement(n.p,null,"gRPC 默认安装在 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">C:\\Program Files (x86)\\grpc</code>'}})," 目录。"),"\n",l.createElement(n.p,null,"如果报错，请确保您已使用管理员权限打开 VS。使用管理员权限重新打开 VS 后，右键点击 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ALL_BUILD</code>'}})," 并选择",l.createElement(n.strong,null,"重新生成"),"按钮即可。"),"\n",l.createElement(n.h3,null,"使用命令行编译并安装 gRPC"),"\n",l.createElement(n.p,null,"您也可以直接使用命令行界面，执行 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">cmake</code>'}})," 命令来编译安装 gRPC。"),"\n",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="powershell"><pre class="language-powershell"><code class="language-powershell"><span class="token comment"># 编译并安装 gRPC</span>\ncmake <span class="token operator">--</span>build <span class="token punctuation">.</span> <span class="token operator">--</span>target install <span class="token operator">--</span>config Release</code></pre></div>'}}),"\n",l.createElement(n.p,null,"编译结束后，会自动进行安装操作。"),"\n",l.createElement(n.p,null,"gRPC 默认安装在 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">C:\\Program Files (x86)\\grpc</code>'}})," 目录。"),"\n",l.createElement(n.p,null,"如果没有使用管理员权限打开命令行界面，安装时会发生报错。请重新使用管理员权限打开命令行界面，并执行上面的命令。"),"\n",l.createElement(n.h2,null,"测试 gRPC 编译安装结果"),"\n",l.createElement(n.p,null,"接下来的步骤基于 VS 编译安装 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">gRPC 1.28.1</code>'}})," 的结果，测试 Windows 系统下的 gRPC 环境是否安装成功。"),"\n",l.createElement(n.p,null,"移动到 git 克隆的 gRPC 源码目录下的 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">grpc\\examples\\cpp\\helloworld</code>'}})," 目录，创建存放编译结果的文件夹 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">cmake\\build</code>'}}),"，进入到该目录，执行下面的命令："),"\n",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="powershell"><pre class="language-powershell"><code class="language-powershell"><span class="token comment"># 生成 Makefile 文件</span>\n<span class="token comment"># 其中 C:\\Program Files (x86)\\grpc 是 gRPC 默认的安装目录</span>\ncmake <span class="token operator">-</span>DCMAKE_PREFIX_PATH=<span class="token string">\'C:\\Program Files (x86)\\grpc\'</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre></div>'}}),"\n",l.createElement(n.p,null,"使用管理员权限打开 VS，并打开当前目录下的 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">HelloWorld.sln</code>'}})," 解决方案，右键分别选择解决方案资源管理器中的 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">greeter_client.cc</code>'}})," 和 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">greeter_server.cc</code>'}})," 并点击生成按钮。"),"\n",l.createElement(n.p,null,"编译完成后，会在 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">cmake\\build\\Debug</code>'}})," 目录下生成我们需要的可执行文件 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">greeter_server.exe</code>'}})," 和 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">greeter_client.exe</code>'}}),"。"),"\n",l.createElement(n.p,null,"使用 Powershell 移动到该目录，启动服务端 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">./greeter_server.exe</code>'}}),"："),"\n",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="powershell"><pre class="language-powershell"><code class="language-powershell"><span class="token function">PS</span> grpc\\examples\\<span class="token function">cpp</span>\\helloworld\\cmake\\build\\Debug> <span class="token punctuation">.</span><span class="token operator">/</span>greeter_server<span class="token punctuation">.</span>exe\nServer listening on 0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0:50051</code></pre></div>'}}),"\n",l.createElement(n.p,null,"服务端默认监听 50051 端口。"),"\n",l.createElement(n.p,null,"再启动一个 Powershell 移动到该目录，启动客户端 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">./greeter_client.exe</code>'}}),"："),"\n",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="powershell"><pre class="language-powershell"><code class="language-powershell"><span class="token function">PS</span> grpc\\examples\\<span class="token function">cpp</span>\\helloworld\\cmake\\build\\Debug> <span class="token punctuation">.</span><span class="token operator">/</span>greeter_client<span class="token punctuation">.</span>exe\nGreeter received: Hello world</code></pre></div>'}}),"\n",l.createElement(n.p,null,"成功打印出 ",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Greeter received: Hello world</code>'}})," 字段，测试成功！"),"\n",l.createElement(n.p,null,"作为对照组，您可以关闭掉服务端，再执行客户端，观察打印的结果。"),"\n",l.createElement(n.p,null,"Hello, gRPC world!"),"\n",l.createElement(n.h2,null,"参考资料"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,l.createElement(n.a,{href:"https://blog.csdn.net/xiaoyafang123/article/details/76529917"},"编译 gRPC(windows)和测试 demo")," - 2017.08.01 - 注：博主填的转载，暂未找到原文链接"),"\n"))}var c=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,t.R)(),e.components);return n?l.createElement(n,e,l.createElement(s,e)):s(e)},r=a(197),o=a(4353),p=a.n(o),u=a(4810),g=a(6947),m=a(4017),d=a(1042),i=a(1038);const h={a:e=>{let{href:n="",children:a}=e;const t=!(null!=n&&n.startsWith("#")),s=t?n:`#${encodeURIComponent(n.slice(1))}`;return l.createElement("a",{href:s,target:t?"_blank":void 0,rel:"noreferrer"},a)},img:e=>{const{alt:n="The author is too lazy to give an alt",src:a,...t}=e;return l.createElement("a",{href:a,"data-fancybox":"gallery","data-caption":n},l.createElement("img",Object.assign({src:a,alt:n},t)))},Card:g.A,Link:u.N_},E=e=>{let{children:n,data:a}=e;const{mdx:{frontmatter:{title:s,date:c,updated:o,categories:u,tags:g,timeliness:d=!0}}}=a,E=l.useRef(null),_=p()(c),k=o?p()(o):_,b=p()().diff(k,"days");return l.useEffect((()=>{var e;const n=null===(e=E.current)||void 0===e?void 0:e.querySelectorAll("a.gatsby-resp-image-link");return null==n||n.forEach((e=>{const n=e.children.item(1);e.setAttribute("data-fancybox","gallery"),e.setAttribute("data-caption",n.alt)})),r.lX.bind("[data-fancybox]"),()=>r.lX.unbind("[data-fancybox]")}),[]),l.createElement("div",{className:"mx-auto flex max-w-xl flex-col gap-y-12"},l.createElement("div",{className:"flex flex-col gap-4"},(null==u?void 0:u.length)&&l.createElement(m.A,{name:u[0],className:"item-selectable"}),l.createElement("h1",{className:"text-3xl font-bold"},s),l.createElement("div",{className:"item-secondary flex flex-col gap-2 lg:flex-row"},c&&l.createElement("span",{title:`首次发布于：${_.toString()}\n最后更新于：${k.toString()}`},_.format("MM 月 DD 日 YYYY 年")),(null==g?void 0:g.length)&&l.createElement("div",{className:"flex flex-1 flex-wrap gap-2 lg:before:content-['•']"},g.map((e=>l.createElement(i.A,{key:e,name:e,className:"item-secondary item-selectable"})))))),l.createElement("article",{ref:E,className:"heti post-entry"},d&&b>365&&l.createElement("blockquote",{className:"border-l-4 border-orange-400"},"这是一篇",l.createElement("strong",null,"最后更新于 ",b," 天前"),"的博客，内容可能随着时间的推移而变得不再适用，建议您仔细评估信息的有效性。"),l.createElement(t.x,{components:h},n)))},_=e=>{let{data:n}=e;return l.createElement(d.A,{title:String(n.mdx.frontmatter.title)})};function k(e){return l.createElement(E,e,l.createElement(c,e))}}}]);
//# sourceMappingURL=component---src-templates-post-tsx-content-file-path-blog-posts-windows-install-grpc-mdx-80aca1a50f40c09d8082.js.map