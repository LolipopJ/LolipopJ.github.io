"use strict";(self.webpackChunkhomepage=self.webpackChunkhomepage||[]).push([[8405],{7403:function(n,s,a){a.r(s),a.d(s,{Head:function(){return y},default:function(){return f}});var t=a(8453),e=a(6540);function p(n){const s=Object.assign({p:"p",h2:"h2",span:"span",ul:"ul",li:"li",strong:"strong",a:"a"},(0,t.R)(),n.components);return e.createElement(e.Fragment,null,e.createElement(s.p,null,"Umi 是一款企业级的 React 前端应用框架，云巧产业数字组件中心推荐使用基于 Umi 的 Koi 框架统一前端应用研发流程，支撑前端项目从研发、联调到上线、发布的全流程。"),"\n",e.createElement(s.p,null,"本文假设您正在或计划使用 Umi 或 Koi 作为底层框架支撑前端应用的开发，并且对 Umi 有一定的了解。"),"\n",e.createElement(s.h2,null,"数据治理的原则"),"\n",e.createElement(s.p,null,"React 的核心特征是“数据驱动视图”，用公式表达即 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">UI = render(data)</code>'}}),"，通过数据变化来驱动视图变化。React 将组件内部自有的数据称作 state（状态），通过管理 state 来实现对组件的管理。"),"\n",e.createElement(s.p,null,"通过 Props 传参，可以在 React 中实现简单的父子、子父和兄弟组件间数据传递。对于跨级组件间的数据传递，React 提供了基于生产者-消费者模式的 Context API 来实现全局通信。"),"\n",e.createElement(s.p,null,"随着应用的膨胀，组件内部的状态变得愈加复杂，数据流管理的成本也越来越高。如果说所有代码的末路都是成为一座难以维护的大山的话，在那之前，我们应当好好想想如何尽可能多地延长代码的寿命，去重新思考我们的 React 项目的代码组织逻辑。"),"\n",e.createElement(s.p,null,"Umi 建议将所有组件降级为“无状态组件”，仅仅依赖 Props 或 Context 进行渲染。这样，在 UI 层面仅关心用户交互和渲染的逻辑，在单独的数据层去关心数据处理的逻辑。以 Umi 项目为例，具体而言就是："),"\n",e.createElement(s.ul,null,"\n",e.createElement(s.li,null,e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">src/models</code>'}})," 中的文件管理数据层的逻辑，包含网络请求、数据处理等。"),"\n",e.createElement(s.li,null,e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">src/pages</code>'}})," 中的页面组件与数据层进行交互，并将得到的数据通过 Props 或 Context 传递给通用组件，进行页面渲染。"),"\n",e.createElement(s.li,null,e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">src/components</code>'}})," 中的通用组件仅仅依赖从 Props 或 Context 得到的数据进行渲染，不与数据层发生直接交互。"),"\n"),"\n",e.createElement(s.h2,null,"介绍 model 简易数据流插件"),"\n",e.createElement(s.p,null,"Umi 的 model 简易数据流插件就是基于 Context 的封装，使得数据能够在项目全局共享与使用。相比原生的 Context API，model 简易数据流插件更加便于使用。"),"\n",e.createElement(s.p,null,"使用 Context API 时，需要创建上下文对象，并在渲染树顶层包装上下文的 Provider："),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token comment">// src/contexts/userContext.tsx</span>\n<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> createContext<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> UserContext <span class="token operator">=</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">UserContextProvider</span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>username<span class="token punctuation">,</span> setUsername<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">UserContext.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> username <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">UserContext.Provider</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// src/layouts/index.tsx</span>\n<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Outlet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"umi"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> UserContextProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/contexts/userContext"</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Layout</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">UserContextProvider</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Outlet</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">UserContextProvider</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> Layout<span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"使用简易数据流插件可以略去创建上下文对象和包装 Provider 的过程，仅需要按约定目录导出一个自定义的 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">hook</code>'}})," 函数即可："),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token comment">// src/models/userModel.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>username<span class="token punctuation">,</span> setUsername<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> username <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"在组件使用上下文中存储的数据时，Context API 需要："),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> UserContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/contexts/userContext"</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">pageElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> username <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>UserContext<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>username<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> pageElement<span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"而使用简易数据流插件可以略去引入指定上下文对象的过程，Umi 已经自动为它创建了一个命名空间："),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useModel <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"umi"</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">pageElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> username <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useModel</span><span class="token punctuation">(</span><span class="token string">"userModel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>username<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> pageElement<span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"由于调用了 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useContext</code>'}})," 的组件总会在 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">context</code>'}})," 值变化时重新渲染，可能需要使用 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useMemo</code>'}})," 或 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">memo</code>'}})," 来优化重渲染开销较大的组件："),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useContext<span class="token punctuation">,</span> useMemo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> UserContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/contexts/userContext"</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">pageElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> username <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>UserContext<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ExpensiveTree</span></span> <span class="token attr-name">username</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>username<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>username<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> pageElement<span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"使用简易数据流插件时同样可以使用 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useMemo</code>'}})," 或 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">memo</code>'}})," 来进行优化，但更好的选择是直接利用 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useModel()</code>'}})," 提供的过滤方法，只关心需要的数据："),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useModel <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"umi"</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">pageElement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> username <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useModel</span><span class="token punctuation">(</span><span class="token string">"userModel"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>model<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n    username<span class="token operator">:</span> model<span class="token punctuation">.</span>username<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ExpensiveTree</span></span> <span class="token attr-name">username</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>username<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> pageElement<span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"综上所述，Umi 的 model 简易数据流插件实现了对 Context API 的较好封装，能够降本增效，简化代码的编写。对于需要使用 Context 管理数据流的情况，都可以使用 model 简易数据流插件替代。"),"\n",e.createElement(s.h2,null,"什么时候使用 model 简易数据流插件"),"\n",e.createElement(s.p,null,"近年来，微前端架构的兴起为企业前端应用开发注入了新的活力，随着巨型前端应用拆解成一个个小微型前端应用，页面数据的治理难度也大大降低了。"),"\n",e.createElement(s.p,null,"当您使用 Umi 或 Koi 开发",e.createElement(s.strong,null,"小微型前端应用"),"遇到全局状态共享或数据流管理需求时，model 简易数据流插件具有",e.createElement(s.strong,null,"便利"),"、",e.createElement(s.strong,null,"低心智负担"),"的优势，不妨好好利用它来管理页面数据。"),"\n",e.createElement(s.p,null,"针对更复杂的数据流管理需求（例如数据可预知甚至可回溯等），model 简易数据流插件显得有些捉襟见肘了：它只负责将数据全局化。别担心，开源社区提供了大量专注于做好数据流管理这件事的方案，例如 ",e.createElement(s.a,{href:"https://github.com/reduxjs/redux"},"Redux")," 和 ",e.createElement(s.a,{href:"https://github.com/mobxjs/mobx"},"MobX")," 等；Umi 官方目前也提供了对接 ",e.createElement(s.a,{href:"https://github.com/dvajs/dva"},"dva")," 和 ",e.createElement(s.a,{href:"https://github.com/pmndrs/valtio"},"Valtio")," 数据流管理库的插件，开箱即用。"))}var o=function(n){void 0===n&&(n={});const{wrapper:s}=Object.assign({},(0,t.R)(),n.components);return s?e.createElement(s,n,e.createElement(p,n)):p(n)},c=a(197),l=a(4353),u=a.n(l),r=a(4794),k=a(6947),i=a(4017),m=a(1042),d=a(1038);const g={a:n=>{let{href:s="",children:a}=n;const t=!(null!=s&&s.startsWith("#")),p=t?s:`#${encodeURIComponent(s.slice(1))}`;return e.createElement("a",{href:p,target:t?"_blank":void 0,rel:"noreferrer"},a)},img:n=>{const{alt:s="The author is too lazy to give an alt",src:a,...t}=n;return e.createElement("a",{href:a,"data-fancybox":"gallery","data-caption":s},e.createElement("img",Object.assign({src:a,alt:s},t)))},Card:k.A,Link:r.Link},x=n=>{let{children:s,data:a}=n;const{mdx:{fields:{isDraft:p},frontmatter:{title:o,date:l,updated:r,categories:k,tags:m,timeliness:x}}}=a,y=e.useRef(null),f=u()(l),E=r?u()(r):f,h=u()().diff(E,"days");return e.useEffect((()=>{var n;const s=null===(n=y.current)||void 0===n?void 0:n.querySelectorAll("a.gatsby-resp-image-link");return null==s||s.forEach((n=>{const s=n.children.item(1);n.setAttribute("data-fancybox","gallery"),n.setAttribute("data-caption",s.alt)})),c.lX.bind("[data-fancybox]"),()=>c.lX.unbind("[data-fancybox]")}),[]),e.createElement("div",{className:"mx-auto flex max-w-xl flex-col gap-y-12"},e.createElement("div",{className:"flex flex-col gap-4"},(null==k?void 0:k.length)&&e.createElement(i.A,{name:k[0],className:"item-selectable"}),e.createElement("h1",{className:"text-3xl font-bold"},o),e.createElement("div",{className:"item-secondary flex flex-col gap-2 lg:flex-row"},l&&e.createElement("span",{title:`首次发布于：${f.toString()}\n最后更新于：${E.toString()}`},f.format("MM 月 DD 日 YYYY 年")),(null==m?void 0:m.length)&&e.createElement("div",{className:"flex flex-1 flex-wrap gap-2 lg:before:content-['•']"},m.map((n=>e.createElement(d.A,{key:n,name:n,className:"item-secondary item-selectable"})))))),e.createElement("article",{ref:y,className:"heti post-entry"},p&&e.createElement("blockquote",{className:"!border-red-400"},"这是一篇",e.createElement("strong",null,"未正式发布"),"的博客，内容可能尚未撰写完全或存在一些纰漏，建议您仔细评估信息的有效性。"),!1!==x&&h>365&&e.createElement("blockquote",{className:"!border-orange-400"},"这是一篇",e.createElement("strong",null,"最后更新于 ",h," 天前"),"的博客，内容可能随着时间的推移而变得不再适用，建议您仔细评估信息的有效性。"),e.createElement(t.x,{components:g},s)))},y=n=>{let{data:s}=n;return e.createElement(m.A,{title:String(s.mdx.frontmatter.title)})};function f(n){return e.createElement(x,n,e.createElement(o,n))}}}]);
//# sourceMappingURL=component---src-templates-post-tsx-content-file-path-blog-posts-umi-plugin-usemodel-mdx-70b73a8eda733ef3c9cd.js.map