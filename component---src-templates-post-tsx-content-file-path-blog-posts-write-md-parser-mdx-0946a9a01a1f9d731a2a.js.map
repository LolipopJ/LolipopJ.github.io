{"version":3,"file":"component---src-templates-post-tsx-content-file-path-blog-posts-write-md-parser-mdx-0946a9a01a1f9d731a2a.js","mappings":"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","sources":["webpack://homepage/./blog/posts/write-md-parser.mdx","webpack://homepage/./src/templates/post.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    span: \"span\",\n    strong: \"strong\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"在开发 NetUnion 的官网页面时，有这样一个需求：读取本地目录下的新闻和博客文件，并在前端渲染，其中文件均为 Markdown 格式。\"), \"\\n\", React.createElement(_components.p, null, \"与全栈开发直接调用后端数据库不同的是，没有数据表字段来记录文件的不同属性，例如文件的题目、作者、撰写日期等，因此这些属性需要记录在 .md 文件当中。\"), \"\\n\", React.createElement(_components.p, null, \"这样的撰写方式是不是很熟悉？没错，不就是我正在写的 Hexo 博客中 .md 文件的编写格式嘛！\"), \"\\n\", React.createElement(_components.h2, null, \"自动导入本地的 .md 文件\"), \"\\n\", React.createElement(_components.p, null, \"当然，首先要读取某个目录下已经撰写好的 .md 文件，才能对内容进行预处理。\"), \"\\n\", React.createElement(_components.p, null, \"但如果每撰写好一个新的新闻或博客文件，就得在代码中 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">require</code>\"\n    }\n  }), \" 出来，太过于麻烦且不现实，因此就需要\", React.createElement(_components.strong, null, \"自动导入\"), \"的方法。\"), \"\\n\", React.createElement(_components.p, null, \"Webpack 提供了 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">require.context()</code>\"\n    }\n  }), \" 方法可以完美解决导入目录下所有文件的问题，该方法可以导入指定目录（也可以包括子目录）下指定格式的所有文件。关于此方法的更多细节可以在 Webpack 官方文档中\", React.createElement(_components.a, {\n    href: \"https://webpack.js.org/guides/dependency-management/#requirecontext\"\n  }, \"了解\"), \"。\"), \"\\n\", React.createElement(_components.p, null, \"撰写代码自动读取 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">@/docs/blog/</code>\"\n    }\n  }), \" 及其子目录下的所有 .md 文件如下所示，其中 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">blogFiles(key)</code>\"\n    }\n  }), \" 为文件存储的具体内容：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> blogFiles <span class=\\\"token operator\\\">=</span> require<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">context</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"@/docs/blog/\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token regex\\\"><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-source language-regex\\\">\\\\.md$</span><span class=\\\"token regex-delimiter\\\">/</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nblogFiles<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">key</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">blogFiles</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, null, \"对 .md 文件进行预处理\"), \"\\n\", React.createElement(_components.p, null, \"参考 Hexo 博客的撰写格式，可以规定 NetUnion 官网的新闻和博客撰写格式如下：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"md\\\"><pre class=\\\"language-md\\\"><code class=\\\"language-md\\\"><span class=\\\"token front-matter-block\\\"><span class=\\\"token punctuation\\\">---</span>\\n<span class=\\\"token front-matter yaml language-yaml\\\">title: ${title}\\ndate: ${date}\\nauthor: ${author}</span>\\n<span class=\\\"token punctuation\\\">---</span></span>\\n\\n${main-text}</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"即用两个 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">---</code>\"\n    }\n  }), \" 框住\", React.createElement(_components.strong, null, \"属性内容\"), \"，在第二个 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">---</code>\"\n    }\n  }), \" 下面为\", React.createElement(_components.strong, null, \"正文内容\"), \"。\"), \"\\n\", React.createElement(_components.p, null, \"那么首先，可以用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">split()</code>\"\n    }\n  }), \" 方法根据 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">---</code>\"\n    }\n  }), \" 及换行符将文章划分为长度不少于 3 （因为在正文中可能出现 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">---</code>\"\n    }\n  }), \"）的数组 arr。其中 arr[0] 为空，arr[1] 存储有属性内容，arr[2] 及之后存储正文内容。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// content 为传入的 .md 文件内容</span>\\n<span class=\\\"token keyword\\\">const</span> contentArray <span class=\\\"token operator\\\">=</span> content<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">split</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\"><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-source language-regex\\\">---+\\\\r?\\\\n</span><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-flags\\\">g</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"对属性内容的处理同样可以先使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">split()</code>\"\n    }\n  }), \" 方法按换行符拆分为数组。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> contentInfo <span class=\\\"token operator\\\">=</span> contentArray<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> contentInfoArray <span class=\\\"token operator\\\">=</span> contentInfo<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">split</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token regex\\\"><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-source language-regex\\\">\\\\r?\\\\n</span><span class=\\\"token regex-delimiter\\\">/</span><span class=\\\"token regex-flags\\\">g</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"值得一提的是，在上面两次按换行符分割时，我都使用了 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">/\\\\r?\\\\n/g</code>\"\n    }\n  }), \" 正则表达式。其含义是匹配 0 个或 1 个 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">\\\\r</code>\"\n    }\n  }), \" 及 1 个 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">\\\\n</code>\"\n    }\n  }), \"，直到结束。因为在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">CRLF</code>\"\n    }\n  }), \" 行尾序列的文件中，换行符由 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">\\\\r\\\\n</code>\"\n    }\n  }), \" 表示；而在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">LF</code>\"\n    }\n  }), \" 行尾序列中，换行符由 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">\\\\n</code>\"\n    }\n  }), \" 表示。这样就确保了在 Windows 和 Unix 两种不同的系统上撰写的文件，其解析不会受行尾序列所影响。\"), \"\\n\", React.createElement(_components.p, null, \"接下来就可以提取属性对象了。这里使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">trim()</code>\"\n    }\n  }), \" 方法来删除属性名和属性值前后可能出现的多余空格。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> contentInfoItem <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> contentInfoArray<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> contentInfoParamArray <span class=\\\"token operator\\\">=</span> contentInfoArray<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">split</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\":\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> contentInfoParamValue <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> n <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> n <span class=\\\"token operator\\\">&lt;</span> contentInfoParamArray<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> n<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    contentInfoParamValue <span class=\\\"token operator\\\">+=</span> contentInfoParamArray<span class=\\\"token punctuation\\\">[</span>n<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\":\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  contentInfoItem<span class=\\\"token punctuation\\\">[</span>contentInfoParamArray<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">trim</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> contentInfoParamValue\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">slice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">trim</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"对正文内容的处理就相当简单了，只需要把 arr[2] 及之后存储的内容用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">---\\\\n</code>\"\n    }\n  }), \" 连接起来就可以了。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">let</span> contentText <span class=\\\"token operator\\\">=</span> contentArray<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>contentArray<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> contentArray<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    contentText <span class=\\\"token operator\\\">+=</span> <span class=\\\"token string\\\">\\\"---\\\\n\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n    contentText <span class=\\\"token operator\\\">+=</span> contentArray<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"将属性对象与正文内容合并为一个新的对象，解析就完成了！\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> result <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token operator\\\">...</span>contentInfoItem<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token literal-property property\\\">content</span><span class=\\\"token operator\\\">:</span> contentText<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"如果愿意，还可以在最后对格式进行一定规范，例如可以对 date 属性进行处理：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 格式为 YYYY-MM-DD</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">.</span>date <span class=\\\"token operator\\\">!=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> dateArray <span class=\\\"token operator\\\">=</span> result<span class=\\\"token punctuation\\\">.</span>date<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">split</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"-\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> dateYear <span class=\\\"token operator\\\">=</span> dateArray<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> dateMonth <span class=\\\"token operator\\\">=</span> dateArray<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> dateDay <span class=\\\"token operator\\\">=</span> dateArray<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>dateMonth<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    dateMonth <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"0\\\"</span> <span class=\\\"token operator\\\">+</span> dateMonth<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>dateDay<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">==</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    dateDay <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"0\\\"</span> <span class=\\\"token operator\\\">+</span> dateDay<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  result<span class=\\\"token punctuation\\\">.</span>date <span class=\\\"token operator\\\">=</span> dateYear <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\"-\\\"</span> <span class=\\\"token operator\\\">+</span> dateMonth <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\"-\\\"</span> <span class=\\\"token operator\\\">+</span> dateDay<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, null, \"解析 .md 为 HTML\"), \"\\n\", React.createElement(_components.p, null, \"将结果中的正文内容交给给任意 .md 解析器就可以了，例如 \", React.createElement(_components.a, {\n    href: \"https://github.com/markdown-it/markdown-it\"\n  }, \"markdown-it\"), \"。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> md <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"markdown-it\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token literal-property property\\\">linkify</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 一些设置，并不重要，下同</span>\\n  <span class=\\\"token literal-property property\\\">breaks</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token literal-property property\\\">typographer</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> htmlContent <span class=\\\"token operator\\\">=</span> md<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>result<span class=\\\"token punctuation\\\">.</span>content<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"完整的解析文件\", React.createElement(_components.a, {\n    href: \"https://github.com/uestclug/nu-official/blob/frontend/src/utils/mdParser.js\"\n  }, \"在这里\"), \"。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/homepage/homepage/blog/posts/write-md-parser.mdx\";\nimport {Fancybox} from \"@fancyapps/ui\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport dayjs from \"dayjs\";\nimport {Link} from \"gatsby\";\nimport * as React from \"react\";\nimport Card from \"../components/card\";\nimport Category from \"../components/category\";\nimport SEO from \"../components/seo\";\nimport Tag from \"../components/tag\";\nconst FancyBoxImage = props => {\n  const {alt = \"The author is too lazy to give an alt\", src, ...restProps} = props;\n  return React.createElement(\"a\", {\n    href: src,\n    \"data-fancybox\": \"gallery\",\n    \"data-caption\": alt\n  }, React.createElement(\"img\", Object.assign({\n    src: src,\n    alt: alt\n  }, restProps)));\n};\nconst ALink = _ref => {\n  let {href = \"\", children} = _ref;\n  const isExternalHref = !(href !== null && href !== void 0 && href.startsWith(\"#\"));\n  const parsedHref = isExternalHref ? href : `#${encodeURIComponent(href.slice(1))}`;\n  return React.createElement(\"a\", {\n    href: parsedHref,\n    target: isExternalHref ? \"_blank\" : undefined,\n    rel: \"noreferrer\"\n  }, children);\n};\nconst components = {\n  a: ALink,\n  img: FancyBoxImage,\n  Card,\n  Link\n};\nconst PostTemplate = _ref2 => {\n  let {children, data} = _ref2;\n  const {mdx: {fields: {isDraft}, frontmatter: {title, date: dateString, updated: updatedDateString, categories, tags, timeliness}}} = data;\n  const articleRef = React.useRef(null);\n  const date = dayjs(dateString);\n  const updatedDate = updatedDateString ? dayjs(updatedDateString) : date;\n  const today = dayjs();\n  const diffDays = today.diff(updatedDate, \"days\");\n  React.useEffect(() => {\n    var _articleRef$current;\n    const optimizedImageLinks = (_articleRef$current = articleRef.current) === null || _articleRef$current === void 0 ? void 0 : _articleRef$current.querySelectorAll(\"a.gatsby-resp-image-link\");\n    optimizedImageLinks === null || optimizedImageLinks === void 0 ? void 0 : optimizedImageLinks.forEach(link => {\n      const image = link.children.item(1);\n      link.setAttribute(\"data-fancybox\", \"gallery\");\n      link.setAttribute(\"data-caption\", image.alt);\n    });\n    Fancybox.bind(\"[data-fancybox]\");\n    return () => Fancybox.unbind(\"[data-fancybox]\");\n  }, []);\n  return React.createElement(\"div\", {\n    className: \"mx-auto flex max-w-xl flex-col gap-y-12\"\n  }, React.createElement(\"div\", {\n    className: \"flex flex-col gap-4\"\n  }, (categories === null || categories === void 0 ? void 0 : categories.length) && React.createElement(Category, {\n    name: categories[0],\n    className: \"item-selectable\"\n  }), React.createElement(\"h1\", {\n    className: \"text-3xl font-bold\"\n  }, title), React.createElement(\"div\", {\n    className: \"item-secondary flex flex-col gap-2 lg:flex-row\"\n  }, dateString && React.createElement(\"span\", {\n    title: `首次发布于：${date.toString()}\\n最后更新于：${updatedDate.toString()}`\n  }, date.format(\"MM 月 DD 日 YYYY 年\")), (tags === null || tags === void 0 ? void 0 : tags.length) && React.createElement(\"div\", {\n    className: \"flex flex-1 flex-wrap gap-2 lg:before:content-['\\u2022']\"\n  }, tags.map(tag => React.createElement(Tag, {\n    key: tag,\n    name: tag,\n    className: \"item-secondary item-selectable\"\n  }))))), React.createElement(\"article\", {\n    ref: articleRef,\n    className: \"heti post-entry\"\n  }, isDraft && React.createElement(\"blockquote\", {\n    className: \"!border-red-400\"\n  }, \"\\u8FD9\\u662F\\u4E00\\u7BC7\", React.createElement(\"strong\", null, \"\\u672A\\u6B63\\u5F0F\\u53D1\\u5E03\"), \"\\u7684\\u535A\\u5BA2\\uFF0C\\u5185\\u5BB9\\u53EF\\u80FD\\u5C1A\\u672A\\u64B0\\u5199\\u5B8C\\u5168\\u6216\\u5B58\\u5728\\u4E00\\u4E9B\\u7EB0\\u6F0F\\uFF0C\\u5EFA\\u8BAE\\u60A8\\u4ED4\\u7EC6\\u8BC4\\u4F30\\u4FE1\\u606F\\u7684\\u6709\\u6548\\u6027\\u3002\"), timeliness !== false && diffDays > 365 && React.createElement(\"blockquote\", {\n    className: \"!border-orange-400\"\n  }, \"\\u8FD9\\u662F\\u4E00\\u7BC7\", React.createElement(\"strong\", null, \"\\u6700\\u540E\\u66F4\\u65B0\\u4E8E \", diffDays, \" \\u5929\\u524D\"), \"\\u7684\\u535A\\u5BA2\\uFF0C\\u5185\\u5BB9\\u53EF\\u80FD\\u968F\\u7740\\u65F6\\u95F4\\u7684\\u63A8\\u79FB\\u800C\\u53D8\\u5F97\\u4E0D\\u518D\\u9002\\u7528\\uFF0C\\u5EFA\\u8BAE\\u60A8\\u4ED4\\u7EC6\\u8BC4\\u4F30\\u4FE1\\u606F\\u7684\\u6709\\u6548\\u6027\\u3002\"), React.createElement(MDXProvider, {\n    components: components\n  }, children)));\n};\nconst query = \"2264136072\";\nexport const Head = _ref3 => {\n  let {data} = _ref3;\n  return React.createElement(SEO, {\n    title: String(data.mdx.frontmatter.title)\n  });\n};\nPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h2","span","strong","a","_provideComponents","components","React","dangerouslySetInnerHTML","__html","href","wrapper","MDXLayout","_ref","children","isExternalHref","startsWith","parsedHref","encodeURIComponent","slice","target","undefined","rel","img","alt","src","restProps","Card","Link","PostTemplate","_ref2","data","mdx","fields","isDraft","frontmatter","title","date","dateString","updated","updatedDateString","categories","tags","timeliness","articleRef","dayjs","updatedDate","diffDays","diff","_articleRef$current","optimizedImageLinks","current","querySelectorAll","forEach","link","image","item","setAttribute","Fancybox","bind","unbind","className","length","Category","name","toString","format","map","tag","Tag","key","ref","MDXProvider","Head","_ref3","SEO","String","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}