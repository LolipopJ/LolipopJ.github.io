"use strict";(self.webpackChunkhomepage=self.webpackChunkhomepage||[]).push([[8775],{7397:function(n,e,a){a.r(e),a.d(e,{Head:function(){return E},default:function(){return _}});var s=a(8453),t=a(6540);function o(n){const e=Object.assign({p:"p",h2:"h2",ul:"ul",li:"li",strong:"strong",a:"a",span:"span",h3:"h3"},(0,s.R)(),n.components);return t.createElement(t.Fragment,null,t.createElement(e.p,null,"实习中学习一下 Protobuf 的功能和语法等，整理为此笔记。主要为翻译官方文档而来。"),"\n",t.createElement(e.h2,null,"什么是 Protobuf"),"\n",t.createElement(e.p,null,"Protobuf 是 Google 公司研发的一种用于序列化结构数据的机制，全称为 Protocol Buffers，具有语言无关、平台无关以及可拓展的特性。"),"\n",t.createElement(e.p,null,"我们常常把 Protobuf 与 XML (Extensible Markup Language) 相比较，它们二者都被设计来传输和存储结构化数据。相比于 XML，Protobuf 有如下优势与缺点："),"\n",t.createElement(e.ul,null,"\n",t.createElement(e.li,null,t.createElement(e.strong,null,"Protobuf 占用的空间更小"),"。Protobuf 采用二进制格式存储数据，适合网络传输和高性能场景；而 XML 采用文本格式存储数据，数据冗余度较高。"),"\n",t.createElement(e.li,null,t.createElement(e.strong,null,"Protobuf 编码和解码更快"),"。测试 Protobuf 库和 tinyxml2 库执行序列化和反序列化操作（",t.createElement(e.a,{href:"https://zhuanlan.zhihu.com/p/91313277"},"相关链接"),"），Protobuf 序列化速度大约是 XML 的 5 - 9 倍，反序列化速度大约是 XML 的 9 - 12 倍，更加适合高性能场景。"),"\n",t.createElement(e.li,null,t.createElement(e.strong,null,"Protobuf 不具有可读性"),"。Protobuf 传输的值为二进制数据，需要专用工具生成和解析；而 XML 自身的标签和文本内容具有一定的可读性。"),"\n"),"\n",t.createElement("details",null,t.createElement("summary",null,"使用 Protobuf，只需要编写 ",t.createElement("code",null,".proto")," 文件来描述需要传输和存储的结构数据，随后编译器会为之创建一个类，实现结构数据的自动编码和解码。"),t.createElement(e.p,null,"With protocol buffers, you write a .proto description of the data structure you wish to store. From that, the protocol buffer compiler creates a class that implements automatic encoding and parsing of the protocol buffer data with an efficient binary format. The generated class provides getters and setters for the fields that make up a protocol buffer and takes care of the details of reading and writing the protocol buffer as a unit.")),"\n",t.createElement("details",null,t.createElement("summary",null,"此外，Protobuf 支持使用特定的方式来拓展格式，使代码能够解析以前格式编码得到的数据。"),t.createElement(e.p,null,"Importantly, the protocol buffer format supports the idea of extending the format over time in such a way that the code can still read data encoded with the old format.")),"\n",t.createElement(e.h2,null,"定义协议格式"),"\n",t.createElement(e.p,null,"为了创建基于 Protobuf 的应用程序，我们需要首先创建一个 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.proto</code>'}})," 文件并且给出定义：为需要序列化的每个结构数据添加一条 ",t.createElement(e.strong,null,"message")," ，然后为 message 的每个字段指定名称和类型。下面是一个来自官网的基于 C++ 语言的例子，可以让您对 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.proto</code>'}})," 文件有一个更加直观的了解："),"\n",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="proto"><pre class="language-proto"><code class="language-proto">syntax = &quot;proto2&quot;; // 协议版本\n\npackage tutorial; // 程序包声明\n\nmessage Person {\n  optional string name = 1;\n  optional int32 id = 2;\n  optional string email = 3;\n\n  enum PhoneType {\n    MOBILE = 0;\n    HOME = 1;\n    WORK = 2;\n  }\n\n  message PhoneNumber {\n    optional string number = 1;\n    optional PhoneType type = 2 [default = HOME];\n  }\n\n  repeated PhoneNumber phones = 4;\n}\n\nmessage AddressBook {\n  repeated Person people = 1;\n}</code></pre></div>'}}),"\n",t.createElement(e.p,null,"在开头，首先指定了协议的版本，",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">syntax = "proto2";</code>'}})," 表示应使用 proto2 进行编码和解码。同理，如果指定为 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">syntax = "proto3";</code>'}})," 则表示应使用 proto3 进行编码和解码。如果不指定协议版本，在默认情况下，编译器会使用 proto2 进行编码和解码。"),"\n",t.createElement(e.p,null,"使用程序包声明 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">package tutorial;</code>'}})," 有助于防止不同项目之间的命名发生冲突。在 C++ 中，生成的类将放置在与程序包名称匹配的命名空间中。"),"\n",t.createElement(e.p,null,"接下来就是最重要的 message 定义了。message 是包含一组字段类型的总合。我们将基于 ",t.createElement(e.strong,null,"proto3")," 版本对 message 语法进行讲解与描述。"),"\n",t.createElement(e.h2,null,"proto3 基础语法"),"\n",t.createElement(e.h3,null,t.createElement(e.a,{href:"https://developers.google.com/protocol-buffers/docs/proto3#simple"},"定义消息类型")),"\n",t.createElement(e.p,null,"下面是一个非常简单的 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.proto</code>'}})," 例子："),"\n",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="proto"><pre class="language-proto"><code class="language-proto">syntax = &quot;proto3&quot;;\n\nmessage SearchRequest {\n  string query = 1;\n  int32 page_number = 2;\n  int32 result_per_page = 3;\n}</code></pre></div>'}}),"\n",t.createElement(e.p,null,"其中第一行需要指定正在使用 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">proto3</code>'}})," 语法，否则编译器将假定正在使用 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">proto2</code>'}})," 语法。指定语法版本必须在文件的第一个非空、非注释行。"),"\n",t.createElement(e.p,null,"例子定义了一个名为 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">SearchRequest</code>'}})," 的 message，存储了三个字段，包括字符串类型的 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">query</code>'}})," 和整数类型的 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">page_number</code>'}})," 与 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">result_per_page</code>'}}),". 三个字段均为标量值类型，所有可用的标量值类型可参考",t.createElement(e.a,{href:"https://developers.google.com/protocol-buffers/docs/proto3#scalar"},"此链接"),"。除了标量值类型，字段还可以使用枚举和其它 message 类型。"),"\n",t.createElement(e.p,null,"每个定义的字段都有一个",t.createElement(e.strong,null,"唯一"),"的编号，用来标识二进制格式下的字段。例如 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">query</code>'}})," 字段的唯一编号为 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">1</code>'}}),". 对字段编号的补充可参考",t.createElement(e.a,{href:"https://developers.google.com/protocol-buffers/docs/proto3#assigning_field_numbers"},"此链接"),"。"),"\n",t.createElement(e.h3,null,t.createElement(e.a,{href:"https://developers.google.com/protocol-buffers/docs/proto3#specifying_field_rules"},"字段规则")),"\n",t.createElement(e.p,null,"与 proto2 不同的是，proto3 只包括两种字段规则："),"\n",t.createElement(e.ul,null,"\n",t.createElement(e.li,null,"singular. 一则 message 只能拥有不超过一个该字段。是",t.createElement(e.strong,null,"默认"),"的字段规则，不需要特别指定；"),"\n",t.createElement(e.li,null,t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">repeated</code>'}}),". 一则 message 可以拥有任意个该字段。重复值的顺序将被保留。"),"\n"),"\n",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="proto"><pre class="language-proto"><code class="language-proto">message SearchRequest {\n  string query = 1;\n  int32 page_number = 2;\n  int32 result_per_page = 3;\n  repeated string query_extras = 4;\n}</code></pre></div>'}}),"\n",t.createElement(e.p,null,"上例中定义了三个 singular 字段 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">query</code>'}}),", ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">page_number</code>'}})," 和 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">result_per_page</code>'}}),"，以及一个 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">repeated</code>'}})," 字段 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">query_extras</code>'}}),"."),"\n",t.createElement("details",null,t.createElement("summary",null,t.createElement(e.p,null,"作为补充，proto2 包括三种字段规则：",t.createElement("code",null,"required"),", ",t.createElement("code",null,"optional")," 和 ",t.createElement("code",null,"repeated"),".")),t.createElement(e.ul,null,"\n",t.createElement(e.li,null,t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">required</code>'}}),". 一则 message 中必须且只能拥有一个该字段；"),"\n",t.createElement(e.li,null,t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">optional</code>'}}),". 一则 message 中只能拥有不超过一个该字段，相当于 proto3 的 singular."),"\n",t.createElement(e.li,null,t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">repeated</code>'}}),". 一则 message 可以拥有任意个该字段，相当于 proto3 的 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">repeated</code>'}}),"."),"\n"),t.createElement(e.p,null,t.createElement(e.a,{href:"(https://developers.google.com/protocol-buffers/docs/proto#specifying_field_rules)"},"相关链接"))),"\n",t.createElement(e.h3,null,t.createElement(e.a,{href:"https://developers.google.com/protocol-buffers/docs/proto3#reserved"},"保留字段")),"\n",t.createElement(e.p,null,"当更新 message 定义需要完全移除一个字段时，则将来的用户在自己对该类型进行更新时可以重用该字段号。为了保证在读取旧版本的 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.proto</code>'}})," 时不引发问题，需要将已删除字段的字段编号（或名称）指定为 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">reserved</code>'}}),"，这样将来任何用户在更新 message 时尝试使用这些字段号（或名称）时，编译器会报错。"),"\n",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="proto"><pre class="language-proto"><code class="language-proto">message Foo {\n  reserved 2, 15, 9 to 11;\n  reserved &quot;foo&quot;, &quot;bar&quot;;\n}</code></pre></div>'}}),"\n",t.createElement(e.p,null,"上述内容指定了 2, 9, 10, 11, 15 为保留字段号，指定了 foo, bar 为保留字段名。在以后的编写中不应当被使用。"),"\n",t.createElement(e.p,null,"需要注意的是，不能在一条 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">reserved</code>'}})," 语句中同时使用字段号和字段名。"),"\n",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="proto"><pre class="language-proto"><code class="language-proto">reserved 2, 15, &quot;foo&quot;; // wrong!</code></pre></div>'}}),"\n",t.createElement(e.h3,null,t.createElement(e.a,{href:"https://developers.google.com/protocol-buffers/docs/proto3#enum"},"使用枚举类型")),"\n",t.createElement(e.p,null,"当只希望某一个字段的取值为预定义值的某一个时，可以使用枚举。"),"\n",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="proto"><pre class="language-proto"><code class="language-proto">message SearchRequest {\n  string query = 1;\n  int32 page_number = 2;\n  int32 result_per_page = 3;\n  enum Corpus {\n    UNIVERSAL = 0;\n    WEB = 1;\n    IMAGES = 2;\n    LOCAL = 3;\n    NEWS = 4;\n    PRODUCTS = 5;\n    VIDEO = 6;\n  }\n  Corpus corpus = 4;\n}</code></pre></div>'}}),"\n",t.createElement(e.p,null,"上例中我们定义了名为 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Corpus</code>'}})," 的枚举，其中包括 7 种可能的取值。接下来，我们就可以添加使用 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Corpus</code>'}})," 枚举的字段 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">corpus</code>'}}),"."),"\n",t.createElement(e.p,null,"为了定义枚举常量的别名，我们可以将相同的值分配给不同的枚举常量名。为此，首先需要将 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">allow_alias</code>'}})," 选项设置为 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">true</code>'}}),"，否则将会报错。"),"\n",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="proto"><pre class="language-proto"><code class="language-proto">message MyMessage {\n  enum EnumAllowingAlias {\n    option allow_alias = true;\n    UNKNOWN = 0;\n    STARTED = 1;\n    RUNNING = 1; // It works.\n  }\n  EnumAllowingAlias enum_allowing_alias = 1;\n}</code></pre></div>'}}),"\n",t.createElement(e.p,null,"上例中，",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">STARTED</code>'}})," 和 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">RUNNING</code>'}})," 为同一枚举常量的不同别名。"),"\n",t.createElement(e.h3,null,t.createElement(e.a,{href:"https://developers.google.com/protocol-buffers/docs/proto3#other"},"使用 Message 类型")),"\n",t.createElement(e.p,null,"为了使消息结构更加清晰，我们可以指定其他 message 类型作为字段类型，实现嵌套。"),"\n",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="proto"><pre class="language-proto"><code class="language-proto">message SearchResponse {\n  repeated Result results = 1;\n}\n\nmessage Result {\n  string url = 1;\n  string title = 2;\n  repeated string snippets = 3;\n}</code></pre></div>'}}),"\n",t.createElement(e.p,null,"上例中定义了两种不同的 message 类型，",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">SearchResponse</code>'}})," 和 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Result</code>'}}),". 其中 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">SearchResponse</code>'}})," 拥有一个 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">results</code>'}})," 字段，其字段类型为 message 类型 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Result</code>'}}),"."),"\n",t.createElement(e.h3,null,t.createElement(e.a,{href:"https://developers.google.com/protocol-buffers/docs/proto3#nested"},"使用嵌套类型")),"\n",t.createElement(e.p,null,"也许您不需要复用一些 message 类型，我们也可以将 message 类型放在 message 当中。"),"\n",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="proto"><pre class="language-proto"><code class="language-proto">message SearchResponse {\n  message Result {\n    string url = 1;\n    string title = 2;\n    repeated string snippets = 3;\n  }\n  repeated Result results = 1;\n}</code></pre></div>'}}),"\n",t.createElement(e.p,null,"上例与前一小段的例子有相同的效果。"),"\n",t.createElement(e.p,null,"嵌套类型不限定层数，可以根据需要进行深层嵌套。"),"\n",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="proto"><pre class="language-proto"><code class="language-proto">message Outer { // Level 0\n  message MiddleAA { // Level 1\n    message Inner { // Level 2\n      int64 ival = 1;\n      bool  booly = 2;\n    }\n  }\n  message MiddleBB { // Level 1\n    message Inner { // Level 2\n      int32 ival = 1;\n      bool  booly = 2;\n    }\n  }\n}</code></pre></div>'}}),"\n",t.createElement(e.p,null,"其中，",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">MiddleAA</code>'}})," 中的 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Inner</code>'}})," 与 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">MiddleBB</code>'}})," 中的 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Inner</code>'}})," 虽然有相同的字段名，但存储的是不同的内容。"),"\n",t.createElement(e.h3,null,"其它字段类型"),"\n",t.createElement(e.ul,null,"\n",t.createElement(e.li,null,t.createElement(e.a,{href:"https://developers.google.com/protocol-buffers/docs/proto3#any"},"Any"),"."),"\n",t.createElement(e.li,null,t.createElement(e.a,{href:"https://developers.google.com/protocol-buffers/docs/proto3#oneof"},"Oneof"),"."),"\n",t.createElement(e.li,null,t.createElement(e.a,{href:"https://developers.google.com/protocol-buffers/docs/proto3#maps"},"Maps"),"."),"\n"),"\n",t.createElement(e.h2,null,"定义为 RPC 服务"),"\n",t.createElement(e.p,null,"如果想要将 message 类型用于 RPC 系统，可以在 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.proto</code>'}})," 文件中定义 RPC 服务接口，编译器将根据使用的语言生成 RPC 服务接口并打桩。"),"\n",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="proto"><pre class="language-proto"><code class="language-proto">service SearchService {\n  rpc Search(SearchRequest) returns (SearchResponse);\n}</code></pre></div>'}}),"\n",t.createElement(e.p,null,"上例定义了一个名为 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">SearchService</code>'}})," 的 RPC 服务，其中包含了一个 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Search</code>'}})," 方法，其参数为 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">SearchRequest</code>'}})," 类型的 message，返回值为 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">SearchResponse</code>'}})," 类型的 message."),"\n",t.createElement(e.p,null,"能够与 Protobuf 最直接对接的 RPC 系统是 gRPC，同样由 Google 公司开发的语言无关、平台无关的开源 RPC 系统。如果使用 gRPC，只需要使用一个特殊的 ",t.createElement(e.a,{href:"https://grpc.io/docs/protoc-installation/"},"gRPC 插件"),"，就可以根据 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.proto</code>'}})," 文件里的内容自动生成 RPC 代码。"),"\n",t.createElement(e.h2,null,"编译 .proto 文件"),"\n",t.createElement(e.p,null,"首先编译并配置好 Protoc，并且安装了 Go 语言插件 protoc-gen-go."),"\n",t.createElement(e.p,null,"参考官网给出的例子，我分别编写了 Go 和 C++ 版本的 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.proto</code>'}})," 文件："),"\n",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="proto"><pre class="language-proto"><code class="language-proto">// addressbook-go.proto\nsyntax = &quot;proto3&quot;;\npackage tutorial;\n\nimport &quot;google/protobuf/timestamp.proto&quot;;\n\n// go_package 选项定义了软件包的导入路径\n// 对于 go 版本，包含 go_package 设置的内容；cpp 版本应注释掉\noption go_package = &quot;github.com/protocolbuffers/protobuf/examples/go/tutorialpb&quot;;\n\nmessage Person {\n  string name = 1;\n  int32 id = 2;\n  string email = 3;\n\n  enum PhoneType {\n    MOBILE = 0;\n    HOME = 1;\n    WORK = 2;\n  }\n\n  message PhoneNumber {\n    string number = 1;\n    PhoneType type = 2;\n  }\n\n  repeated PhoneNumber phones = 4;\n\n  google.protobuf.Timestamp last_updated = 5;\n}\n\nmessage AddressBook {\n  repeated Person people = 1;\n}</code></pre></div>'}}),"\n",t.createElement(e.p,null,"使用 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">protoc</code>'}})," 命令对编写的 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.protoc</code>'}})," 文件进行编译。"),"\n",t.createElement(e.h3,null,"Go 版本编译"),"\n",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token comment"># 编译 Go 版本的 .protoc 文件</span>\nprotoc <span class="token parameter variable">-I</span><span class="token operator">=</span><span class="token variable">$SRC_DIR</span> <span class="token parameter variable">--go_out</span><span class="token operator">=</span><span class="token variable">$DST_DIR</span> <span class="token variable">$SRC_DIR</span>/addressbook-go.proto</code></pre></div>'}}),"\n",t.createElement(e.p,null,"编译 Go 版本，会在 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">$DST_DIR/github.com/protocolbuffers/protobuf/examples/go/tutorialpb</code>'}})," 目录下生成 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">addressbook-go.pb.go</code>'}})," 文件。"),"\n",t.createElement(e.p,null,"示例代码 ",t.createElement(e.a,{href:"https://github.com/protocolbuffers/protobuf/blob/master/examples/list_people.go"},t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">list_people.go</code>'}}))," 展示了如何打印出 AddressBook 中所有的 Person 信息："),"\n",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="go"><pre class="language-go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">writePerson</span><span class="token punctuation">(</span>w io<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> p <span class="token operator">*</span>pb<span class="token punctuation">.</span>Person<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Fprintln</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"Person ID:"</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>Id<span class="token punctuation">)</span>\n    fmt<span class="token punctuation">.</span><span class="token function">Fprintln</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"  Name:"</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>Name<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> p<span class="token punctuation">.</span>Email <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">{</span>\n        fmt<span class="token punctuation">.</span><span class="token function">Fprintln</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"  E-mail address:"</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>Email<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> pn <span class="token operator">:=</span> <span class="token keyword">range</span> p<span class="token punctuation">.</span>Phones <span class="token punctuation">{</span>\n        <span class="token keyword">switch</span> pn<span class="token punctuation">.</span>Type <span class="token punctuation">{</span>\n        <span class="token keyword">case</span> pb<span class="token punctuation">.</span>Person_MOBILE<span class="token punctuation">:</span>\n            fmt<span class="token punctuation">.</span><span class="token function">Fprint</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"  Mobile phone #: "</span><span class="token punctuation">)</span>\n        <span class="token keyword">case</span> pb<span class="token punctuation">.</span>Person_HOME<span class="token punctuation">:</span>\n            fmt<span class="token punctuation">.</span><span class="token function">Fprint</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"  Home phone #: "</span><span class="token punctuation">)</span>\n        <span class="token keyword">case</span> pb<span class="token punctuation">.</span>Person_WORK<span class="token punctuation">:</span>\n            fmt<span class="token punctuation">.</span><span class="token function">Fprint</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"  Work phone #: "</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        fmt<span class="token punctuation">.</span><span class="token function">Fprintln</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> pn<span class="token punctuation">.</span>Number<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">func</span> <span class="token function">listPeople</span><span class="token punctuation">(</span>w io<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> book <span class="token operator">*</span>pb<span class="token punctuation">.</span>AddressBook<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> p <span class="token operator">:=</span> <span class="token keyword">range</span> book<span class="token punctuation">.</span>People <span class="token punctuation">{</span>\n        <span class="token function">writePerson</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> p<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(e.h3,null,"C++ 版本编译"),"\n",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token comment"># 编译 C++ 版本的 .protoc 文件</span>\nprotoc <span class="token parameter variable">-I</span><span class="token operator">=</span><span class="token variable">$SRC_DIR</span> <span class="token parameter variable">--cpp_out</span><span class="token operator">=</span><span class="token variable">$DST_DIR</span> <span class="token variable">$SRC_DIR</span>/addressbook-cpp.proto</code></pre></div>'}}),"\n",t.createElement(e.p,null,"编译 C++ 版本，会在 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">$DST_DIR</code>'}})," 目录下生成 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">addressbook-cpp.pb.cc</code>'}})," 和 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">addressbook-cpp.pb.h</code>'}})," 两个文件。"),"\n",t.createElement(e.p,null,"示例代码 ",t.createElement(e.a,{href:"https://github.com/protocolbuffers/protobuf/blob/master/examples/list_people.cc"},t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">list_people.cc</code>'}}))," 展示了如何打印出 AddressBook 中所有的 Person 信息："),"\n",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="cpp"><pre class="language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">ListPeople</span><span class="token punctuation">(</span><span class="token keyword">const</span> tutorial<span class="token double-colon punctuation">::</span>AddressBook<span class="token operator">&amp;</span> address_book<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> address_book<span class="token punctuation">.</span><span class="token function">people_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> tutorial<span class="token double-colon punctuation">::</span>Person<span class="token operator">&amp;</span> person <span class="token operator">=</span> address_book<span class="token punctuation">.</span><span class="token function">people</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Person ID: "</span> <span class="token operator">&lt;&lt;</span> person<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>\n    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"  Name: "</span> <span class="token operator">&lt;&lt;</span> person<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">email</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      cout <span class="token operator">&lt;&lt;</span> <span class="token string">"  E-mail address: "</span> <span class="token operator">&lt;&lt;</span> person<span class="token punctuation">.</span><span class="token function">email</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> person<span class="token punctuation">.</span><span class="token function">phones_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> tutorial<span class="token double-colon punctuation">::</span>Person<span class="token double-colon punctuation">::</span>PhoneNumber<span class="token operator">&amp;</span> phone_number <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">phones</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token keyword">switch</span> <span class="token punctuation">(</span>phone_number<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">case</span> tutorial<span class="token double-colon punctuation">::</span>Person<span class="token double-colon punctuation">::</span>MOBILE<span class="token operator">:</span>\n          cout <span class="token operator">&lt;&lt;</span> <span class="token string">"  Mobile phone #: "</span><span class="token punctuation">;</span>\n          <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> tutorial<span class="token double-colon punctuation">::</span>Person<span class="token double-colon punctuation">::</span>HOME<span class="token operator">:</span>\n          cout <span class="token operator">&lt;&lt;</span> <span class="token string">"  Home phone #: "</span><span class="token punctuation">;</span>\n          <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> tutorial<span class="token double-colon punctuation">::</span>Person<span class="token double-colon punctuation">::</span>WORK<span class="token operator">:</span>\n          cout <span class="token operator">&lt;&lt;</span> <span class="token string">"  Work phone #: "</span><span class="token punctuation">;</span>\n          <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">default</span><span class="token operator">:</span>\n          cout <span class="token operator">&lt;&lt;</span> <span class="token string">"  Unknown phone #: "</span><span class="token punctuation">;</span>\n          <span class="token keyword">break</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      cout <span class="token operator">&lt;&lt;</span> phone_number<span class="token punctuation">.</span><span class="token function">number</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">has_last_updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      cout <span class="token operator">&lt;&lt;</span> <span class="token string">"  Updated: "</span> <span class="token operator">&lt;&lt;</span> <span class="token class-name">TimeUtil</span><span class="token double-colon punctuation">::</span><span class="token function">ToString</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">last_updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}))}var l=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,s.R)(),n.components);return e?t.createElement(e,n,t.createElement(o,n)):o(n)},p=a(197),c=a(4353),r=a.n(c),u=a(4794),g=a(6947),i=a(4017),d=a(1042),m=a(1038);const k={a:n=>{let{href:e="",children:a}=n;const s=!(null!=e&&e.startsWith("#")),o=s?e:`#${encodeURIComponent(e.slice(1))}`;return t.createElement("a",{href:o,target:s?"_blank":void 0,rel:"noreferrer"},a)},img:n=>{const{alt:e="The author is too lazy to give an alt",src:a,...s}=n;return t.createElement("a",{href:a,"data-fancybox":"gallery","data-caption":e},t.createElement("img",Object.assign({src:a,alt:e},s)))},Card:g.A,Link:u.Link},h=n=>{let{children:e,data:a}=n;const{mdx:{frontmatter:{title:o,date:l,updated:c,categories:u,tags:g,timeliness:d}}}=a,h=t.useRef(null),E=r()(l),_=c?r()(c):E,f=r()().diff(_,"days");return t.useEffect((()=>{var n;const e=null===(n=h.current)||void 0===n?void 0:n.querySelectorAll("a.gatsby-resp-image-link");return null==e||e.forEach((n=>{const e=n.children.item(1);n.setAttribute("data-fancybox","gallery"),n.setAttribute("data-caption",e.alt)})),p.lX.bind("[data-fancybox]"),()=>p.lX.unbind("[data-fancybox]")}),[]),t.createElement("div",{className:"mx-auto flex max-w-xl flex-col gap-y-12"},t.createElement("div",{className:"flex flex-col gap-4"},(null==u?void 0:u.length)&&t.createElement(i.A,{name:u[0],className:"item-selectable"}),t.createElement("h1",{className:"text-3xl font-bold"},o),t.createElement("div",{className:"item-secondary flex flex-col gap-2 lg:flex-row"},l&&t.createElement("span",{title:`首次发布于：${E.toString()}\n最后更新于：${_.toString()}`},E.format("MM 月 DD 日 YYYY 年")),(null==g?void 0:g.length)&&t.createElement("div",{className:"flex flex-1 flex-wrap gap-2 lg:before:content-['•']"},g.map((n=>t.createElement(m.A,{key:n,name:n,className:"item-secondary item-selectable"})))))),t.createElement("article",{ref:h,className:"heti post-entry"},!1!==d&&f>365&&t.createElement("blockquote",{className:"border-l-4 border-orange-400"},"这是一篇",t.createElement("strong",null,"最后更新于 ",f," 天前"),"的博客，内容可能随着时间的推移而变得不再适用，建议您仔细评估信息的有效性。"),t.createElement(s.x,{components:k},e)))},E=n=>{let{data:e}=n;return t.createElement(d.A,{title:String(e.mdx.frontmatter.title)})};function _(n){return t.createElement(h,n,t.createElement(l,n))}}}]);
//# sourceMappingURL=component---src-templates-post-tsx-content-file-path-blog-posts-protobuf-learning-mdx-4ee0185e2950aa9423ec.js.map