{"version":3,"file":"component---src-templates-post-tsx-content-file-path-blog-posts-linux-docker-install-grpc-mdx-f16239b8c22a5065f693.js","mappings":"yMAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,EAAG,IACHC,GAAI,KACJC,KAAM,OACNC,WAAY,aACZC,GAAI,OACHC,EAAAA,EAAAA,KAAsBV,EAAMW,aAAa,KAACC,GAAQX,EAErD,OADKW,GA8OP,SAA8BC,EAAIC,GAChC,MAAM,IAAIC,MAAM,aAAeD,EAAY,YAAc,UAAY,KAAOD,EAAK,qEACnF,CAhPaG,CAAqB,QAAQ,GACjCC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBhB,EAAYG,EAAG,KAAM,gCAAiCa,EAAAA,cAAoBhB,EAAYI,EAAG,CAC5Ja,KAAM,4BACL,WAAY,qBAAsB,KAAMD,EAAAA,cAAoBhB,EAAYG,EAAG,KAAM,0BAA2Ba,EAAAA,cAAoBhB,EAAYI,EAAG,CAChJa,KAAM,gCACL,aAAc,gBAAiB,KAAMD,EAAAA,cAAoBhB,EAAYK,GAAI,KAAM,UAAW,KAAMW,EAAAA,cAAoBhB,EAAYG,EAAG,KAAM,iBAAkBa,EAAAA,cAAoBhB,EAAYM,KAAM,CAClMY,wBAAyB,CACvBC,OAAQ,iDAER,KAAMH,EAAAA,cAAoBhB,EAAYM,KAAM,CAC9CY,wBAAyB,CACvBC,OAAQ,gDAER,KAAMH,EAAAA,cAAoBhB,EAAYM,KAAM,CAC9CY,wBAAyB,CACvBC,OAAQ,mDAER,gBAAiB,KAAMH,EAAAA,cAAoBhB,EAAYM,KAAM,CAC/DY,wBAAyB,CACvBC,OAAQ,ihBAER,KAAMH,EAAAA,cAAoBhB,EAAYG,EAAG,KAAM,cAAea,EAAAA,cAAoBhB,EAAYM,KAAM,CACtGY,wBAAyB,CACvBC,OAAQ,4CAER,QAASH,EAAAA,cAAoBhB,EAAYM,KAAM,CACjDY,wBAAyB,CACvBC,OAAQ,4CAER,mDAAoD,KAAMH,EAAAA,cAAoBhB,EAAYG,EAAG,KAAM,OAAQa,EAAAA,cAAoBhB,EAAYM,KAAM,CACnJY,wBAAyB,CACvBC,OAAQ,kDAER,SAAUH,EAAAA,cAAoBhB,EAAYM,KAAM,CAClDY,wBAAyB,CACvBC,OAAQ,oDAER,MAAOH,EAAAA,cAAoBhB,EAAYI,EAAG,CAC5Ca,KAAM,oEACL,QAAS,KAAMD,EAAAA,cAAoBhB,EAAYM,KAAM,CACtDY,wBAAyB,CACvBC,OAAQ,8CAER,KAAMH,EAAAA,cAAoBhB,EAAYM,KAAM,CAC9CY,wBAAyB,CACvBC,OAAQ,8CAER,OAAQH,EAAAA,cAAoBhB,EAAYM,KAAM,CAChDY,wBAAyB,CACvBC,OAAQ,8CAER,2BAA4BH,EAAAA,cAAoBhB,EAAYM,KAAM,CACpEY,wBAAyB,CACvBC,OAAQ,+CAER,kBAAmB,KAAMH,EAAAA,cAAoBhB,EAAYG,EAAG,KAAM,mBAAoBa,EAAAA,cAAoBL,EAAM,CAClHS,GAAI,kCACH,SAAU,KAAM,KAAMJ,EAAAA,cAAoBhB,EAAYM,KAAM,CAC7DY,wBAAyB,CACvBC,OAAQ,uOAER,KAAMH,EAAAA,cAAoBhB,EAAYG,EAAG,KAAM,WAAYa,EAAAA,cAAoBhB,EAAYM,KAAM,CACnGY,wBAAyB,CACvBC,OAAQ,4CAER,MAAOH,EAAAA,cAAoBhB,EAAYM,KAAM,CAC/CY,wBAAyB,CACvBC,OAAQ,4CAER,WAAYH,EAAAA,cAAoBhB,EAAYM,KAAM,CACpDY,wBAAyB,CACvBC,OAAQ,0DAER,MAAOH,EAAAA,cAAoBhB,EAAYM,KAAM,CAC/CY,wBAAyB,CACvBC,OAAQ,wDAER,SAAU,KAAMH,EAAAA,cAAoBhB,EAAYM,KAAM,CACxDY,wBAAyB,CACvBC,OAAQ,6bAER,KAAMH,EAAAA,cAAoBhB,EAAYK,GAAI,KAAM,YAAa,KAAMW,EAAAA,cAAoBhB,EAAYO,WAAY,KAAM,KAAMS,EAAAA,cAAoBhB,EAAYG,EAAG,KAAMa,EAAAA,cAAoBhB,EAAYM,KAAM,CAC5MY,wBAAyB,CACvBC,OAAQ,6CAER,uCAAwCH,EAAAA,cAAoBhB,EAAYM,KAAM,CAChFY,wBAAyB,CACvBC,OAAQ,8CAER,MAAOH,EAAAA,cAAoBhB,EAAYM,KAAM,CAC/CY,wBAAyB,CACvBC,OAAQ,8CAER,gBAAiBH,EAAAA,cAAoBhB,EAAYM,KAAM,CACzDY,wBAAyB,CACvBC,OAAQ,8CAER,UAAW,MAAO,KAAMH,EAAAA,cAAoBhB,EAAYG,EAAG,KAAM,wDAAyDa,EAAAA,cAAoBhB,EAAYM,KAAM,CAClKY,wBAAyB,CACvBC,OAAQ,8CAER,oBAAqBH,EAAAA,cAAoBhB,EAAYM,KAAM,CAC7DY,wBAAyB,CACvBC,OAAQ,6CAER,SAAU,KAAMH,EAAAA,cAAoBhB,EAAYM,KAAM,CACxDY,wBAAyB,CACvBC,OAAQ,oPAER,KAAMH,EAAAA,cAAoBhB,EAAYG,EAAG,KAAM,KAAMa,EAAAA,cAAoBhB,EAAYI,EAAG,CAC1Fa,KAAM,+BACL,YAAa,2BAA4B,KAAMD,EAAAA,cAAoBhB,EAAYG,EAAG,KAAM,0CAA2Ca,EAAAA,cAAoBhB,EAAYM,KAAM,CAC1KY,wBAAyB,CACvBC,OAAQ,yEAER,OAAQH,EAAAA,cAAoBhB,EAAYM,KAAM,CAChDY,wBAAyB,CACvBC,OAAQ,+CAER,UAAW,KAAMH,EAAAA,cAAoBhB,EAAYG,EAAG,KAAM,UAAWa,EAAAA,cAAoBhB,EAAYM,KAAM,CAC7GY,wBAAyB,CACvBC,OAAQ,gFAER,mBAAoBH,EAAAA,cAAoBhB,EAAYM,KAAM,CAC5DY,wBAAyB,CACvBC,OAAQ,kDAER,iCAAkC,KAAMH,EAAAA,cAAoBhB,EAAYM,KAAM,CAChFY,wBAAyB,CACvBC,OAAQ,ioBAER,KAAMH,EAAAA,cAAoBhB,EAAYG,EAAG,KAAM,cAAea,EAAAA,cAAoBhB,EAAYM,KAAM,CACtGY,wBAAyB,CACvBC,OAAQ,mFAER,uDAAwDH,EAAAA,cAAoBhB,EAAYM,KAAM,CAChGY,wBAAyB,CACvBC,OAAQ,wDAER,2CAA4C,KAAMH,EAAAA,cAAoBhB,EAAYM,KAAM,CAC1FY,wBAAyB,CACvBC,OAAQ,qXAER,KAAMH,EAAAA,cAAoBhB,EAAYG,EAAG,KAAM,eAAgBa,EAAAA,cAAoBhB,EAAYM,KAAM,CACvGY,wBAAyB,CACvBC,OAAQ,6DAER,SAAU,KAAMH,EAAAA,cAAoBhB,EAAYK,GAAI,KAAM,WAAY,KAAMW,EAAAA,cAAoBhB,EAAYG,EAAG,KAAM,0DAA2D,KAAMa,EAAAA,cAAoBhB,EAAYG,EAAG,KAAM,iDAAkD,KAAMa,EAAAA,cAAoBhB,EAAYM,KAAM,CAC/TY,wBAAyB,CACvBC,OAAQ,4dAER,KAAMH,EAAAA,cAAoBhB,EAAYK,GAAI,KAAM,aAAc,KAAMW,EAAAA,cAAoBhB,EAAYG,EAAG,KAAM,OAAQa,EAAAA,cAAoBhB,EAAYI,EAAG,CAC1Ja,KAAM,qGACL,MAAO,sEAAuE,KAAMD,EAAAA,cAAoBhB,EAAYM,KAAM,CAC3HY,wBAAyB,CACvBC,OAAQ,w9BAER,KAAMH,EAAAA,cAAoBhB,EAAYG,EAAG,KAAM,gBAAiBa,EAAAA,cAAoBhB,EAAYI,EAAG,CACrGa,KAAM,4EACL,QAAS,KAAM,KAAMD,EAAAA,cAAoBhB,EAAYM,KAAM,CAC5DY,wBAAyB,CACvBC,OAAQ,m+CAER,KAAMH,EAAAA,cAAoBhB,EAAYG,EAAG,KAAM,aAAca,EAAAA,cAAoBhB,EAAYM,KAAM,CACrGY,wBAAyB,CACvBC,OAAQ,4CAER,gBAAiBH,EAAAA,cAAoBhB,EAAYM,KAAM,CACzDY,wBAAyB,CACvBC,OAAQ,8CAER,UAAWH,EAAAA,cAAoBhB,EAAYM,KAAM,CACnDY,wBAAyB,CACvBC,OAAQ,+DAER,OAAQ,KAAMH,EAAAA,cAAoBhB,EAAYM,KAAM,CACtDY,wBAAyB,CACvBC,OAAQ,mYAER,KAAMH,EAAAA,cAAoBhB,EAAYG,EAAG,KAAM,mBAAoBa,EAAAA,cAAoBhB,EAAYI,EAAG,CACxGa,KAAM,oEACL,WAAY,KAAM,KAAMD,EAAAA,cAAoBhB,EAAYG,EAAG,KAAM,+CAAgD,KAAMa,EAAAA,cAAoBhB,EAAYM,KAAM,CAC9JY,wBAAyB,CACvBC,OAAQ,y2CAER,KAAMH,EAAAA,cAAoBhB,EAAYG,EAAG,KAAM,iCAAkC,KAAMa,EAAAA,cAAoBhB,EAAYK,GAAI,KAAM,kBAAmB,KAAMW,EAAAA,cAAoBhB,EAAYG,EAAG,KAAM,oBAAqB,KAAMa,EAAAA,cAAoBhB,EAAYM,KAAM,CACtQY,wBAAyB,CACvBC,OAAQ,wqCAER,KAAMH,EAAAA,cAAoBhB,EAAYG,EAAG,KAAM,+BAAgC,KAAMa,EAAAA,cAAoBhB,EAAYG,EAAG,KAAM,mCAAoCa,EAAAA,cAAoBhB,EAAYM,KAAM,CAC1MY,wBAAyB,CACvBC,OAAQ,8CAER,QAAS,KAAMH,EAAAA,cAAoBhB,EAAYM,KAAM,CACvDY,wBAAyB,CACvBC,OAAQ,uQAER,KAAMH,EAAAA,cAAoBhB,EAAYG,EAAG,KAAM,qCAAsC,KAAMa,EAAAA,cAAoBhB,EAAYM,KAAM,CACnIY,wBAAyB,CACvBC,OAAQ,iOAER,KAAMH,EAAAA,cAAoBhB,EAAYG,EAAG,KAAM,yBAA0B,KAAMa,EAAAA,cAAoBhB,EAAYM,KAAM,CACvHY,wBAAyB,CACvBC,OAAQ,2VAER,KAAMH,EAAAA,cAAoBhB,EAAYG,EAAG,KAAM,qBAAsB,KAAMa,EAAAA,cAAoBhB,EAAYK,GAAI,KAAM,WAAY,KAAMW,EAAAA,cAAoBhB,EAAYQ,GAAI,KAAM,6BAA8B,KAAMQ,EAAAA,cAAoBhB,EAAYM,KAAM,CAC7PY,wBAAyB,CACvBC,OAAQ,4xBAER,KAAMH,EAAAA,cAAoBhB,EAAYG,EAAG,KAAM,YAAaa,EAAAA,cAAoBhB,EAAYM,KAAM,CACpGY,wBAAyB,CACvBC,OAAQ,kDAER,WAAYH,EAAAA,cAAoBhB,EAAYM,KAAM,CACpDY,wBAAyB,CACvBC,OAAQ,4CAER,QAASH,EAAAA,cAAoBhB,EAAYM,KAAM,CACjDY,wBAAyB,CACvBC,OAAQ,4CAER,aAAcH,EAAAA,cAAoBhB,EAAYM,KAAM,CACtDY,wBAAyB,CACvBC,OAAQ,+CAER,cAAe,KAAMH,EAAAA,cAAoBhB,EAAYG,EAAG,KAAM,KAAMa,EAAAA,cAAoBhB,EAAYI,EAAG,CACzGa,KAAM,mDACL,MAAO,KAAMD,EAAAA,cAAoBhB,EAAYM,KAAM,CACpDY,wBAAyB,CACvBC,OAAQ,kDAER,yBACN,CAKA,MAJA,SAAoBpB,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOsB,QAASC,GAAarB,OAAOC,OAAO,CAAC,GAAGO,EAAAA,EAAAA,KAAsBV,EAAMW,YAC3E,OAAOY,EAAYN,EAAAA,cAAoBM,EAAWvB,EAAOiB,EAAAA,cAAoBlB,EAAmBC,IAAUD,EAAkBC,EAC9H,E,kFC9OA,MAqBMW,EAAa,CACjBN,EAXYmB,IACZ,IAAI,KAACN,EAAO,GAAE,SAAEO,GAAYD,EAC5B,MAAME,IAAmBR,SAAoCA,EAAKS,WAAW,MACvEC,EAAaF,EAAiBR,EAAO,IAAIW,mBAAmBX,EAAKY,MAAM,MAC7E,OAAOb,EAAAA,cAAoB,IAAK,CAC9BC,KAAMU,EACNG,OAAQL,EAAiB,cAAWM,EACpCC,IAAK,cACJR,EAAS,EAIZS,IAvBoBlC,IACpB,MAAM,IAACmC,EAAM,wCAAuC,IAAEC,KAAQC,GAAarC,EAC3E,OAAOiB,EAAAA,cAAoB,IAAK,CAC9BC,KAAMkB,EACN,gBAAiB,UACjB,eAAgBD,GACflB,EAAAA,cAAoB,MAAOf,OAAOC,OAAO,CAC1CiC,IAAKA,EACLD,IAAKA,GACJE,IAAY,EAefC,KAAI,IACJ1B,KAAIA,EAAAA,MAEA2B,EAAeC,IACnB,IAAI,SAACf,EAAQ,KAAEgB,GAAQD,EACvB,MAAOE,KAAMC,aAAa,MAACC,EAAOC,KAAMC,EAAYC,QAASC,EAAiB,WAAEC,EAAU,KAAEC,EAAI,WAAEC,KAAgBV,EAC5GW,EAAanC,EAAAA,OAAa,MAC1B4B,EAAOQ,IAAMP,GACbQ,EAAcN,EAAoBK,IAAML,GAAqBH,EAE7DU,EADQF,MACSG,KAAKF,EAAa,QAYzC,OAXArC,EAAAA,WAAgB,KACd,IAAIwC,EACJ,MAAMC,EAAqE,QAA9CD,EAAsBL,EAAWO,eAA6C,IAAxBF,OAAiC,EAASA,EAAoBG,iBAAiB,4BAOlK,OANAF,SAA0EA,EAAoBG,SAAQC,IACpG,MAAMC,EAAQD,EAAKrC,SAASuC,KAAK,GACjCF,EAAKG,aAAa,gBAAiB,WACnCH,EAAKG,aAAa,eAAgBF,EAAM5B,IAAI,IAE9C+B,EAAAA,GAASC,KAAK,mBACP,IAAMD,EAAAA,GAASE,OAAO,kBAAkB,GAC9C,IACInD,EAAAA,cAAoB,MAAO,CAChCoD,UAAW,2CACVpD,EAAAA,cAAoB,MAAO,CAC5BoD,UAAW,wBACTpB,aAA+C,EAASA,EAAWqB,SAAWrD,EAAAA,cAAoBsD,EAAAA,EAAU,CAC9GC,KAAMvB,EAAW,GACjBoB,UAAW,oBACTpD,EAAAA,cAAoB,KAAM,CAC5BoD,UAAW,sBACVzB,GAAQ3B,EAAAA,cAAoB,MAAO,CACpCoD,UAAW,kDACVvB,GAAc7B,EAAAA,cAAoB,OAAQ,CAC3C2B,MAAO,SAASC,EAAK4B,qBAAqBnB,EAAYmB,cACrD5B,EAAK6B,OAAO,sBAAuBxB,aAAmC,EAASA,EAAKoB,SAAWrD,EAAAA,cAAoB,MAAO,CAC3HoD,UAAW,uDACVnB,EAAKyB,KAAIC,GAAO3D,EAAAA,cAAoB4D,EAAAA,EAAK,CAC1CC,IAAKF,EACLJ,KAAMI,EACNP,UAAW,wCACLpD,EAAAA,cAAoB,UAAW,CACrC8D,IAAK3B,EACLiB,UAAW,oBACK,IAAflB,GAAwBI,EAAW,KAAOtC,EAAAA,cAAoB,aAAc,CAC7EoD,UAAW,gCACV,OAA4BpD,EAAAA,cAAoB,SAAU,KAAM,SAAmCsC,EAAU,OAAkB,yCAAmOtC,EAAAA,cAAoB+D,EAAAA,EAAa,CACpYrE,WAAYA,GACXc,IAAW,EAGHwD,EAAOC,IAClB,IAAI,KAACzC,GAAQyC,EACb,OAAOjE,EAAAA,cAAoBkE,EAAAA,EAAK,CAC9BvC,MAAOwC,OAAO3C,EAAKC,IAAIC,YAAYC,QACnC,EAGW,SAASyC,EAAiBrF,GACvC,OAAOiB,EAAAA,cAAoBsB,EAAcvC,EAAOiB,EAAAA,cAAoBqE,EAAqBtF,GAC3F,C","sources":["webpack://homepage/./blog/posts/linux-docker-install-grpc.mdx","webpack://homepage/./src/templates/post.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    span: \"span\",\n    blockquote: \"blockquote\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components), {Link} = _components;\n  if (!Link) _missingMdxReference(\"Link\", true);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"本文适用于 C++ 版本 gRPC 的离线编译安装，但对于\", React.createElement(_components.a, {\n    href: \"#%E4%B8%8B%E8%BD%BD-gRPC\"\n  }, \"下载 gRPC\"), \" 步骤强烈建议使用 git 进行。\"), \"\\n\", React.createElement(_components.p, null, \"如果在能直接连接外网的机器上编译，可直接按照 \", React.createElement(_components.a, {\n    href: \"https://github.com/grpc/grpc\"\n  }, \"gRPC 官网文档\"), \"的指引快速执行编译操作。\"), \"\\n\", React.createElement(_components.h2, null, \"安装基本依赖\"), \"\\n\", React.createElement(_components.p, null, \"确保机器上包括这些基本依赖：\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">autoconf</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">libtool</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">pkg-config</code>\"\n    }\n  }), \" 与 C++ 编译环境。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token comment\\\"># 检查是否有 autoconf</span>\\n<span class=\\\"token function\\\">which</span> autoconf\\n\\n<span class=\\\"token comment\\\"># 如果没有，则安装</span>\\n<span class=\\\"token comment\\\"># CentOS</span>\\nyum <span class=\\\"token function\\\">install</span> autoconf\\n<span class=\\\"token comment\\\"># Ubuntu</span>\\n<span class=\\\"token function\\\">apt-get</span> <span class=\\\"token function\\\">install</span> autoconf</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"gRPC 的编译需要 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">gcc</code>\"\n    }\n  }), \" 版本在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">4.9</code>\"\n    }\n  }), \" 及以上。假如版本低于此，应当在 Docker 容器中安装较新版本的 GCC 再执行编译操作。\"), \"\\n\", React.createElement(_components.p, null, \"我使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">gcc 4.9.4</code>\"\n    }\n  }), \" 成功编译 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">gRPC 1.28.x</code>\"\n    }\n  }), \"，另外\", React.createElement(_components.a, {\n    href: \"https://github.com/grpc/grpc/issues/24932#issuecomment-754344093\"\n  }, \"有人测试\"), \"在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">4.9.2</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">5.3.1</code>\"\n    }\n  }), \" 以及 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">7.3.1</code>\"\n    }\n  }), \" 版本编译成功；而我使用撰写此文时使用最新版本 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">10.3.0</code>\"\n    }\n  }), \" 编译报错，请读者加以选择。\"), \"\\n\", React.createElement(_components.p, null, \"更新 GCC 的方法可以参考我的\", React.createElement(Link, {\n    to: \"/posts/linux-docker-gcc-update\"\n  }, \"这一篇博客\"), \"。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token comment\\\"># 查看 gcc 版本</span>\\ngcc <span class=\\\"token parameter variable\\\">-v</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"如果机器上没有 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">gcc</code>\"\n    }\n  }), \" 或 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">g++</code>\"\n    }\n  }), \" 等，可以安装 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Development Tools</code>\"\n    }\n  }), \" 或 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">build-essential</code>\"\n    }\n  }), \" 软件包。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token comment\\\"># CentOS</span>\\nyum groupinstall <span class=\\\"token string\\\">\\\"Development Tools\\\"</span>\\n<span class=\\\"token comment\\\"># Ubuntu</span>\\n<span class=\\\"token function\\\">apt-get</span> <span class=\\\"token function\\\">install</span> <span class=\\\"token parameter variable\\\">-y</span> build-essential</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, null, \"安装 CMake\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">make</code>\"\n    }\n  }), \" 是 gRPC 以前使用的构建命令，但是官方文档不再建议使用它。应使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">bazel</code>\"\n    }\n  }), \" 或 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">cmake</code>\"\n    }\n  }), \" 代替。此处我们选择使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">cmake</code>\"\n    }\n  }), \" 执行编译。\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"执行下述命令，如果没有找到命令则需要安装 CMake。目前编译 gRPC 需要的 CMake 最低版本为 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">3.5.1</code>\"\n    }\n  }), \"，建议使用的 CMake 版本为 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">3.13</code>\"\n    }\n  }), \" 及以上。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token comment\\\"># 查看当前 CMake 版本</span>\\ncmake <span class=\\\"token parameter variable\\\">--version</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"在 \", React.createElement(_components.a, {\n    href: \"https://cmake.org/download/\"\n  }, \"CMake 官网\"), \"下载需要版本的 CMake 源码或二进制文件。\"), \"\\n\", React.createElement(_components.p, null, \"例如下载适用于 x86_64 的 Linux 系统的二进制文件，可以选择下载 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">cmake-3.20.1-linux-x86_64.tar.gz</code>\"\n    }\n  }), \"，其中 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">3.20.1</code>\"\n    }\n  }), \" 为版本号。\"), \"\\n\", React.createElement(_components.p, null, \"解压，可以将 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">/path/to/cmake-3.20.1-linux-x86_64/bin/</code>\"\n    }\n  }), \" 目录下的二进制文件复制粘贴到 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">/usr/bin/</code>\"\n    }\n  }), \" 目录下；或是为它们创建软链接，创建软链接应使用绝对路径。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token comment\\\"># 解压</span>\\n<span class=\\\"token function\\\">tar</span> <span class=\\\"token parameter variable\\\">-zxvf</span> cmake-3.20.1-linux-x86_64.tar.gz\\n<span class=\\\"token comment\\\"># 为二进制文件创建软链接</span>\\n<span class=\\\"token function\\\">sudo</span> <span class=\\\"token function\\\">ln</span> <span class=\\\"token parameter variable\\\">-sf</span> /path/to/cmake-3.20.1-linux-x86_64/bin/* /usr/bin/\\n<span class=\\\"token comment\\\"># 再次执行，确保安装成功</span>\\ncmake <span class=\\\"token parameter variable\\\">--version</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"查看版本号时如果提示 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">CMake Error: Could not find CMAKE_ROOT !!!</code>\"\n    }\n  }), \"，可能是原本调用的 CMake 二进制文件存放在其它目录下。例如，原来的 CMake 二进制文件存放在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">/usr/local/bin/</code>\"\n    }\n  }), \" 目录下，而调用命令时系统又优先从该目录搜索命令。因此应在创建软链接时应执行：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token comment\\\"># 创建 cmake 二进制文件软链接</span>\\n<span class=\\\"token function\\\">sudo</span> <span class=\\\"token function\\\">ln</span> <span class=\\\"token parameter variable\\\">-sf</span> /path/to/cmake-3.20.1-linux-x86_64/bin/* /usr/local/bin/</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"对于其它路径，可以通过 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">find / -name \\\"cmake\\\"</code>\"\n    }\n  }), \" 来寻找。\"), \"\\n\", React.createElement(_components.h2, null, \"下载 gRPC\"), \"\\n\", React.createElement(_components.p, null, \"建议在能够直接访问外网的环境利用 git 克隆 gRPC 库并获取第三方依赖，再打包出来给其它环境编译使用。\"), \"\\n\", React.createElement(_components.p, null, \"手动下载 gRPC 及第三方依赖耗时耗力，还有可能像我一样“赔了夫人又折兵”依然编译不了。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token comment\\\"># 克隆 gRPC 仓库</span>\\n<span class=\\\"token function\\\">git</span> clone https://github.com/grpc/grpc.git\\n<span class=\\\"token builtin class-name\\\">cd</span> grpc\\n<span class=\\\"token comment\\\"># 获取 gRPC 第三方依赖</span>\\n<span class=\\\"token function\\\">git</span> submodule update <span class=\\\"token parameter variable\\\">--init</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, null, \"编译安装 gRPC\"), \"\\n\", React.createElement(_components.p, null, \"官方文档\", React.createElement(_components.a, {\n    href: \"https://grpc.io/docs/languages/cpp/quickstart/#build-and-install-grpc-protocol-buffers-and-abseil\"\n  }, \"建议\"), \"用户选择本地路径安装 gRPC，因为全局安装后想要卸载 gRPC 会十分复杂。因此，在编译安装之前，可以首先选择一个用户本地的路径。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token comment\\\"># 安装到 $HOME/.local 中</span>\\n<span class=\\\"token builtin class-name\\\">export</span> <span class=\\\"token assign-left variable\\\">MY_INSTALL_DIR</span><span class=\\\"token operator\\\">=</span><span class=\\\"token environment constant\\\">$HOME</span>/.local\\n<span class=\\\"token comment\\\"># 确保目录存在</span>\\n<span class=\\\"token function\\\">mkdir</span> <span class=\\\"token parameter variable\\\">-p</span> <span class=\\\"token variable\\\">$MY_INSTALL_DIR</span>\\n<span class=\\\"token comment\\\"># 添加该路径下的 bin 目录到环境变量</span>\\n<span class=\\\"token builtin class-name\\\">export</span> <span class=\\\"token assign-left variable\\\"><span class=\\\"token environment constant\\\">PATH</span></span><span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"<span class=\\\"token environment constant\\\">$PATH</span>:<span class=\\\"token variable\\\">$MY_INSTALL_DIR</span>/bin\\\"</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"在 gRPC 根目录下执行\", React.createElement(_components.a, {\n    href: \"https://github.com/grpc/grpc/blob/master/BUILDING.md#building-with-cmake\"\n  }, \"下述操作\"), \"：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token comment\\\"># 创建存放编译 gRPC 结果的目录</span>\\n<span class=\\\"token function\\\">mkdir</span> <span class=\\\"token parameter variable\\\">-p</span> cmake/build\\n<span class=\\\"token comment\\\"># 进入到该目录</span>\\n<span class=\\\"token function\\\">pushd</span> cmake/build\\n<span class=\\\"token comment\\\"># 生成编译 gRPC 的 Makefile 文件</span>\\n<span class=\\\"token comment\\\"># 其中 DCMAKE_INSTALL_PREFIX 指定了 gRPC 的安装路径</span>\\ncmake <span class=\\\"token parameter variable\\\">-DgRPC_INSTALL</span><span class=\\\"token operator\\\">=</span>ON <span class=\\\"token punctuation\\\">\\\\</span>\\n    <span class=\\\"token parameter variable\\\">-DgRPC_BUILD_TESTS</span><span class=\\\"token operator\\\">=</span>OFF <span class=\\\"token punctuation\\\">\\\\</span>\\n    <span class=\\\"token parameter variable\\\">-DCMAKE_INSTALL_PREFIX</span><span class=\\\"token operator\\\">=</span><span class=\\\"token variable\\\">$MY_INSTALL_DIR</span> <span class=\\\"token punctuation\\\">\\\\</span>\\n    <span class=\\\"token punctuation\\\">..</span>/<span class=\\\"token punctuation\\\">..</span>\\n<span class=\\\"token comment\\\"># 执行编译</span>\\n<span class=\\\"token comment\\\"># ${JOBS_NUM} 为同时执行的线程数，应替换为数字，下同</span>\\n<span class=\\\"token function\\\">make</span> <span class=\\\"token parameter variable\\\">-j</span> <span class=\\\"token variable\\\">${JOBS_NUM}</span>\\n<span class=\\\"token comment\\\"># 安装 gRPC</span>\\n<span class=\\\"token function\\\">make</span> <span class=\\\"token function\\\">install</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"如果想要编译动态库 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">.so</code>\"\n    }\n  }), \" 文件，可以在上一步执行 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">cmake</code>\"\n    }\n  }), \" 命令时设置 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">-DBUILD_SHARED_LIBS=ON</code>\"\n    }\n  }), \"，如：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token comment\\\"># 生成编译 gRPC 的 Makefile 文件</span>\\ncmake <span class=\\\"token parameter variable\\\">-DBUILD_SHARED_LIBS</span><span class=\\\"token operator\\\">=</span>ON <span class=\\\"token punctuation\\\">..</span>/<span class=\\\"token punctuation\\\">..</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"假如编译失败，可以参考笔者遇到的\", React.createElement(_components.a, {\n    href: \"#%E5%8F%AF%E8%83%BD%E9%81%87%E8%A7%81%E7%9A%84%E9%94%99%E8%AF%AF\"\n  }, \"错误和解决方案\"), \"。\"), \"\\n\", React.createElement(_components.p, null, \"C++ 版本的 gRPC 还依赖于 Abseil C++ 库，因此需要单独编译安装它：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token comment\\\"># 回到 gRPC 根目录</span>\\n<span class=\\\"token function\\\">popd</span>\\n<span class=\\\"token comment\\\"># 创建存放 Abseil C++ 编译结果的目录</span>\\n<span class=\\\"token function\\\">mkdir</span> <span class=\\\"token parameter variable\\\">-p</span> third_party/abseil-cpp/cmake/build\\n<span class=\\\"token comment\\\"># 进入到编译目录</span>\\n<span class=\\\"token function\\\">pushd</span> third_party/abseil-cpp/cmake/build\\n<span class=\\\"token comment\\\"># 生成编译 abseil-cpp 的 Makefile 文件</span>\\ncmake <span class=\\\"token parameter variable\\\">-DCMAKE_INSTALL_PREFIX</span><span class=\\\"token operator\\\">=</span><span class=\\\"token variable\\\">$MY_INSTALL_DIR</span> <span class=\\\"token punctuation\\\">\\\\</span>\\n    <span class=\\\"token parameter variable\\\">-DCMAKE_POSITION_INDEPENDENT_CODE</span><span class=\\\"token operator\\\">=</span>TRUE <span class=\\\"token punctuation\\\">\\\\</span>\\n    <span class=\\\"token punctuation\\\">..</span>/<span class=\\\"token punctuation\\\">..</span>\\n<span class=\\\"token comment\\\"># 执行编译</span>\\n<span class=\\\"token function\\\">make</span> <span class=\\\"token parameter variable\\\">-j</span> <span class=\\\"token variable\\\">${JOBS_NUM}</span>\\n<span class=\\\"token comment\\\"># 安装 Abseil C++</span>\\n<span class=\\\"token function\\\">make</span> <span class=\\\"token function\\\">install</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"哈！大功告成。最后我们来测试一下 gRPC 是否安装成功。\"), \"\\n\", React.createElement(_components.h2, null, \"测试编译安装 gRPC 成功\"), \"\\n\", React.createElement(_components.p, null, \"首先编译 gRPC 提供的示例：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token comment\\\"># 回到 gRPC 根目录</span>\\n<span class=\\\"token function\\\">popd</span>\\n<span class=\\\"token comment\\\"># 进入 example 目录</span>\\n<span class=\\\"token builtin class-name\\\">cd</span> examples/cpp/helloworld\\n<span class=\\\"token comment\\\"># 创建存放 example 编译结果的目录</span>\\n<span class=\\\"token function\\\">mkdir</span> <span class=\\\"token parameter variable\\\">-p</span> cmake/build\\n<span class=\\\"token comment\\\"># 进入到编译目录</span>\\n<span class=\\\"token function\\\">pushd</span> cmake/build\\n<span class=\\\"token comment\\\"># 生成编译 example 的 Makefile 文件</span>\\n<span class=\\\"token comment\\\"># 其中 DCMAKE_PREFIX_PATH 指定我们使用的 gRPC 路径，即 gRPC 的安装路径</span>\\ncmake <span class=\\\"token parameter variable\\\">-DCMAKE_PREFIX_PATH</span><span class=\\\"token operator\\\">=</span><span class=\\\"token variable\\\">$MY_INSTALL_DIR</span> <span class=\\\"token punctuation\\\">..</span>/<span class=\\\"token punctuation\\\">..</span>\\n<span class=\\\"token comment\\\"># 执行编译</span>\\n<span class=\\\"token function\\\">make</span> <span class=\\\"token parameter variable\\\">-j</span> <span class=\\\"token variable\\\">${JOBS_NUM}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"这样，在当前目录就会生成编译好的二进制文件。试试看吧！\"), \"\\n\", React.createElement(_components.p, null, \"在当前终端启用 gRPC 示例的服务端，它会默认监听当前主机的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">50051</code>\"\n    }\n  }), \" 端口：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">./greeter_server\\n\\n<span class=\\\"token comment\\\"># 显示内容如下</span>\\nServer listening on <span class=\\\"token number\\\">0.0</span>.0.0:50051</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"打开一个新终端，进入到此目录，运行客户端，就可以看到访问的结果啦：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">./greeter_client\\n\\n<span class=\\\"token comment\\\"># 显示内容如下</span>\\nGreeter received: Hello world</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"假如退出了服务端，再运行客户端，则会打印：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token comment\\\"># 关闭服务端，然后执行</span>\\n./greeter_client\\n\\n<span class=\\\"token comment\\\"># 显示内容如下</span>\\n<span class=\\\"token number\\\">14</span>: failed to connect to all addresses\\nGreeter received: RPC failed</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"开始愉快地编写 gRPC 程序吧！\"), \"\\n\", React.createElement(_components.h2, null, \"可能遇见的错误\"), \"\\n\", React.createElement(_components.h3, null, \"编译 gRPC 执行 make 后提示 error\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">error: no matching <span class=\\\"token keyword\\\">function</span> <span class=\\\"token keyword\\\">for</span> call to ‘StrFormat<span class=\\\"token punctuation\\\">(</span>const char <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">22</span><span class=\\\"token punctuation\\\">]</span>, const char*, char <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">64</span><span class=\\\"token punctuation\\\">]</span>, int32_t<span class=\\\"token operator\\\">&amp;</span>, long int<span class=\\\"token operator\\\">&amp;</span>, const char*<span class=\\\"token operator\\\">&amp;</span>, int<span class=\\\"token operator\\\">&amp;</span><span class=\\\"token punctuation\\\">)</span>’</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"提示报错没有找到 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">StrFormat</code>\"\n    }\n  }), \" 函数，请确保 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">gcc</code>\"\n    }\n  }), \" 版本在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">4.9</code>\"\n    }\n  }), \" 及以上，可以执行 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">gcc -v</code>\"\n    }\n  }), \" 命令查看当前版本。\"), \"\\n\", React.createElement(_components.p, null, \"建议\", React.createElement(_components.a, {\n    href: \"http://3ms.huawei.com/km/blogs/details/10193429\"\n  }, \"更新\"), \"到 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">gcc 4.9.4</code>\"\n    }\n  }), \" 版本，笔者在该版本下顺利编译 gRPC。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/homepage/homepage/blog/posts/linux-docker-install-grpc.mdx\";\nimport {Fancybox} from \"@fancyapps/ui\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport dayjs from \"dayjs\";\nimport {Link} from \"gatsby\";\nimport * as React from \"react\";\nimport Card from \"../components/card\";\nimport Category from \"../components/category\";\nimport SEO from \"../components/seo\";\nimport Tag from \"../components/tag\";\nconst FancyBoxImage = props => {\n  const {alt = \"The author is too lazy to give an alt\", src, ...restProps} = props;\n  return React.createElement(\"a\", {\n    href: src,\n    \"data-fancybox\": \"gallery\",\n    \"data-caption\": alt\n  }, React.createElement(\"img\", Object.assign({\n    src: src,\n    alt: alt\n  }, restProps)));\n};\nconst ALink = _ref => {\n  let {href = \"\", children} = _ref;\n  const isExternalHref = !(href !== null && href !== void 0 && href.startsWith(\"#\"));\n  const parsedHref = isExternalHref ? href : `#${encodeURIComponent(href.slice(1))}`;\n  return React.createElement(\"a\", {\n    href: parsedHref,\n    target: isExternalHref ? \"_blank\" : undefined,\n    rel: \"noreferrer\"\n  }, children);\n};\nconst components = {\n  a: ALink,\n  img: FancyBoxImage,\n  Card,\n  Link\n};\nconst PostTemplate = _ref2 => {\n  let {children, data} = _ref2;\n  const {mdx: {frontmatter: {title, date: dateString, updated: updatedDateString, categories, tags, timeliness}}} = data;\n  const articleRef = React.useRef(null);\n  const date = dayjs(dateString);\n  const updatedDate = updatedDateString ? dayjs(updatedDateString) : date;\n  const today = dayjs();\n  const diffDays = today.diff(updatedDate, \"days\");\n  React.useEffect(() => {\n    var _articleRef$current;\n    const optimizedImageLinks = (_articleRef$current = articleRef.current) === null || _articleRef$current === void 0 ? void 0 : _articleRef$current.querySelectorAll(\"a.gatsby-resp-image-link\");\n    optimizedImageLinks === null || optimizedImageLinks === void 0 ? void 0 : optimizedImageLinks.forEach(link => {\n      const image = link.children.item(1);\n      link.setAttribute(\"data-fancybox\", \"gallery\");\n      link.setAttribute(\"data-caption\", image.alt);\n    });\n    Fancybox.bind(\"[data-fancybox]\");\n    return () => Fancybox.unbind(\"[data-fancybox]\");\n  }, []);\n  return React.createElement(\"div\", {\n    className: \"mx-auto flex max-w-xl flex-col gap-y-12\"\n  }, React.createElement(\"div\", {\n    className: \"flex flex-col gap-4\"\n  }, (categories === null || categories === void 0 ? void 0 : categories.length) && React.createElement(Category, {\n    name: categories[0],\n    className: \"item-selectable\"\n  }), React.createElement(\"h1\", {\n    className: \"text-3xl font-bold\"\n  }, title), React.createElement(\"div\", {\n    className: \"item-secondary flex flex-col gap-2 lg:flex-row\"\n  }, dateString && React.createElement(\"span\", {\n    title: `首次发布于：${date.toString()}\\n最后更新于：${updatedDate.toString()}`\n  }, date.format(\"MM 月 DD 日 YYYY 年\")), (tags === null || tags === void 0 ? void 0 : tags.length) && React.createElement(\"div\", {\n    className: \"flex flex-1 flex-wrap gap-2 lg:before:content-['\\u2022']\"\n  }, tags.map(tag => React.createElement(Tag, {\n    key: tag,\n    name: tag,\n    className: \"item-secondary item-selectable\"\n  }))))), React.createElement(\"article\", {\n    ref: articleRef,\n    className: \"heti post-entry\"\n  }, timeliness !== false && diffDays > 365 && React.createElement(\"blockquote\", {\n    className: \"border-l-4 border-orange-400\"\n  }, \"\\u8FD9\\u662F\\u4E00\\u7BC7\", React.createElement(\"strong\", null, \"\\u6700\\u540E\\u66F4\\u65B0\\u4E8E \", diffDays, \" \\u5929\\u524D\"), \"\\u7684\\u535A\\u5BA2\\uFF0C\\u5185\\u5BB9\\u53EF\\u80FD\\u968F\\u7740\\u65F6\\u95F4\\u7684\\u63A8\\u79FB\\u800C\\u53D8\\u5F97\\u4E0D\\u518D\\u9002\\u7528\\uFF0C\\u5EFA\\u8BAE\\u60A8\\u4ED4\\u7EC6\\u8BC4\\u4F30\\u4FE1\\u606F\\u7684\\u6709\\u6548\\u6027\\u3002\"), React.createElement(MDXProvider, {\n    components: components\n  }, children)));\n};\nconst query = \"2697480803\";\nexport const Head = _ref3 => {\n  let {data} = _ref3;\n  return React.createElement(SEO, {\n    title: String(data.mdx.frontmatter.title)\n  });\n};\nPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","a","h2","span","blockquote","h3","_provideComponents","components","Link","id","component","Error","_missingMdxReference","React","href","dangerouslySetInnerHTML","__html","to","wrapper","MDXLayout","_ref","children","isExternalHref","startsWith","parsedHref","encodeURIComponent","slice","target","undefined","rel","img","alt","src","restProps","Card","PostTemplate","_ref2","data","mdx","frontmatter","title","date","dateString","updated","updatedDateString","categories","tags","timeliness","articleRef","dayjs","updatedDate","diffDays","diff","_articleRef$current","optimizedImageLinks","current","querySelectorAll","forEach","link","image","item","setAttribute","Fancybox","bind","unbind","className","length","Category","name","toString","format","map","tag","Tag","key","ref","MDXProvider","Head","_ref3","SEO","String","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}