{"version":3,"file":"component---src-templates-post-tsx-content-file-path-blog-posts-electron-real-time-print-execution-log-mdx-81a7dad5e96ea3c80550.js","mappings":"yMAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,IACHC,OAAQ,SACRC,GAAI,KACJC,GAAI,KACJC,GAAI,KACJC,EAAG,IACHC,GAAI,KACJC,KAAM,OACNC,IAAK,QACJC,EAAAA,EAAAA,KAAsBb,EAAMc,YAC/B,OAAOC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,+LAAgM,KAAMW,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,2BAA4BW,EAAAA,cAAoBd,EAAYI,OAAQ,KAAM,oBAAqB,0BAA2B,KAAMU,EAAAA,cAAoBd,EAAYK,GAAI,KAAM,QAAS,KAAMS,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,kKAAmK,KAAMW,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,gCAAiC,KAAMW,EAAAA,cAAoBd,EAAYM,GAAI,KAAM,KAAMQ,EAAAA,cAAoBd,EAAYO,GAAI,KAAM,6BAA8B,KAAMO,EAAAA,cAAoBd,EAAYO,GAAI,KAAM,8BAA+B,KAAMO,EAAAA,cAAoBd,EAAYO,GAAI,KAAM,wBAAyB,KAAMO,EAAAA,cAAoBd,EAAYO,GAAI,KAAM,sBAAuB,MAAO,KAAMO,EAAAA,cAAoBd,EAAYK,GAAI,KAAM,QAAS,KAAMS,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,YAAaW,EAAAA,cAAoBd,EAAYQ,EAAG,CACxxCO,KAAM,0DACL,0CAA2C,oBAAqB,KAAMD,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,6CAA8CW,EAAAA,cAAoBd,EAAYQ,EAAG,CACjMO,KAAM,+FACL,QAAS,WAAY,KAAMD,EAAAA,cAAoBd,EAAYS,GAAI,KAAM,gBAAiB,KAAMK,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,eAAgBW,EAAAA,cAAoBd,EAAYI,OAAQ,KAAM,gBAAiB,iBAAkB,KAAMU,EAAAA,cAAoBd,EAAYM,GAAI,KAAM,KAAMQ,EAAAA,cAAoBd,EAAYO,GAAI,KAAM,KAAMO,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,SAAUW,EAAAA,cAAoBd,EAAYU,KAAM,CACtaM,wBAAyB,CACvBC,OAAQ,qDAER,UAAW,KAAMH,EAAAA,cAAoBd,EAAYU,KAAM,CACzDM,wBAAyB,CACvBC,OAAQ,66CAER,MAAO,KAAMH,EAAAA,cAAoBd,EAAYO,GAAI,KAAM,KAAMO,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,cAAeW,EAAAA,cAAoBd,EAAYU,KAAM,CAC7JM,wBAAyB,CACvBC,OAAQ,2DAER,QAAS,KAAMH,EAAAA,cAAoBd,EAAYU,KAAM,CACvDM,wBAAyB,CACvBC,OAAQ,u7EAER,KAAMH,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,+BAAgCW,EAAAA,cAAoBd,EAAYU,KAAM,CACvHM,wBAAyB,CACvBC,OAAQ,4CAER,QAASH,EAAAA,cAAoBd,EAAYU,KAAM,CACjDM,wBAAyB,CACvBC,OAAQ,+CAER,QAAS,KAAMH,EAAAA,cAAoBd,EAAYU,KAAM,CACvDM,wBAAyB,CACvBC,OAAQ,s8BAER,MAAO,KAAMH,EAAAA,cAAoBd,EAAYO,GAAI,KAAM,KAAMO,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,qBAAsB,KAAMW,EAAAA,cAAoBd,EAAYU,KAAM,CAC1KM,wBAAyB,CACvBC,OAAQ,ohEAER,KAAMH,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,8BAA+B,MAAO,MAAO,KAAMW,EAAAA,cAAoBd,EAAYS,GAAI,KAAM,cAAe,KAAMK,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,wCAAyC,KAAMW,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,uBAAwBW,EAAAA,cAAoBd,EAAYU,KAAM,CAClWM,wBAAyB,CACvBC,OAAQ,sDAER,OAAQH,EAAAA,cAAoBd,EAAYU,KAAM,CAChDM,wBAAyB,CACvBC,OAAQ,6DAER,6BAA8BH,EAAAA,cAAoBd,EAAYU,KAAM,CACtEM,wBAAyB,CACvBC,OAAQ,8DAER,oCAAqC,KAAMH,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,MAAOW,EAAAA,cAAoBd,EAAYU,KAAM,CACnIM,wBAAyB,CACvBC,OAAQ,8DAER,YAAa,KAAMH,EAAAA,cAAoBd,EAAYU,KAAM,CAC3DM,wBAAyB,CACvBC,OAAQ,usIAER,KAAMH,EAAAA,cAAoBd,EAAYS,GAAI,KAAM,mBAAoB,KAAMK,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,0BAA2BW,EAAAA,cAAoBd,EAAYI,OAAQ,KAAM,gBAAiB,mBAAoB,KAAMU,EAAAA,cAAoBd,EAAYM,GAAI,KAAM,KAAMQ,EAAAA,cAAoBd,EAAYO,GAAI,KAAM,KAAMO,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,SAAUW,EAAAA,cAAoBd,EAAYU,KAAM,CAClaM,wBAAyB,CACvBC,OAAQ,yEAER,UAAW,KAAMH,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,SAAUW,EAAAA,cAAoBd,EAAYU,KAAM,CAC5GM,wBAAyB,CACvBC,OAAQ,mDAER,QAAS,KAAMH,EAAAA,cAAoBd,EAAYU,KAAM,CACvDM,wBAAyB,CACvBC,OAAQ,k9NAER,KAAMH,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,+BAAgCW,EAAAA,cAAoBd,EAAYU,KAAM,CACvHM,wBAAyB,CACvBC,OAAQ,8CAER,uCAAwCH,EAAAA,cAAoBd,EAAYU,KAAM,CAChFM,wBAAyB,CACvBC,OAAQ,mDAER,uBAAwB,MAAO,KAAMH,EAAAA,cAAoBd,EAAYO,GAAI,KAAM,KAAMO,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,cAAeW,EAAAA,cAAoBd,EAAYU,KAAM,CACrLM,wBAAyB,CACvBC,OAAQ,yDAER,QAAS,KAAMH,EAAAA,cAAoBd,EAAYU,KAAM,CACvDM,wBAAyB,CACvBC,OAAQ,yuGAER,KAAMH,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,sBAAuBW,EAAAA,cAAoBd,EAAYU,KAAM,CAC9GM,wBAAyB,CACvBC,OAAQ,0DAER,QAAS,MAAO,KAAMH,EAAAA,cAAoBd,EAAYO,GAAI,KAAM,KAAMO,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,qBAAsB,KAAMW,EAAAA,cAAoBd,EAAYU,KAAM,CACnLM,wBAAyB,CACvBC,OAAQ,kwTAER,KAAMH,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,wBAAyBW,EAAAA,cAAoBd,EAAYU,KAAM,CAChHM,wBAAyB,CACvBC,OAAQ,+CAER,qBAAsBH,EAAAA,cAAoBd,EAAYU,KAAM,CAC9DM,wBAAyB,CACvBC,OAAQ,+CAER,uBAAwBH,EAAAA,cAAoBd,EAAYU,KAAM,CAChEM,wBAAyB,CACvBC,OAAQ,+CAER,SAAU,KAAMH,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,aAAcW,EAAAA,cAAoBd,EAAYU,KAAM,CAC/GM,wBAAyB,CACvBC,OAAQ,+CAER,gCAAiCH,EAAAA,cAAoBd,EAAYU,KAAM,CACzEM,wBAAyB,CACvBC,OAAQ,sGAER,KAAM,MAAO,MAAO,KAAMH,EAAAA,cAAoBd,EAAYS,GAAI,KAAM,iBAAkB,KAAMK,EAAAA,cAAoBd,EAAYG,EAAG,KAAM,+BAAgC,KAAMW,EAAAA,cAAoBd,EAAYW,IAAK,CAClNO,IAAK,uEACLC,IAAK,aAET,CAKA,MAJA,SAAoBpB,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOqB,QAASC,GAAapB,OAAOC,OAAO,CAAC,GAAGU,EAAAA,EAAAA,KAAsBb,EAAMc,YAC3E,OAAOQ,EAAYP,EAAAA,cAAoBO,EAAWtB,EAAOe,EAAAA,cAAoBhB,EAAmBC,IAAUD,EAAkBC,EAC9H,E,8EC7HA,MAqBMc,EAAa,CACjBL,EAXYc,IACZ,IAAI,KAACP,EAAO,GAAE,SAAEQ,GAAYD,EAC5B,MAAME,IAAmBT,SAAoCA,EAAKU,WAAW,MACvEC,EAAaF,EAAiBT,EAAO,IAAIY,mBAAmBZ,EAAKa,MAAM,MAC7E,OAAOd,EAAAA,cAAoB,IAAK,CAC9BC,KAAMW,EACNG,OAAQL,EAAiB,cAAWM,EACpCC,IAAK,cACJR,EAAS,EAIZZ,IAvBoBZ,IACpB,MAAM,IAACoB,EAAM,wCAAuC,IAAED,KAAQc,GAAajC,EAC3E,OAAOe,EAAAA,cAAoB,IAAK,CAC9BC,KAAMG,EACN,gBAAiB,UACjB,eAAgBC,GACfL,EAAAA,cAAoB,MAAOb,OAAOC,OAAO,CAC1CgB,IAAKA,EACLC,IAAKA,GACJa,IAAY,EAefC,KAAI,IACJC,KAAIA,EAAAA,MAEAC,EAAeC,IACnB,IAAI,SAACb,EAAQ,KAAEc,GAAQD,EACvB,MAAOE,KAAMC,aAAa,MAACC,EAAOC,KAAMC,EAAYC,QAASC,EAAiB,WAAEC,EAAU,KAAEC,EAAI,WAAEC,KAAgBV,EAC5GW,EAAalC,EAAAA,OAAa,MAC1B2B,EAAOQ,IAAMP,GACbQ,EAAcN,EAAoBK,IAAML,GAAqBH,EAE7DU,EADQF,MACSG,KAAKF,EAAa,QAYzC,OAXApC,EAAAA,WAAgB,KACd,IAAIuC,EACJ,MAAMC,EAAqE,QAA9CD,EAAsBL,EAAWO,eAA6C,IAAxBF,OAAiC,EAASA,EAAoBG,iBAAiB,4BAOlK,OANAF,SAA0EA,EAAoBG,SAAQC,IACpG,MAAMC,EAAQD,EAAKnC,SAASqC,KAAK,GACjCF,EAAKG,aAAa,gBAAiB,WACnCH,EAAKG,aAAa,eAAgBF,EAAMxC,IAAI,IAE9C2C,EAAAA,GAASC,KAAK,mBACP,IAAMD,EAAAA,GAASE,OAAO,kBAAkB,GAC9C,IACIlD,EAAAA,cAAoB,MAAO,CAChCmD,UAAW,2CACVnD,EAAAA,cAAoB,MAAO,CAC5BmD,UAAW,wBACTpB,aAA+C,EAASA,EAAWqB,SAAWpD,EAAAA,cAAoBqD,EAAAA,EAAU,CAC9GC,KAAMvB,EAAW,GACjBoB,UAAW,oBACTnD,EAAAA,cAAoB,KAAM,CAC5BmD,UAAW,sBACVzB,GAAQ1B,EAAAA,cAAoB,MAAO,CACpCmD,UAAW,kDACVvB,GAAc5B,EAAAA,cAAoB,OAAQ,CAC3C0B,MAAO,SAASC,EAAK4B,qBAAqBnB,EAAYmB,cACrD5B,EAAK6B,OAAO,sBAAuBxB,aAAmC,EAASA,EAAKoB,SAAWpD,EAAAA,cAAoB,MAAO,CAC3HmD,UAAW,uDACVnB,EAAKyB,KAAIC,GAAO1D,EAAAA,cAAoB2D,EAAAA,EAAK,CAC1CC,IAAKF,EACLJ,KAAMI,EACNP,UAAW,wCACLnD,EAAAA,cAAoB,UAAW,CACrC6D,IAAK3B,EACLiB,UAAW,oBACK,IAAflB,GAAwBI,EAAW,KAAOrC,EAAAA,cAAoB,aAAc,CAC7EmD,UAAW,gCACV,OAA4BnD,EAAAA,cAAoB,SAAU,KAAM,SAAmCqC,EAAU,OAAkB,yCAAmOrC,EAAAA,cAAoB8D,EAAAA,EAAa,CACpY/D,WAAYA,GACXU,IAAW,EAGHsD,EAAOC,IAClB,IAAI,KAACzC,GAAQyC,EACb,OAAOhE,EAAAA,cAAoBiE,EAAAA,EAAK,CAC9BvC,MAAOwC,OAAO3C,EAAKC,IAAIC,YAAYC,QACnC,EAGW,SAASyC,EAAiBlF,GACvC,OAAOe,EAAAA,cAAoBqB,EAAcpC,EAAOe,EAAAA,cAAoBoE,EAAqBnF,GAC3F,C","sources":["webpack://homepage/./blog/posts/electron-real-time-print-execution-log.mdx","webpack://homepage/./src/templates/post.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    h2: \"h2\",\n    ol: \"ol\",\n    li: \"li\",\n    a: \"a\",\n    h3: \"h3\",\n    span: \"span\",\n    img: \"img\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"开发图像查重工具时遇到了这样一个问题：在查重之前，用户需要先对图像文件进行索引操作，后台将调用可执行文件并为每张图像生成特征值。索引操作所需的时间与图像的数量及大小呈正相关，笔者为大约 50000 张图片（约 170GB）生成特征值，需要花费将近 90 分钟的时间。在这种情况下，如果渲染器什么也不展示，卡在那里，用户难免会非常焦虑 —— 后台是否还在运行，我是不是卡死了？\"), \"\\n\", React.createElement(_components.p, null, \"那么需求也就明了了，正如本文的标题所述，我们需要\", React.createElement(_components.strong, null, \"将后台运行的日志实时推送到渲染器\"), \"，这样用户便能看到索引操作的进度，安下心来。\"), \"\\n\", React.createElement(_components.h2, null, \"技术背景\"), \"\\n\", React.createElement(_components.p, null, \"众所周知，一个 Electron 应用分为了 Renderer 渲染器和 Main 主进程两端。渲染器负责对客侧的展示，正如我们访问的所有网页一样，是 HTML、CSS、JavaScript 的集合，无法调用 Node 或是访问宿主机文件等。而主进程则具备有服务端应用的性质，能够调用 Node 或是与宿主机交互等。\"), \"\\n\", React.createElement(_components.p, null, \"综上所述，为了实现我们的目标，在背后依次要实现这些事情：\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"渲染器接收用户索引操作的请求，将请求发送至主进程。\"), \"\\n\", React.createElement(_components.li, null, \"主进程接收到请求，调用可执行文件开始生成图像特征值。\"), \"\\n\", React.createElement(_components.li, null, \"主进程将产生的日志信息实时推送给渲染器。\"), \"\\n\", React.createElement(_components.li, null, \"渲染器接收到日志信息，并向用户展示。\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"需求实现\"), \"\\n\", React.createElement(_components.p, null, \"根据刚才的分析，对\", React.createElement(_components.a, {\n    href: \"https://www.electronjs.org/zh/docs/latest/tutorial/ipc\"\n  }, \"进程间通信（Inter-Process Communication，IPC）\"), \"能力的使用将会是实现需求的关键。\"), \"\\n\", React.createElement(_components.p, null, \"实现的具体方案遵循 Electron 推荐的安全设置即上下文隔离。下面的内容假设您对\", React.createElement(_components.a, {\n    href: \"https://www.electronjs.org/zh/docs/latest/tutorial/process-model#preload-%E8%84%9A%E6%9C%AC\"\n  }, \"预加载器\"), \"有一定的了解。\"), \"\\n\", React.createElement(_components.h3, null, \"渲染器将请求发送至主进程\"), \"\\n\", React.createElement(_components.p, null, \"渲染器发送请求至主进程是\", React.createElement(_components.strong, null, \"渲染器到主进程的单向通信\"), \"，具体的实现分成三个步骤：\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"主进程通过 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ipcMain.on()</code>\"\n    }\n  }), \" 监听请求。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"ts\\\"><pre class=\\\"language-ts\\\"><code class=\\\"language-ts\\\"><span class=\\\"token comment\\\">// main/background.ts</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> ipcMain <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"electron\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">enum</span> Events <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token constant\\\">UPDATE_INDEX</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"events:updateIndex\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nipcMain<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span>Events<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">UPDATE_INDEX</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>_<span class=\\\"token punctuation\\\">,</span> args<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// todo: execute binary</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"预加载器向渲染器暴露 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ipcRenderer.send()</code>\"\n    }\n  }), \" 方法。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"ts\\\"><pre class=\\\"language-ts\\\"><code class=\\\"language-ts\\\"><span class=\\\"token comment\\\">// main/preload.ts</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> ipcRenderer<span class=\\\"token punctuation\\\">,</span> contextBridge <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"electron\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> ipc <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function-variable function\\\">send</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">(</span>channel<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>args<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">unknown</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    ipcRenderer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">send</span><span class=\\\"token punctuation\\\">(</span>channel<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>args<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token comment\\\">// 由于 Electron 的安全机制，您不能直接暴露 `ipcRenderer` 以及上面的方法</span>\\n  <span class=\\\"token comment\\\">// 错误的例子：</span>\\n  <span class=\\\"token comment\\\">// send: ipcRenderer.send,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\ncontextBridge<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">exposeInMainWorld</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"ipc\\\"</span><span class=\\\"token punctuation\\\">,</span> ipc<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\"><span class=\\\"token constant\\\">IPC</span></span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">typeof</span> ipc<span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"让 TypeScript 更好地为您工作，别忘了将类型 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">IPC</code>\"\n    }\n  }), \" 暴露给 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Window</code>\"\n    }\n  }), \" 对象：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"ts\\\"><pre class=\\\"language-ts\\\"><code class=\\\"language-ts\\\"><span class=\\\"token comment\\\">// renderer/preload.d.ts</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token keyword\\\">type</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token constant\\\">IPC</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"path/to/main/preload\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">declare</span> global <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">interface</span> <span class=\\\"token class-name\\\">Window</span> <span class=\\\"token punctuation\\\">{</span>\\n    ipc<span class=\\\"token operator\\\">:</span> <span class=\\\"token constant\\\">IPC</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"渲染器实现调用预加载器暴露的方法。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"tsx\\\"><pre class=\\\"language-tsx\\\"><code class=\\\"language-tsx\\\"><span class=\\\"token comment\\\">// renderer/path/to/component-trigger.tsx</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> Events <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"path/to/main/background\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">onUpdateIndex</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    window<span class=\\\"token punctuation\\\">.</span>ipc<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">send</span><span class=\\\"token punctuation\\\">(</span>Events<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">UPDATE_INDEX</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/* component details */</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"再在合适的地方编写触发逻辑，即可将请求发送至主进程。\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"主进程调用可执行文件\"), \"\\n\", React.createElement(_components.p, null, \"接着，让我们来完善主进程的逻辑：在接收到请求后，去调用本地的可执行文件。\"), \"\\n\", React.createElement(_components.p, null, \"在 Node 环境中，我们可以找老朋友 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">child_process</code>\"\n    }\n  }), \" 帮忙。\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">child_process.exec()</code>\"\n    }\n  }), \" 会等待执行结束后将结果一并返回，不满足我们的需要；\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">child_process.spawn()</code>\"\n    }\n  }), \" 采用事件监听机制，可以应对实时输出日志的情景，满足我们的需要。\"), \"\\n\", React.createElement(_components.p, null, \"基于 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">child_process.spawn()</code>\"\n    }\n  }), \" 编写代码如下：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"ts\\\"><pre class=\\\"language-ts\\\"><code class=\\\"language-ts\\\"><span class=\\\"token comment\\\">// main/background.ts</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> spawn <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"child_process\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">runSpawn</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>cmd<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">,</span> args<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> process <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">spawn</span><span class=\\\"token punctuation\\\">(</span>cmd<span class=\\\"token punctuation\\\">,</span> args<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  process<span class=\\\"token punctuation\\\">.</span>stdout<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"data\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// todo: on receive stdout data</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  process<span class=\\\"token punctuation\\\">.</span>stderr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"data\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// todo: on receive stderr data</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  process<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"close\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>code<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// todo: on receive close signal</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\nipcMain<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span>Events<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">UPDATE_INDEX</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>_<span class=\\\"token punctuation\\\">,</span> args<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">runSpawn</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"path/to/binary\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"--update-index\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"--rest-args\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h3, null, \"主进程实时推送日志信息给渲染器\"), \"\\n\", React.createElement(_components.p, null, \"当事件监听器触发时，向渲染器发送日志信息，这是\", React.createElement(_components.strong, null, \"主进程到渲染器的单向通信\"), \"，具体的实现同样分成三个步骤：\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"主进程通过 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">browserWindow.webContents.send()</code>\"\n    }\n  }), \" 发送信息。\"), \"\\n\", React.createElement(_components.p, null, \"完善前面的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">runSpawn()</code>\"\n    }\n  }), \" 方法：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"ts\\\"><pre class=\\\"language-ts\\\"><code class=\\\"language-ts\\\"><span class=\\\"token comment\\\">// main/background.ts</span>\\n<span class=\\\"token keyword\\\">import</span> iconv <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"iconv-lite\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">enum</span> SpawnEvents <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token constant\\\">SPAWN_STARTED</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"spawn:started\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token constant\\\">SPAWN_STDOUT</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"spawn:stdout\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token constant\\\">SPAWN_STDERR</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"spawn:stderr\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token constant\\\">SPAWN_FINISHED</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"spawn:finished\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// Compatible with default command line encoding `cp936` on Windows platform</span>\\n<span class=\\\"token keyword\\\">const</span> iconvDecoding <span class=\\\"token operator\\\">=</span> process<span class=\\\"token punctuation\\\">.</span>platform <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">\\\"win32\\\"</span> <span class=\\\"token operator\\\">?</span> <span class=\\\"token string\\\">\\\"cp936\\\"</span> <span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"utf-8\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">runSpawn</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>cmd<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">,</span> args<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> process <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">spawn</span><span class=\\\"token punctuation\\\">(</span>cmd<span class=\\\"token punctuation\\\">,</span> args<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  browserWindow<span class=\\\"token punctuation\\\">.</span>webContents<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">send</span><span class=\\\"token punctuation\\\">(</span>SpawnEvents<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">SPAWN_STARTED</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  process<span class=\\\"token punctuation\\\">.</span>stdout<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"data\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    browserWindow<span class=\\\"token punctuation\\\">.</span>webContents<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">send</span><span class=\\\"token punctuation\\\">(</span>\\n      SpawnEvents<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">SPAWN_STDOUT</span><span class=\\\"token punctuation\\\">,</span>\\n      iconv<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">decode</span><span class=\\\"token punctuation\\\">(</span>Buffer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">from</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"binary\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> iconvDecoding<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  process<span class=\\\"token punctuation\\\">.</span>stderr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"data\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    browserWindow<span class=\\\"token punctuation\\\">.</span>webContents<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">send</span><span class=\\\"token punctuation\\\">(</span>\\n      SpawnEvents<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">SPAWN_STDERR</span><span class=\\\"token punctuation\\\">,</span>\\n      iconv<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">decode</span><span class=\\\"token punctuation\\\">(</span>Buffer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">from</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"binary\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> iconvDecoding<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  process<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"close\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">(</span>code<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    browserWindow<span class=\\\"token punctuation\\\">.</span>webContents<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">send</span><span class=\\\"token punctuation\\\">(</span>SpawnEvents<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">SPAWN_FINISHED</span><span class=\\\"token punctuation\\\">,</span> code <span class=\\\"token operator\\\">??</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"特别的，在 Windows 端，由于命令行工具默认采用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">cp936</code>\"\n    }\n  }), \" 编码，在输出中文时会出现乱码的现象。因此，在上面的实现中，笔者使用了 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">iconv-lite</code>\"\n    }\n  }), \" 对标准输出、标准错误进行了重新解码。\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"预加载器向渲染器暴露 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ipcRenderer.on()</code>\"\n    }\n  }), \" 方法。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"ts\\\"><pre class=\\\"language-ts\\\"><code class=\\\"language-ts\\\"><span class=\\\"token comment\\\">// main/preload.ts</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">type</span> <span class=\\\"token class-name\\\">IpcRendererEvent</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"electron\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> ipc <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function-variable function\\\">on</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">(</span>channel<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token function-variable function\\\">func</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>args<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">unknown</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">void</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">subscription</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>_event<span class=\\\"token operator\\\">:</span> IpcRendererEvent<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>args<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">unknown</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n      <span class=\\\"token function\\\">func</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>args<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    ipcRenderer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span>channel<span class=\\\"token punctuation\\\">,</span> subscription<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      ipcRenderer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">removeListener</span><span class=\\\"token punctuation\\\">(</span>channel<span class=\\\"token punctuation\\\">,</span> subscription<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"其返回值是清除监听器的方法，可以配合 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">React.useEffect()</code>\"\n    }\n  }), \" 使用。\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"渲染器实现调用预加载器暴露的方法。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"tsx\\\"><pre class=\\\"language-tsx\\\"><code class=\\\"language-tsx\\\"><span class=\\\"token comment\\\">// renderer/path/to/component-listener.tsx</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> useEffect<span class=\\\"token punctuation\\\">,</span> useState <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"react\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">import</span> <span class=\\\"token punctuation\\\">{</span> SpawnEvents <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"path/to/main/background\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>loading<span class=\\\"token punctuation\\\">,</span> setLoading<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token generic-function\\\"><span class=\\\"token function\\\">useState</span><span class=\\\"token generic class-name\\\"><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token builtin\\\">boolean</span><span class=\\\"token operator\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>stdout<span class=\\\"token punctuation\\\">,</span> setStdout<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token generic-function\\\"><span class=\\\"token function\\\">useState</span><span class=\\\"token generic class-name\\\"><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token builtin\\\">string</span><span class=\\\"token operator\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">[</span>stderr<span class=\\\"token punctuation\\\">,</span> setStderr<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token generic-function\\\"><span class=\\\"token function\\\">useState</span><span class=\\\"token generic class-name\\\"><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token builtin\\\">string</span><span class=\\\"token operator\\\">></span></span></span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token function\\\">useEffect</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> cleanupSpawnStarted <span class=\\\"token operator\\\">=</span> window<span class=\\\"token punctuation\\\">.</span>ipc<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span>\\n      SpawnEvents<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">SPAWN_STARTED</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">setLoading</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> cleanupSpawnStdout <span class=\\\"token operator\\\">=</span> window<span class=\\\"token punctuation\\\">.</span>ipc<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span>\\n      SpawnEvents<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">SPAWN_STDOUT</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">setStdout</span><span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> cleanupSpawnStderr <span class=\\\"token operator\\\">=</span> window<span class=\\\"token punctuation\\\">.</span>ipc<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span>\\n      SpawnEvents<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">SPAWN_STDERR</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">(</span>data<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">string</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// setStderr(data);</span>\\n        <span class=\\\"token function\\\">setStderr</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>prev<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>data <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\"\\\\n\\\"</span> <span class=\\\"token operator\\\">+</span> prev<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">substring</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2000</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> cleanupSpawnFinished <span class=\\\"token operator\\\">=</span> window<span class=\\\"token punctuation\\\">.</span>ipc<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">on</span><span class=\\\"token punctuation\\\">(</span>\\n      SpawnEvents<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">SPAWN_FINISHED</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">(</span>code<span class=\\\"token operator\\\">:</span> <span class=\\\"token builtin\\\">number</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">setLoading</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">cleanupSpawnStarted</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token function\\\">cleanupSpawnStdout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token function\\\">cleanupSpawnStderr</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token function\\\">cleanupSpawnFinished</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/* component details */</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"一般来说，可执行文件会将日志信息重定向至 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">stderr</code>\"\n    }\n  }), \" 标准错误，运行的最终结果重定向至 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">stdout</code>\"\n    }\n  }), \" 标准输出。在本文中，我们需要展示的是 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">stderr</code>\"\n    }\n  }), \" 的内容。\"), \"\\n\", React.createElement(_components.p, null, \"如果渲染器还需要对 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">stdout</code>\"\n    }\n  }), \" 的结果进行下一步处理，同样可以在对应的组件中添加监听器：\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">window.ipc.on(SpawnEvents.SPAWN_STDOUT, (data: string) => {})</code>\"\n    }\n  }), \"。\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"渲染器展示接收到的日志信息\"), \"\\n\", React.createElement(_components.p, null, \"现在，所有的链路都已经打通，查收编写代码努力的结晶吧！\"), \"\\n\", React.createElement(_components.img, {\n    src: \"/static/real-time-execution-log+44cdc55b11bdb279f47ae8319fbf6e93.gif\",\n    alt: \"实时展示日志信息\"\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/homepage/homepage/blog/posts/electron-real-time-print-execution-log.mdx\";\nimport {Fancybox} from \"@fancyapps/ui\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport dayjs from \"dayjs\";\nimport {Link} from \"gatsby\";\nimport * as React from \"react\";\nimport Card from \"../components/card\";\nimport Category from \"../components/category\";\nimport SEO from \"../components/seo\";\nimport Tag from \"../components/tag\";\nconst FancyBoxImage = props => {\n  const {alt = \"The author is too lazy to give an alt\", src, ...restProps} = props;\n  return React.createElement(\"a\", {\n    href: src,\n    \"data-fancybox\": \"gallery\",\n    \"data-caption\": alt\n  }, React.createElement(\"img\", Object.assign({\n    src: src,\n    alt: alt\n  }, restProps)));\n};\nconst ALink = _ref => {\n  let {href = \"\", children} = _ref;\n  const isExternalHref = !(href !== null && href !== void 0 && href.startsWith(\"#\"));\n  const parsedHref = isExternalHref ? href : `#${encodeURIComponent(href.slice(1))}`;\n  return React.createElement(\"a\", {\n    href: parsedHref,\n    target: isExternalHref ? \"_blank\" : undefined,\n    rel: \"noreferrer\"\n  }, children);\n};\nconst components = {\n  a: ALink,\n  img: FancyBoxImage,\n  Card,\n  Link\n};\nconst PostTemplate = _ref2 => {\n  let {children, data} = _ref2;\n  const {mdx: {frontmatter: {title, date: dateString, updated: updatedDateString, categories, tags, timeliness}}} = data;\n  const articleRef = React.useRef(null);\n  const date = dayjs(dateString);\n  const updatedDate = updatedDateString ? dayjs(updatedDateString) : date;\n  const today = dayjs();\n  const diffDays = today.diff(updatedDate, \"days\");\n  React.useEffect(() => {\n    var _articleRef$current;\n    const optimizedImageLinks = (_articleRef$current = articleRef.current) === null || _articleRef$current === void 0 ? void 0 : _articleRef$current.querySelectorAll(\"a.gatsby-resp-image-link\");\n    optimizedImageLinks === null || optimizedImageLinks === void 0 ? void 0 : optimizedImageLinks.forEach(link => {\n      const image = link.children.item(1);\n      link.setAttribute(\"data-fancybox\", \"gallery\");\n      link.setAttribute(\"data-caption\", image.alt);\n    });\n    Fancybox.bind(\"[data-fancybox]\");\n    return () => Fancybox.unbind(\"[data-fancybox]\");\n  }, []);\n  return React.createElement(\"div\", {\n    className: \"mx-auto flex max-w-xl flex-col gap-y-12\"\n  }, React.createElement(\"div\", {\n    className: \"flex flex-col gap-4\"\n  }, (categories === null || categories === void 0 ? void 0 : categories.length) && React.createElement(Category, {\n    name: categories[0],\n    className: \"item-selectable\"\n  }), React.createElement(\"h1\", {\n    className: \"text-3xl font-bold\"\n  }, title), React.createElement(\"div\", {\n    className: \"item-secondary flex flex-col gap-2 lg:flex-row\"\n  }, dateString && React.createElement(\"span\", {\n    title: `首次发布于：${date.toString()}\\n最后更新于：${updatedDate.toString()}`\n  }, date.format(\"MM 月 DD 日 YYYY 年\")), (tags === null || tags === void 0 ? void 0 : tags.length) && React.createElement(\"div\", {\n    className: \"flex flex-1 flex-wrap gap-2 lg:before:content-['\\u2022']\"\n  }, tags.map(tag => React.createElement(Tag, {\n    key: tag,\n    name: tag,\n    className: \"item-secondary item-selectable\"\n  }))))), React.createElement(\"article\", {\n    ref: articleRef,\n    className: \"heti post-entry\"\n  }, timeliness !== false && diffDays > 365 && React.createElement(\"blockquote\", {\n    className: \"border-l-4 border-orange-400\"\n  }, \"\\u8FD9\\u662F\\u4E00\\u7BC7\", React.createElement(\"strong\", null, \"\\u6700\\u540E\\u66F4\\u65B0\\u4E8E \", diffDays, \" \\u5929\\u524D\"), \"\\u7684\\u535A\\u5BA2\\uFF0C\\u5185\\u5BB9\\u53EF\\u80FD\\u968F\\u7740\\u65F6\\u95F4\\u7684\\u63A8\\u79FB\\u800C\\u53D8\\u5F97\\u4E0D\\u518D\\u9002\\u7528\\uFF0C\\u5EFA\\u8BAE\\u60A8\\u4ED4\\u7EC6\\u8BC4\\u4F30\\u4FE1\\u606F\\u7684\\u6709\\u6548\\u6027\\u3002\"), React.createElement(MDXProvider, {\n    components: components\n  }, children)));\n};\nconst query = \"2697480803\";\nexport const Head = _ref3 => {\n  let {data} = _ref3;\n  return React.createElement(SEO, {\n    title: String(data.mdx.frontmatter.title)\n  });\n};\nPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","strong","h2","ol","li","a","h3","span","img","_provideComponents","components","React","href","dangerouslySetInnerHTML","__html","src","alt","wrapper","MDXLayout","_ref","children","isExternalHref","startsWith","parsedHref","encodeURIComponent","slice","target","undefined","rel","restProps","Card","Link","PostTemplate","_ref2","data","mdx","frontmatter","title","date","dateString","updated","updatedDateString","categories","tags","timeliness","articleRef","dayjs","updatedDate","diffDays","diff","_articleRef$current","optimizedImageLinks","current","querySelectorAll","forEach","link","image","item","setAttribute","Fancybox","bind","unbind","className","length","Category","name","toString","format","map","tag","Tag","key","ref","MDXProvider","Head","_ref3","SEO","String","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}