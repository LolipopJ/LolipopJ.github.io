{"version":3,"file":"component---src-templates-post-tsx-content-file-path-blog-posts-nodejs-eslint-prettier-mdx-d111a5fcb7cc08aea7b7.js","mappings":"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","sources":["webpack://homepage/./blog/posts/nodejs-eslint-prettier.mdx","webpack://homepage/./src/templates/post.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    blockquote: \"blockquote\",\n    span: \"span\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"哪位代码人不希望自己的代码总有统一优美的风格，不会因为合作开发项目而杂乱呢？\"), \"\\n\", React.createElement(_components.p, null, \"在最开始写项目代码的时候我就用起了 ESLint 和 Prettier，再装一堆预设的配置，便跑了起来。令人沮丧的是，用 ESLint 修复了代码\", React.createElement(_components.strong, null, \"质量\"), \"问题，还是会在编译器里看到红色波浪线，提醒还有些代码\", React.createElement(_components.strong, null, \"风格\"), \"需要修复。直到这一次，我才忽然意识到 ESLint 和 Prettier 其实分工了不同领域，协同使用体验极好。\"), \"\\n\", React.createElement(_components.p, null, \"本文将阐述笔者如何配置 ESLint + Prettier，实现前端项目检查并修复代码质量与格式问题的能力。\"), \"\\n\", React.createElement(_components.h2, null, \"介绍 ESLint 与 Prettier\"), \"\\n\", React.createElement(_components.p, null, \"ESLint 是一个开源的 JavaScript 代码检查工具，Prettier 是一款代码格式工具。它们的功能侧重如下所示：\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"ESLint：主要负责代码\", React.createElement(_components.strong, null, \"质量\"), \"的校验，其次包含部分的\", React.createElement(_components.strong, null, \"风格\"), \"检验。\"), \"\\n\", React.createElement(_components.li, null, \"Prettier：主要负责代码\", React.createElement(_components.strong, null, \"风格\"), \"的校验。\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"ESLint 认为代码风格并没有那么重要，因此并未完全解决代码风格问题。\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Rules are \\\"agenda free\\\" - ESLint does not promote any particular coding style.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"而 Prettier 则认为自己是固执己见的代码格式化工具。\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"An opinionated code formatter.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"目前公认的一个最佳实践是结合二者的强项：让 Prettier 专注处理代码格式问题，让 ESLint 专注处理代码质量问题。\"), \"\\n\", React.createElement(_components.h2, null, \"引入 ESLint 与 Prettier\"), \"\\n\", React.createElement(_components.p, null, \"首先，自然是安装 ESLint 和 Prettier 作为项目依赖。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token function\\\">yarn</span> <span class=\\\"token function\\\">add</span> <span class=\\\"token parameter variable\\\">--dev</span> eslint prettier</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"接着，让 ESLint 一并接管 Prettier 的工作，这可以通过以下两个库实现：\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://github.com/prettier/eslint-plugin-prettier\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">eslint-plugin-prettier</code>\"\n    }\n  })), \"：ESLint 插件，包括了 ESLint 需要检查的一些额外代码格式规则。在幕后，它使用到了 Prettier，相当于将 Prettier 作为 ESLint 的一部分运行。\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://github.com/prettier/eslint-config-prettier\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">eslint-config-prettier</code>\"\n    }\n  })), \"：ESLint 配置，可以关闭 ESLint 里所有不必要或者可能与 Prettier 产生冲突的代码格式规则。\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"在项目里安装它们：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token function\\\">yarn</span> <span class=\\\"token function\\\">add</span> <span class=\\\"token parameter variable\\\">--dev</span> eslint-plugin-prettier eslint-config-prettier</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"将 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">eslint-plugin-prettier</code>\"\n    }\n  }), \" 的推荐配置 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">plugin:prettier/recommended</code>\"\n    }\n  }), \" 放到 ESLint 配置里 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">extends</code>\"\n    }\n  }), \" 的最后一项即可，它将自动配置并启用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">eslint-config-prettier</code>\"\n    }\n  }), \"。如下所示：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// .eslintrc.js</span>\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">extends</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token comment\\\">// ... 您使用的其它 ESLint 拓展</span>\\n    <span class=\\\"token string\\\">\\\"plugin:prettier/recommended\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"对于新版本的 ESLint 配置文件 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">eslint.config.js</code>\"\n    }\n  }), \"，可以像下面这样配置：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> eslintPluginPrettierRecommended <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">require</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"eslint-plugin-prettier/recommended\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n  <span class=\\\"token comment\\\">// ... 您使用的其它 ESLint 拓展</span>\\n  eslintPluginPrettierRecommended<span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"参考 Prettier 的官方\", React.createElement(_components.a, {\n    href: \"https://prettier.io/docs/options.html\"\n  }, \"配置文档\"), \"，您可以自由地配置项目代码的风格。在项目目录创建 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">.prettierrc.json</code>\"\n    }\n  }), \" 文件，添加风格配置项如：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"json\\\"><pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 注释只是便于理解，您应当删除 JSON 文件里的注释</span>\\n  <span class=\\\"token property\\\">\\\"semi\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 句末是否添加分号</span>\\n  <span class=\\\"token property\\\">\\\"singleQuote\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token comment\\\">// 是否使用单引号（而非双引号）</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"当然，笔者通常保持 Prettier 的默认风格，不单独引入配置文件。\"), \"\\n\", React.createElement(_components.h2, null, \"现在就格式化代码吧\"), \"\\n\", React.createElement(_components.p, null, \"修改 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">package.json</code>\"\n    }\n  }), \" 文件，添加脚本：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"json\\\"><pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token comment\\\">// package.json</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"scripts\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">\\\"lint\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"eslint .\\\"</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"根据上面的配置，可以在项目根目录下执行如下脚本：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token comment\\\"># 检查代码质量问题</span>\\n<span class=\\\"token function\\\">yarn</span> lint\\n\\n<span class=\\\"token comment\\\"># 检查并修复代码质量问题</span>\\n<span class=\\\"token function\\\">yarn</span> lint <span class=\\\"token parameter variable\\\">--fix</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"由于我们将 Prettier 作为了 ESLint 的插件运行，所以无需手动执行 Prettier 的格式化命令了。\"), \"\\n\", React.createElement(_components.p, null, \"在 VSCode 里，也应当将 ESLint 作为默认的格式化工具。如果正确地安装并启用了 VSCode 的 ESLint 拓展，编辑器就能正确的高亮 ESLint 与 Prettier 检查出来的问题了。\"), \"\\n\", React.createElement(_components.p, null, \"此外，VSCode 还可以设置\", React.createElement(_components.strong, null, \"保存时自动修复代码问题\"), \"，如下所示。这样执行 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Ctrl + S</code>\"\n    }\n  }), \" 保存时会自动格式化代码文件。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"json\\\"><pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token comment\\\">// settings.json</span>\\n<span class=\\\"token property\\\">\\\"editor.codeActionsOnSave\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"source.fixAll.eslint\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">true</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, null, \"参考资料\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://stackoverflow.com/questions/44690308/whats-the-difference-between-prettier-eslint-eslint-plugin-prettier-and-eslint\"\n  }, \"What's the difference between prettier-eslint, eslint-plugin-prettier and eslint-config-prettier?\"), \" - stackoverflow\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://github.com/prettier/prettier-eslint-cli/issues/208#issuecomment-673631308\"\n  }, \"Error: 'basePath' should be an absolute path\"), \" - mathiaswillburger - 2020.08.14\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://zhuanlan.zhihu.com/p/80574300\"\n  }, \"搞懂 ESLint 和 Prettier\"), \" - 乃乎 - 2019.08.31\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://www.jianshu.com/p/dd07cca0a48e\"\n  }, \"ESLint+Prettier 代码规范实践\"), \" - Bernie 维 - 2019.06.04\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/homepage/homepage/blog/posts/nodejs-eslint-prettier.mdx\";\nimport {Fancybox} from \"@fancyapps/ui\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport dayjs from \"dayjs\";\nimport {Link} from \"gatsby\";\nimport * as React from \"react\";\nimport Card from \"../components/card\";\nimport Category from \"../components/category\";\nimport SEO from \"../components/seo\";\nimport Tag from \"../components/tag\";\nconst FancyBoxImage = props => {\n  const {alt = \"The author is too lazy to give an alt\", src, ...restProps} = props;\n  return React.createElement(\"a\", {\n    href: src,\n    \"data-fancybox\": \"gallery\",\n    \"data-caption\": alt\n  }, React.createElement(\"img\", Object.assign({\n    src: src,\n    alt: alt\n  }, restProps)));\n};\nconst ALink = _ref => {\n  let {href = \"\", children} = _ref;\n  const isExternalHref = !(href !== null && href !== void 0 && href.startsWith(\"#\"));\n  const parsedHref = isExternalHref ? href : `#${encodeURIComponent(href.slice(1))}`;\n  return React.createElement(\"a\", {\n    href: parsedHref,\n    target: isExternalHref ? \"_blank\" : undefined,\n    rel: \"noreferrer\"\n  }, children);\n};\nconst components = {\n  a: ALink,\n  img: FancyBoxImage,\n  Card,\n  Link\n};\nconst PostTemplate = _ref2 => {\n  let {children, data} = _ref2;\n  const {mdx: {fields: {isDraft}, frontmatter: {title, date: dateString, updated: updatedDateString, categories, tags, timeliness}}} = data;\n  const articleRef = React.useRef(null);\n  const date = dayjs(dateString);\n  const updatedDate = updatedDateString ? dayjs(updatedDateString) : date;\n  const today = dayjs();\n  const diffDays = today.diff(updatedDate, \"days\");\n  React.useEffect(() => {\n    var _articleRef$current;\n    const optimizedImageLinks = (_articleRef$current = articleRef.current) === null || _articleRef$current === void 0 ? void 0 : _articleRef$current.querySelectorAll(\"a.gatsby-resp-image-link\");\n    optimizedImageLinks === null || optimizedImageLinks === void 0 ? void 0 : optimizedImageLinks.forEach(link => {\n      const image = link.children.item(1);\n      link.setAttribute(\"data-fancybox\", \"gallery\");\n      link.setAttribute(\"data-caption\", image.alt);\n    });\n    Fancybox.bind(\"[data-fancybox]\");\n    return () => Fancybox.unbind(\"[data-fancybox]\");\n  }, []);\n  return React.createElement(\"div\", {\n    className: \"mx-auto flex max-w-xl flex-col gap-y-12\"\n  }, React.createElement(\"div\", {\n    className: \"flex flex-col gap-4\"\n  }, (categories === null || categories === void 0 ? void 0 : categories.length) && React.createElement(Category, {\n    name: categories[0],\n    className: \"item-selectable\"\n  }), React.createElement(\"h1\", {\n    className: \"text-3xl font-bold\"\n  }, title), React.createElement(\"div\", {\n    className: \"item-secondary flex flex-col gap-2 lg:flex-row\"\n  }, dateString && React.createElement(\"span\", {\n    title: `首次发布于：${date.toString()}\\n最后更新于：${updatedDate.toString()}`\n  }, date.format(\"MM 月 DD 日 YYYY 年\")), (tags === null || tags === void 0 ? void 0 : tags.length) && React.createElement(\"div\", {\n    className: \"flex flex-1 flex-wrap gap-2 lg:before:content-['\\u2022']\"\n  }, tags.map(tag => React.createElement(Tag, {\n    key: tag,\n    name: tag,\n    className: \"item-secondary item-selectable\"\n  }))))), React.createElement(\"article\", {\n    ref: articleRef,\n    className: \"heti post-entry\"\n  }, isDraft && React.createElement(\"blockquote\", {\n    className: \"!border-red-400\"\n  }, \"\\u8FD9\\u662F\\u4E00\\u7BC7\", React.createElement(\"strong\", null, \"\\u672A\\u6B63\\u5F0F\\u53D1\\u5E03\"), \"\\u7684\\u535A\\u5BA2\\uFF0C\\u5185\\u5BB9\\u53EF\\u80FD\\u5C1A\\u672A\\u64B0\\u5199\\u5B8C\\u5168\\u6216\\u5B58\\u5728\\u4E00\\u4E9B\\u7EB0\\u6F0F\\uFF0C\\u5EFA\\u8BAE\\u60A8\\u4ED4\\u7EC6\\u8BC4\\u4F30\\u4FE1\\u606F\\u7684\\u6709\\u6548\\u6027\\u3002\"), timeliness !== false && diffDays > 365 && React.createElement(\"blockquote\", {\n    className: \"!border-orange-400\"\n  }, \"\\u8FD9\\u662F\\u4E00\\u7BC7\", React.createElement(\"strong\", null, \"\\u6700\\u540E\\u66F4\\u65B0\\u4E8E \", diffDays, \" \\u5929\\u524D\"), \"\\u7684\\u535A\\u5BA2\\uFF0C\\u5185\\u5BB9\\u53EF\\u80FD\\u968F\\u7740\\u65F6\\u95F4\\u7684\\u63A8\\u79FB\\u800C\\u53D8\\u5F97\\u4E0D\\u518D\\u9002\\u7528\\uFF0C\\u5EFA\\u8BAE\\u60A8\\u4ED4\\u7EC6\\u8BC4\\u4F30\\u4FE1\\u606F\\u7684\\u6709\\u6548\\u6027\\u3002\"), React.createElement(MDXProvider, {\n    components: components\n  }, children)));\n};\nconst query = \"2264136072\";\nexport const Head = _ref3 => {\n  let {data} = _ref3;\n  return React.createElement(SEO, {\n    title: String(data.mdx.frontmatter.title)\n  });\n};\nPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","strong","h2","ul","li","blockquote","span","a","_provideComponents","components","React","dangerouslySetInnerHTML","__html","href","wrapper","MDXLayout","_ref","children","isExternalHref","startsWith","parsedHref","encodeURIComponent","slice","target","undefined","rel","img","alt","src","restProps","Card","Link","PostTemplate","_ref2","data","mdx","fields","isDraft","frontmatter","title","date","dateString","updated","updatedDateString","categories","tags","timeliness","articleRef","dayjs","updatedDate","diffDays","diff","_articleRef$current","optimizedImageLinks","current","querySelectorAll","forEach","link","image","item","setAttribute","Fancybox","bind","unbind","className","length","Category","name","toString","format","map","tag","Tag","key","ref","MDXProvider","Head","_ref3","SEO","String","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}