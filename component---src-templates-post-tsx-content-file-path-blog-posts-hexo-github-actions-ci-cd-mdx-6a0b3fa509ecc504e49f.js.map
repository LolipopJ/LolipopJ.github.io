{"version":3,"file":"component---src-templates-post-tsx-content-file-path-blog-posts-hexo-github-actions-ci-cd-mdx-6a0b3fa509ecc504e49f.js","mappings":"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","sources":["webpack://homepage/./blog/posts/hexo-github-actions-ci-cd.mdx","webpack://homepage/./src/templates/post.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    blockquote: \"blockquote\",\n    a: \"a\",\n    h2: \"h2\",\n    h3: \"h3\",\n    strong: \"strong\",\n    span: \"span\"\n  }, _provideComponents(), props.components), {Link} = _components;\n  if (!Link) _missingMdxReference(\"Link\", true);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"这是我撰写的第一篇与 Github Actions 有关的博客，那么就首先对 Github Actions 做一个简短的介绍吧。\"), \"\\n\", React.createElement(_components.p, null, \"Github Actions 是 Github 于 2018 年 10 月推出的持续集成服务（CI）。\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"大家知道，持续集成由很多操作组成，比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等。GitHub 把这些操作就称为 actions。\\n很多操作在不同项目里面是类似的，完全可以共享。GitHub 注意到了这一点，想出了一个很妙的点子，允许开发者把每个操作写成独立的脚本文件，存放到代码仓库，使得其他开发者可以引用。\\n如果你需要某个 action，不必自己写复杂的脚本，直接引用他人写好的 action 即可，整个持续集成过程，就变成了一个 actions 的组合。这就是 GitHub Actions 最特别的地方。\\n—— \", React.createElement(_components.a, {\n    href: \"http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html\"\n  }, \"GitHub Actions 入门教程\")), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"不过在 Github Actions 的发展的过程中，它早已不局限于 CI 等功能，还可以用于各种自动化操作，例如\", React.createElement(_components.a, {\n    href: \"https://github.com/srcrs/TiebaSignIn\"\n  }, \"百度贴吧自动签到\"), \"（注：已失效。Github 官方会对此类利用服务器实现签到功能的仓库进行封禁打击，还是不要使用了吧）等。\"), \"\\n\", React.createElement(_components.h2, null, \"持续集成与部署 Hexo 博客\"), \"\\n\", React.createElement(_components.p, null, \"在\", React.createElement(Link, {\n    to: \"/posts/hello-hexo-world\"\n  }, \"搭建自己的 Hexo 博客\"), \"那篇文章的最后，我们使用的是 \", React.createElement(_components.a, {\n    href: \"https://hexo.io/zh-cn/docs/github-pages#%E7%A7%81%E6%9C%89-Repository\"\n  }, \"hexo-deployer-git 一键部署到仓库\"), \"的方式，实现手动构建个人博客网页并通过脚本推送部署到自己的 Github Pages.\"), \"\\n\", React.createElement(_components.p, null, \"事实上，利用 Github Actions 就再也不用多此一举：每次提交代码到 Github 后，就可以触发 Github Actions 并自动部署新的博客内容。\"), \"\\n\", React.createElement(_components.h3, null, \"文档是您最有用的帮手\"), \"\\n\", React.createElement(_components.p, null, \"更确切的说，英文文档是您最有用的帮手！\"), \"\\n\", React.createElement(_components.p, null, \"在此处记一个小插曲，在本博客初次撰写的时候，中文的 Hexo 文档页面仍在使用 Travis CI 实现自动化部署，而英文的 Hexo 文档已经更新到推荐使用 Github Actions 实现自动化部署操作了。\"), \"\\n\", React.createElement(_components.p, null, \"使用 Travis CI 对免费用户有 10000 分钟执行时间的限额，为了以后不再迁移，还是使用 Github Actions 吧！\"), \"\\n\", React.createElement(_components.p, null, \"接下来的内容主要参考了\", React.createElement(_components.a, {\n    href: \"https://hexo.io/docs/github-pages\"\n  }, \"英文文档\"), \"，在此基础上加上了自己的一些操作与理解。\"), \"\\n\", React.createElement(_components.p, null, \"假设您已经创建了一个 \", React.createElement(_components.strong, null, \"username.github.io\"), \" 仓库，其中 username 是您在 Github 上的用户名。\"), \"\\n\", React.createElement(_components.h3, null, \"创建存放 Hexo 源的分支\"), \"\\n\", React.createElement(_components.p, null, \"众所周知，Hexo 首先通过 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Hexo generate</code>\"\n    }\n  }), \" 方法构建了博客所有的 HTML, JS 和 CSS 文件，只需要将这些文件上传到 \", React.createElement(_components.strong, null, \"username.github.io\"), \" 仓库，并在仓库设置中修改 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">GitHub Pages</code>\"\n    }\n  }), \" 项的相应内容，就可以通过 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">username.github.io</code>\"\n    }\n  }), \" 访问到您的博客了。\"), \"\\n\", React.createElement(_components.p, null, \"因此我们可以单独将构建前的所有文件放置在 \", React.createElement(_components.strong, null, \"username.github.io\"), \" 仓库中的一个分支上，每次更新此分支后，自动通过 Github Actions 将构建出的所有文件推送到展示的分支上去。\"), \"\\n\", React.createElement(_components.p, null, \"这里，假设您展示的博客文件存放在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">master</code>\"\n    }\n  }), \" 分支，而 Hexo 源文件存放在新建的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">source</code>\"\n    }\n  }), \" 分支。\"), \"\\n\", React.createElement(_components.h3, null, \"编写 Github Actions\"), \"\\n\", React.createElement(_components.p, null, \"克隆此仓库到本地，切换到 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">source</code>\"\n    }\n  }), \" 分支，在根目录下新建文件夹 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">.github/workflows</code>\"\n    }\n  }), \"，在此目录下新建文件如 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">main.yml</code>\"\n    }\n  }), \". 名字并不重要。\"), \"\\n\", React.createElement(_components.p, null, \"您也可以在 Github 的仓库页面上点击 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Actions</code>\"\n    }\n  }), \" 并创建新的工作流 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">main.yml</code>\"\n    }\n  }), \"。\"), \"\\n\", React.createElement(_components.p, null, \"编写工作流文件 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">main.yml</code>\"\n    }\n  }), \" 如下所示：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"yml\\\"><pre class=\\\"language-yml\\\"><code class=\\\"language-yml\\\"><span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> Hexo Blog CI &amp; CD\\n\\n<span class=\\\"token key atrule\\\">on</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token key atrule\\\">push</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token key atrule\\\">branches</span><span class=\\\"token punctuation\\\">:</span>\\n      <span class=\\\"token punctuation\\\">-</span> source <span class=\\\"token comment\\\"># 存放 Hexo 源文件的分支</span>\\n\\n<span class=\\\"token key atrule\\\">jobs</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token key atrule\\\">pages</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token key atrule\\\">runs-on</span><span class=\\\"token punctuation\\\">:</span> ubuntu<span class=\\\"token punctuation\\\">-</span>latest\\n    <span class=\\\"token key atrule\\\">steps</span><span class=\\\"token punctuation\\\">:</span>\\n      <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">uses</span><span class=\\\"token punctuation\\\">:</span> actions/checkout@v2\\n      <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> Use Node.js 12.x\\n        <span class=\\\"token key atrule\\\">uses</span><span class=\\\"token punctuation\\\">:</span> actions/setup<span class=\\\"token punctuation\\\">-</span>node@v1\\n        <span class=\\\"token key atrule\\\">with</span><span class=\\\"token punctuation\\\">:</span>\\n          <span class=\\\"token key atrule\\\">node-version</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"12.x\\\"</span>\\n      <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> Cache NPM dependencies\\n        <span class=\\\"token key atrule\\\">uses</span><span class=\\\"token punctuation\\\">:</span> actions/cache@v2\\n        <span class=\\\"token key atrule\\\">with</span><span class=\\\"token punctuation\\\">:</span>\\n          <span class=\\\"token key atrule\\\">path</span><span class=\\\"token punctuation\\\">:</span> node_modules\\n          <span class=\\\"token key atrule\\\">key</span><span class=\\\"token punctuation\\\">:</span> $<span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span> runner.OS <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">-</span>npm<span class=\\\"token punctuation\\\">-</span>cache\\n          <span class=\\\"token key atrule\\\">restore-keys</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">|</span><span class=\\\"token scalar string\\\">\\n            ${{ runner.OS }}-npm-cache</span>\\n      <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> Install Dependencies\\n        <span class=\\\"token key atrule\\\">run</span><span class=\\\"token punctuation\\\">:</span> npm install\\n      <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> Build\\n        <span class=\\\"token key atrule\\\">run</span><span class=\\\"token punctuation\\\">:</span> npm run build\\n      <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> Deploy\\n        <span class=\\\"token key atrule\\\">uses</span><span class=\\\"token punctuation\\\">:</span> peaceiris/actions<span class=\\\"token punctuation\\\">-</span>gh<span class=\\\"token punctuation\\\">-</span>pages@v3\\n        <span class=\\\"token key atrule\\\">with</span><span class=\\\"token punctuation\\\">:</span>\\n          <span class=\\\"token key atrule\\\">github_token</span><span class=\\\"token punctuation\\\">:</span> $<span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span> secrets.GITHUB_TOKEN <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token comment\\\"># 无需修改</span>\\n          <span class=\\\"token key atrule\\\">publish_dir</span><span class=\\\"token punctuation\\\">:</span> ./public <span class=\\\"token comment\\\"># hexo generate 生成的博客文件默认存放在 /public 目录下</span>\\n          <span class=\\\"token key atrule\\\">publish_branch</span><span class=\\\"token punctuation\\\">:</span> master <span class=\\\"token comment\\\"># 存放展示的博客文件的分支</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"工作流采用了别人编写好的 \", React.createElement(_components.a, {\n    href: \"https://github.com/peaceiris/actions-gh-pages\"\n  }, \"actions-gh-pages@v3\"), \"，其中 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">GITHUB_TOKEN</code>\"\n    }\n  }), \" 为 Github Actions 在运行中自动生成的，用于验证身份的 Token，无需修改。关于 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">GITHUB_TOKEN</code>\"\n    }\n  }), \" 的更多介绍，可以查看\", React.createElement(_components.a, {\n    href: \"https://docs.github.com/en/actions/reference/authentication-in-a-workflow\"\n  }, \"此文档\"), \"。\"), \"\\n\", React.createElement(_components.p, null, \"提交修改或保存此工作流文件，很快 Github Actions 就会开始自动执行，并将最新的博客文件推送到仓库的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">master</code>\"\n    }\n  }), \" 分支。\"), \"\\n\", React.createElement(_components.p, null, \"最后，等到 Github Pages 也更新完毕后，就可以访问您的博客啦！\"), \"\\n\", React.createElement(_components.h3, null, \"假如您采用了账户两重验证\"), \"\\n\", React.createElement(_components.p, null, \"Ops, 也许您的邮箱收到了一份新的邮件，遗憾地通知您 Github Actions 执行失败。这时您可以想一想自己是否启用了 Github 账号的双重验证或其它安全访问验证。这都可能导致自动部署失败。\"), \"\\n\", React.createElement(_components.p, null, \"但是别担心，您可以通过\", React.createElement(_components.a, {\n    href: \"https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-create-ssh-deploy-key\"\n  }, \"添加 SSH 身份验证\"), \"来解决这个问题。\"), \"\\n\", React.createElement(_components.p, null, \"首先，使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ssh-keygen -t rsa -C \\\"YOUR USERNAME\\\"</code>\"\n    }\n  }), \" 命令创建一个新的 SSH key 公钥密钥对。\"), \"\\n\", React.createElement(_components.p, null, \"然后在 Github 上的 \", React.createElement(_components.strong, null, \"Account settings\"), \" 中的 \", React.createElement(_components.strong, null, \"SSH and GPG keys\"), \" 设置中保存带有 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">.pub</code>\"\n    }\n  }), \" 后缀的公钥，并在当前项目仓库的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">secrets</code>\"\n    }\n  }), \" 中存放不带任何后缀的密钥。\"), \"\\n\", React.createElement(_components.p, null, \"最后修改刚刚的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">main.yml</code>\"\n    }\n  }), \" 文件，添加 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">deploy_key</code>\"\n    }\n  }), \" 设置，如下所示：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"yml\\\"><pre class=\\\"language-yml\\\"><code class=\\\"language-yml\\\"><span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> Hexo Blog CI &amp; CD\\n\\n<span class=\\\"token key atrule\\\">on</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token key atrule\\\">push</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token key atrule\\\">branches</span><span class=\\\"token punctuation\\\">:</span>\\n      <span class=\\\"token punctuation\\\">-</span> source\\n\\n<span class=\\\"token key atrule\\\">jobs</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token key atrule\\\">pages</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token key atrule\\\">runs-on</span><span class=\\\"token punctuation\\\">:</span> ubuntu<span class=\\\"token punctuation\\\">-</span>latest\\n    <span class=\\\"token key atrule\\\">steps</span><span class=\\\"token punctuation\\\">:</span>\\n      <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">uses</span><span class=\\\"token punctuation\\\">:</span> actions/checkout@v2\\n      <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> Use Node.js 12.x\\n        <span class=\\\"token key atrule\\\">uses</span><span class=\\\"token punctuation\\\">:</span> actions/setup<span class=\\\"token punctuation\\\">-</span>node@v1\\n        <span class=\\\"token key atrule\\\">with</span><span class=\\\"token punctuation\\\">:</span>\\n          <span class=\\\"token key atrule\\\">node-version</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"12.x\\\"</span>\\n      <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> Cache NPM dependencies\\n        <span class=\\\"token key atrule\\\">uses</span><span class=\\\"token punctuation\\\">:</span> actions/cache@v2\\n        <span class=\\\"token key atrule\\\">with</span><span class=\\\"token punctuation\\\">:</span>\\n          <span class=\\\"token key atrule\\\">path</span><span class=\\\"token punctuation\\\">:</span> node_modules\\n          <span class=\\\"token key atrule\\\">key</span><span class=\\\"token punctuation\\\">:</span> $<span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span> runner.OS <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">-</span>npm<span class=\\\"token punctuation\\\">-</span>cache\\n          <span class=\\\"token key atrule\\\">restore-keys</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">|</span><span class=\\\"token scalar string\\\">\\n            ${{ runner.OS }}-npm-cache</span>\\n      <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> Install Dependencies\\n        <span class=\\\"token key atrule\\\">run</span><span class=\\\"token punctuation\\\">:</span> npm install\\n      <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> Build\\n        <span class=\\\"token key atrule\\\">run</span><span class=\\\"token punctuation\\\">:</span> npm run build\\n      <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token key atrule\\\">name</span><span class=\\\"token punctuation\\\">:</span> Deploy\\n        <span class=\\\"token key atrule\\\">uses</span><span class=\\\"token punctuation\\\">:</span> peaceiris/actions<span class=\\\"token punctuation\\\">-</span>gh<span class=\\\"token punctuation\\\">-</span>pages@v3\\n        <span class=\\\"token key atrule\\\">with</span><span class=\\\"token punctuation\\\">:</span>\\n          <span class=\\\"token key atrule\\\">github_token</span><span class=\\\"token punctuation\\\">:</span> $<span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span> secrets.GITHUB_TOKEN <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span>\\n          <span class=\\\"token key atrule\\\">deploy_key</span><span class=\\\"token punctuation\\\">:</span> $<span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">{</span> secrets.ACCESS_TOKEN <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">}</span> <span class=\\\"token comment\\\"># 添加 ACCESS_TOKEN</span>\\n          <span class=\\\"token key atrule\\\">publish_dir</span><span class=\\\"token punctuation\\\">:</span> ./public\\n          <span class=\\\"token key atrule\\\">publish_branch</span><span class=\\\"token punctuation\\\">:</span> master</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"其中 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ACCESS_TOKEN</code>\"\n    }\n  }), \" 为新建的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">secret</code>\"\n    }\n  }), \" 的名字，您应当修改为刚刚您创建 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">secret</code>\"\n    }\n  }), \" 时指定的名字。\"), \"\\n\", React.createElement(_components.p, null, \"当然，您也可以生成 Github personal access token，本文不再赘述。\"), \"\\n\", React.createElement(_components.p, null, \"最后，提交您的修改，一切都工作得如此完美。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/homepage/homepage/blog/posts/hexo-github-actions-ci-cd.mdx\";\nimport {Fancybox} from \"@fancyapps/ui\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport dayjs from \"dayjs\";\nimport {Link} from \"gatsby\";\nimport * as React from \"react\";\nimport Card from \"../components/card\";\nimport Category from \"../components/category\";\nimport SEO from \"../components/seo\";\nimport Tag from \"../components/tag\";\nconst FancyBoxImage = props => {\n  const {alt = \"The author is too lazy to give an alt\", src, ...restProps} = props;\n  return React.createElement(\"a\", {\n    href: src,\n    \"data-fancybox\": \"gallery\",\n    \"data-caption\": alt\n  }, React.createElement(\"img\", Object.assign({\n    src: src,\n    alt: alt\n  }, restProps)));\n};\nconst ALink = _ref => {\n  let {href = \"\", children} = _ref;\n  const isExternalHref = !(href !== null && href !== void 0 && href.startsWith(\"#\"));\n  const parsedHref = isExternalHref ? href : `#${encodeURIComponent(href.slice(1))}`;\n  return React.createElement(\"a\", {\n    href: parsedHref,\n    target: isExternalHref ? \"_blank\" : undefined,\n    rel: \"noreferrer\"\n  }, children);\n};\nconst components = {\n  a: ALink,\n  img: FancyBoxImage,\n  Card,\n  Link\n};\nconst PostTemplate = _ref2 => {\n  let {children, data} = _ref2;\n  const {mdx: {frontmatter: {title, date: dateString, updated: updatedDateString, categories, tags, timeliness = true}}} = data;\n  const articleRef = React.useRef(null);\n  const date = dayjs(dateString);\n  const updatedDate = updatedDateString ? dayjs(updatedDateString) : date;\n  const today = dayjs();\n  const diffDays = today.diff(updatedDate, \"days\");\n  React.useEffect(() => {\n    var _articleRef$current;\n    const optimizedImageLinks = (_articleRef$current = articleRef.current) === null || _articleRef$current === void 0 ? void 0 : _articleRef$current.querySelectorAll(\"a.gatsby-resp-image-link\");\n    optimizedImageLinks === null || optimizedImageLinks === void 0 ? void 0 : optimizedImageLinks.forEach(link => {\n      const image = link.children.item(1);\n      link.setAttribute(\"data-fancybox\", \"gallery\");\n      link.setAttribute(\"data-caption\", image.alt);\n    });\n    Fancybox.bind(\"[data-fancybox]\");\n    return () => Fancybox.unbind(\"[data-fancybox]\");\n  }, []);\n  return React.createElement(\"div\", {\n    className: \"mx-auto flex max-w-xl flex-col gap-y-12\"\n  }, React.createElement(\"div\", {\n    className: \"flex flex-col gap-4\"\n  }, (categories === null || categories === void 0 ? void 0 : categories.length) && React.createElement(Category, {\n    name: categories[0],\n    className: \"item-selectable\"\n  }), React.createElement(\"h1\", {\n    className: \"text-3xl font-bold\"\n  }, title), React.createElement(\"div\", {\n    className: \"item-secondary flex flex-col gap-2 lg:flex-row\"\n  }, dateString && React.createElement(\"span\", {\n    title: `首次发布于：${date.toString()}\\n最后更新于：${updatedDate.toString()}`\n  }, date.format(\"MM 月 DD 日 YYYY 年\")), (tags === null || tags === void 0 ? void 0 : tags.length) && React.createElement(\"div\", {\n    className: \"flex flex-1 flex-wrap gap-2 lg:before:content-['\\u2022']\"\n  }, tags.map(tag => React.createElement(Tag, {\n    key: tag,\n    name: tag,\n    className: \"item-secondary item-selectable\"\n  }))))), React.createElement(\"article\", {\n    ref: articleRef,\n    className: \"heti post-entry\"\n  }, timeliness && diffDays > 365 && React.createElement(\"blockquote\", {\n    className: \"border-l-4 border-orange-400\"\n  }, \"\\u8FD9\\u662F\\u4E00\\u7BC7\", React.createElement(\"strong\", null, \"\\u6700\\u540E\\u66F4\\u65B0\\u4E8E \", diffDays, \" \\u5929\\u524D\"), \"\\u7684\\u535A\\u5BA2\\uFF0C\\u5185\\u5BB9\\u53EF\\u80FD\\u968F\\u7740\\u65F6\\u95F4\\u7684\\u63A8\\u79FB\\u800C\\u53D8\\u5F97\\u4E0D\\u518D\\u9002\\u7528\\uFF0C\\u5EFA\\u8BAE\\u60A8\\u4ED4\\u7EC6\\u8BC4\\u4F30\\u4FE1\\u606F\\u7684\\u6709\\u6548\\u6027\\u3002\"), React.createElement(MDXProvider, {\n    components: components\n  }, children)));\n};\nconst query = \"2697480803\";\nexport const Head = _ref3 => {\n  let {data} = _ref3;\n  return React.createElement(SEO, {\n    title: String(data.mdx.frontmatter.title)\n  });\n};\nPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","blockquote","a","h2","h3","strong","span","_provideComponents","components","Link","id","component","Error","_missingMdxReference","React","href","to","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","_ref","children","isExternalHref","startsWith","parsedHref","encodeURIComponent","slice","target","undefined","rel","img","alt","src","restProps","Card","PostTemplate","_ref2","data","mdx","frontmatter","title","date","dateString","updated","updatedDateString","categories","tags","timeliness","articleRef","dayjs","updatedDate","diffDays","diff","_articleRef$current","optimizedImageLinks","current","querySelectorAll","forEach","link","image","item","setAttribute","Fancybox","bind","unbind","className","length","Category","name","toString","format","map","tag","Tag","key","ref","MDXProvider","Head","_ref3","SEO","String","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}