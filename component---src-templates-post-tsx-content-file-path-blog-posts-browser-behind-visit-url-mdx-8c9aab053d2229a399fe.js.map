{"version":3,"file":"component---src-templates-post-tsx-content-file-path-blog-posts-browser-behind-visit-url-mdx-8c9aab053d2229a399fe.js","mappings":"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","sources":["webpack://homepage/./blog/posts/browser-behind-visit-url.mdx","webpack://homepage/./src/templates/post.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    span: \"span\",\n    h2: \"h2\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\",\n    strong: \"strong\",\n    ol: \"ol\",\n    blockquote: \"blockquote\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"最近学习前端基础知识的时候，看到了这个问题和\", React.createElement(_components.a, {\n    href: \"https://www.zhihu.com/question/34873227/answer/518086565\"\n  }, \"一个回答\"), \"，非常生动有趣。遂抱着梳理的想法，将整个过程描述出来。\"), \"\\n\", React.createElement(_components.p, null, \"现在，假设您打开了浏览器，想要访问我的个人博客，您会在地址栏输入 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">lolipopj.github.io</code>\"\n    }\n  }), \" 这个 URL 然后敲下回车键。\"), \"\\n\", React.createElement(_components.p, null, \"从敲下回车键到最终顺利在浏览器显示我博客的主页，这个过程的背后发生了什么呢？\"), \"\\n\", React.createElement(_components.h2, null, \"检查 URL 格式\"), \"\\n\", React.createElement(_components.p, null, \"别急，在正式驶入互联网的快车道之前，浏览器会首先检查输入的 URL 的格式是否正确。\"), \"\\n\", React.createElement(_components.p, null, \"例如，假如您输入的是 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">lolipop j.github.io</code>\"\n    }\n  }), \"，或是 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">lolipopj.gith$ub.io</code>\"\n    }\n  }), \"，浏览器将会判断它们为非 URL。在这种情况下，浏览器通常会将我们错误输入的 URL 作为搜索引擎的输入关键字，最终跳转到搜索结果界面。\"), \"\\n\", React.createElement(_components.h3, null, \"什么是 URL\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/Identifying_resources_on_the_Web\"\n  }, \"「标识互联网上的内容」\"), \"，MDN\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"HTTP 请求的内容非常宽泛，统称为“资源”。“资源”可以是一份文档，一张图片，或所有您可以想象到的格式。而这样的每个“资源”，都由一个\", React.createElement(_components.strong, null, \"统一资源定位符 URL\"), \" 标识。\"), \"\\n\", React.createElement(_components.p, null, \"通俗地讲，URL 可以叫作“网络地址”或“链接”，它是对指定计算机网络上某位置的\", React.createElement(_components.strong, null, \"网络资源\"), \"的引用，以及检索它的机制。一个典型的 URL 可以采用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">http://www.example.com/index.html</code>\"\n    }\n  }), \" 形式表示，它表明了使用的协议（http），访问的主机名（\", React.createElement(_components.a, {\n    href: \"http://www.example.com%EF%BC%89%E4%BB%A5%E5%8F%8A%E6%96%87%E4%BB%B6%E5%90%8D%EF%BC%88index.html%EF%BC%89%E3%80%82\"\n  }, \"www.example.com）以及文件名（index.html）。\")), \"\\n\", React.createElement(_components.p, null, \"此外，URL 也可以用于文件传输（FTP），发送邮件（SMTP）和数据库访问（JDBC）等。\"), \"\\n\", React.createElement(_components.p, null, \"URL 是\", React.createElement(_components.strong, null, \"统一资源标志符 URI\"), \" 的子集，由于早期 RFC 文档撰写的\", React.createElement(_components.a, {\n    href: \"https://danielmiessler.com/study/difference-between-uri-url/\"\n  }, \"一些混乱\"), \"，在实际使用中可能会发生混用的情况。在以 HTTP 为上下文的语境中，大多数情况使用 URL 即可。\"), \"\\n\", React.createElement(_components.h3, null, \"URL 格式\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://en.wikipedia.org/wiki/URL\"\n  }, \"「URL」\"), \"，Wikipedia\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"URL 符合通用 URI 语法，格式如下：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"plaintext\\\"><pre class=\\\"language-plaintext\\\"><code class=\\\"language-plaintext\\\">URI = scheme:[//authority]path[?query][#fragment]</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"其中，\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">authority</code>\"\n    }\n  }), \" 部分可以划分为三个子模块：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"plaintext\\\"><pre class=\\\"language-plaintext\\\"><code class=\\\"language-plaintext\\\">authority = [userinfo@]host[:port]</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"URI 具体包括如下部分：\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"非空的\"), \" \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">scheme</code>\"\n    }\n  }), \" 标识，后面跟着一个 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">:</code>\"\n    }\n  }), \"。由字母开头，后跟字母、数字、\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">+</code>\"\n    }\n  }), \"、\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">.</code>\"\n    }\n  }), \" 或连字符 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">-</code>\"\n    }\n  }), \" 的任意组合，规范建议使用小写格式。常见的例子有 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">http:</code>\"\n    }\n  }), \"，\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">https:</code>\"\n    }\n  }), \" 和 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ftp:</code>\"\n    }\n  }), \" 等。\"), \"\\n\", React.createElement(_components.li, null, \"可选的以 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">//</code>\"\n    }\n  }), \" 开头的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">authority</code>\"\n    }\n  }), \" 权限组件，包括：\", \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"可选的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">userinfo</code>\"\n    }\n  }), \" 用户信息，可能包括用户名和用户密码，两者使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">:</code>\"\n    }\n  }), \" 分开。在后面跟着 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">@</code>\"\n    }\n  }), \"。出于安全考虑，应用程序不应当将用户密码部分用明文表示。\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"非空的\"), \" \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">host</code>\"\n    }\n  }), \" 主机，由注册名称（例如主机名）或 IP 地址组成。对于后者，如果是 IPv4 地址，需要使用十进制表示法；如果是 IPv6 地址，需要包括在方括号 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">[]</code>\"\n    }\n  }), \" 中。\"), \"\\n\", React.createElement(_components.li, null, \"可选的以 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">:</code>\"\n    }\n  }), \" 开头的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">port</code>\"\n    }\n  }), \" 端口号。\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"非空的\"), \" \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">path</code>\"\n    }\n  }), \" 路径，由一系列 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">/</code>\"\n    }\n  }), \" 分隔的路径段组成。路径将类似或完全映射到文件系统中。此外，如果存在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">authority</code>\"\n    }\n  }), \" 权限组件，则必须为空或以 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">/</code>\"\n    }\n  }), \" 开头；如果不存在，则不能以空路径段开头，因为这样实际上就是以 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">//</code>\"\n    }\n  }), \" 开头，将被解释为 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">authority</code>\"\n    }\n  }), \" 权限组件。\"), \"\\n\", React.createElement(_components.li, null, \"可选的以 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">?</code>\"\n    }\n  }), \" 开头的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">query</code>\"\n    }\n  }), \" 查询。语法没有明确要求，通常采用键值对的形式。\"), \"\\n\", React.createElement(_components.li, null, \"可选的以 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">#</code>\"\n    }\n  }), \" 开头的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">fragment</code>\"\n    }\n  }), \" 片段。用于提供对次要资源的指向，例如在 HTML 文档中，将指向包含对应 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">id</code>\"\n    }\n  }), \" 属性的元素。\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"补齐 URL\"), \"\\n\", React.createElement(_components.p, null, \"前面我们在使用 URL 时，并没有添加它的前缀例如 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">https://</code>\"\n    }\n  }), \"。那么我们具体使用的是 HTTP 协议还是 HTTPS 协议呢？\"), \"\\n\", React.createElement(_components.p, null, \"针对这种情况，浏览器有自己的预案，即默认使用 HTTP 协议。假如您是\", React.createElement(_components.strong, null, \"第一次\"), \"访问我的博客（更严谨地说是第一次访问 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">github.io</code>\"\n    }\n  }), \" 域名下的网站），除非在输入的最开始就使用了 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">https://lolipopj.github.io</code>\"\n    }\n  }), \" 这个 URL，否则均会被默认补齐为 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">http://lolipopj.github.io</code>\"\n    }\n  }), \"。对于启用了 \", React.createElement(_components.a, {\n    href: \"#%E4%BB%80%E4%B9%88%E6%98%AF-hsts%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E5%AE%83\"\n  }, \"HSTS 保护\"), \"的网站，从第二次的访问开始，浏览器将根据第一次访问时得到的响应结果，自动补齐协议。\"), \"\\n\", React.createElement(_components.p, null, \"随着 HSTS 的推广使用，现代浏览器中还内置了一个列表 \", React.createElement(_components.a, {\n    href: \"#hsts-%E7%9A%84-preload-list-%E6%9C%BA%E5%88%B6\"\n  }, \"Preload List\"), \"，记录常用网站所使用的协议。对于这些网站，输入的 URL 将自动在前面补上记录的协议，再由浏览器发送请求。因此在实际情况中，第一次访问时，我们输入的 URL 就会被补齐为 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">https://lolipopj.github.io</code>\"\n    }\n  }), \"。\"), \"\\n\", React.createElement(_components.h3, null, \"HTTP 严格传输安全 HSTS\"), \"\\n\", React.createElement(_components.p, null, \"以下内容主要参考此文章：\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://zhuanlan.zhihu.com/p/25537440\"\n  }, \"「HSTS 详解」\"), \"，2017-03-03\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"什么是 HSTS，为什么我们需要它\"), \"\\n\", React.createElement(_components.p, null, \"在过去，假如服务器使用的是 HTTPS 协议，当我们默认使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">http://lolipopj.github.io</code>\"\n    }\n  }), \" 发起请求时，也会在服务器端通过 301 重定向到 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">https://lolipopj.github.io</code>\"\n    }\n  }), \"。在这个过程中，浏览器首先使用了 HTTP 协议发起请求，得到重定向的响应后，浏览器会重新发起基于 HTTPS 协议的请求并最终与服务器建立通信。\"), \"\\n\", React.createElement(_components.p, null, \"这是一个存在风险的操作，因为在建立 HTTPS 通信之前，我们有一次明文的 HTTP 请求以及重定向操作。HTTP 主要有如下不足：\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"通信使用明文（不加密），内容可能会被窃听；\"), \"\\n\", React.createElement(_components.li, null, \"不验证通信方的身份，因此有可能遭遇伪装；\"), \"\\n\", React.createElement(_components.li, null, \"无法证明报文的完整性，所以有可能已遭篡改等。\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"中间人可以劫持 HTTP 请求并篡改响应，阻止建立 HTTPS 连接，跳转到钓鱼网站等。\"), \"\\n\", React.createElement(_components.p, null, \"可以想见，对于使用 HTTPS 协议的服务器，如果能从第一次开始就直接以 HTTPS 协议建立连接，跳过 HTTP + 301 重定向的步骤，便可以避免这个潜在风险了。那么，浏览器该如何知道对于哪些网站应该使用 HTTP 协议，哪些网站应该建立 HTTPS 请求呢？\"), \"\\n\", React.createElement(_components.p, null, \"这就不得不提到 \", React.createElement(_components.strong, null, \"HSTS\"), \"（HTTP Strict-Transport-Security，即 HTTP 严格传输安全）了，它是一个 Web 安全策略机制。其最核心的实现，是一个 HTTP 响应头，正是它让浏览器得知，接下来的一段时间（通常设置为 1 年），对这个域名的访问都应基于 HTTPS 协议。\"), \"\\n\", React.createElement(_components.p, null, \"例如，当浏览器通过 HTTP/HTTPS 协议访问某网站，返回的响应头可能包括一项：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"plaintext\\\"><pre class=\\\"language-plaintext\\\"><code class=\\\"language-plaintext\\\">Strict-Transport-Security: max-age=31536000; includeSubDomains</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"浏览器就知道，在接下来的 31536000 秒（即 1 年）内，对该域名，以及子域名（includeSubDomains）的后续通信应该强制使用 HTTPS 进行，直到过了有效期（max-age）为止。每次相应都将刷新 HSTS 有效期；如果过了有效期，只要进行一次新的通信，又会开启一年的 HSTS 有效期。\"), \"\\n\", React.createElement(_components.h3, null, \"HSTS 加强浏览器连接保护\"), \"\\n\", React.createElement(_components.p, null, \"在 HSTS 出现以前，当浏览器发现当前网站的证书出现错误，或浏览器与服务器之间的通信不安全，或无法建立 HTTPS 连接时，浏览器会告警用户，但又允许用户继续不安全的访问。\"), \"\\n\", React.createElement(_components.p, null, \"从理论上来说，当出现此类告警时，用户应该提高警惕，终止后续的操作。然后现实是，绝大多数用户即使遇到这样的告警，也仍会继续访问。\"), \"\\n\", React.createElement(_components.p, null, \"HSTS 的出现使得事情出现了转机。对于启用了 HSTS 保护的网站，如果浏览器发现连接不安全，它将仅仅告警用户，\", React.createElement(_components.strong, null, \"不再\"), \"提供继续访问的选择，进而避免后续的安全问题。\"), \"\\n\", React.createElement(_components.h3, null, \"HSTS 的 Preload List 机制\"), \"\\n\", React.createElement(_components.p, null, \"很容易发现，在第一次通过 URL 访问网站时（或浏览器没有当前网站的 HSTS 信息时），仍会默认使用明文的 HTTP 协议进行请求，然后重定向切换到 HTTPS，并刷新浏览器中的 HSTS 信息。这样，用户还是有受到中间人攻击的风险。\"), \"\\n\", React.createElement(_components.p, null, \"针对这种情况，HSTS 的应对方法是：在浏览器中内置一个列表，即 Preload List，在这个列表中的域名，无论何种情况，浏览器将\", React.createElement(_components.strong, null, \"只使用\"), \" HTTPS 发起连接。\"), \"\\n\", React.createElement(_components.p, null, \"这个列表由 Google Chromium 维护。\"), \"\\n\", React.createElement(_components.h3, null, \"加入到 HSTS Preload List\"), \"\\n\", React.createElement(_components.p, null, \"为了加入到此列表，您的站点必须满足以下需求：\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"提供有效的证书。\"), \"\\n\", React.createElement(_components.li, null, \"如果监听了 80 端口，则需要在同一主机上从 HTTP 重定向到 HTTPS。\"), \"\\n\", React.createElement(_components.li, null, \"为所有子域名提供 HTTPS 服务。\"), \"\\n\", React.createElement(_components.li, null, \"在根域名的 HTTP 响应头中添加 HSTS header。\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"您可以在 \", React.createElement(_components.a, {\n    href: \"https://hstspreload.org/\"\n  }, \"HSTS Preload List 官网\"), \"提交申请，或是了解更多相关内容。\"), \"\\n\", React.createElement(_components.h2, null, \"通过 DNS 获取 IP 地址\"), \"\\n\", React.createElement(_components.p, null, \"TCP/IP 是能够在多个不同网络间实现信息传输的\", React.createElement(_components.strong, null, \"协议簇\"), \"，它不仅仅指的是 TCP 和 IP 两个协议，而是指一个由 HTTP、HTTPS、FTP、SMTP、TCP、UDP 和 IP 等协议构成的协议簇。TCP/IP 定义了电子设备如何连入因特网，以及数据如何在它们之间传输的标准。\"), \"\\n\", React.createElement(_components.p, null, \"在 TCP/IP 概念层模型中，计算机网络体系结构自上而下分成了应用层、传输层、网络层和链路层。其中，HTTP 协议属于应用层。当客户端发出 HTTP 请求后，报文接下来将来到传输层和网络层进行处理。\"), \"\\n\", React.createElement(_components.p, null, \"浏览器会随机选用一个大于 1023（且 \", \"<\", \"= 65535）的端口号，作为当前页面通讯使用的端口，以及传输层的 TCP 协议头的 Source Port 部分，这很容易实现。\"), \"\\n\", React.createElement(_components.p, null, \"但问题是，运输层的 IP 协议需要\", React.createElement(_components.strong, null, \"目标网站的 IP 地址\"), \"才能工作，而现在浏览器只有 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">https://lolipopj.github.io</code>\"\n    }\n  }), \" 这个 URL 链接，它完全无法理解。\"), \"\\n\", React.createElement(_components.p, null, \"因此，浏览器将首先联系\", React.createElement(_components.strong, null, \"域名系统 DNS\"), \"（Domain Name System），一个将域名和 IP 地址相互映射的分布式数据库。我们可以通过 DNS 来查询一串 URL 链接所对应的 IP 地址。\"), \"\\n\", React.createElement(_components.p, null, \"DNS 由客户端和服务端两部分组成，其中，客户端发起查询请求，例如查询域名的 IP 地址，服务端则负责回答域名的真正 IP 地址。那么现在，DNS 客户端发起查询 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">github.io</code>\"\n    }\n  }), \" 域名 IP 地址的请求，可能经过如下步骤：\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"首先检查本机的 DNS 缓存，没有该域名的 IP 地址信息！\"), \"\\n\", React.createElement(_components.li, null, \"再查看本地硬盘中的 Host 文件，也没有！\"), \"\\n\", React.createElement(_components.li, null, \"请求本地域名服务器或公共域名服务器记录的信息。这里也没有！\"), \"\\n\", React.createElement(_components.li, null, \"此时，本地域名服务器或公共域名服务器会将查询请求发送给\", React.createElement(_components.strong, null, \"根域名服务器\"), \"（Root name server）。根域名服务器会根据请求的 URL，将其对应的\", React.createElement(_components.strong, null, \"顶级域名服务器\"), \"（Top-level domain server）的地址返回给本地域名服务器或公共域名服务器。例如，这里我们查询网址的顶级域名是 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">.io</code>\"\n    }\n  }), \"，则将此域名对应的顶级域名服务器的 IP 地址返回回来。\"), \"\\n\", React.createElement(_components.li, null, \"接着，本地域名服务器或公共域名服务器会将查询请求发送给刚刚得到的顶级域名服务器。顶级域名服务器将返回管理 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">github.io</code>\"\n    }\n  }), \" 的\", React.createElement(_components.strong, null, \"权威域名服务器\"), \"的 IP 地址，例如 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">185.199.110.153</code>\"\n    }\n  }), \"。继续请求此权威域名服务器，如果得知 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">lolipopj.github.io</code>\"\n    }\n  }), \" 为此域名下的 A 记录，那么此 IP 地址即为所求。\"), \"\\n\", React.createElement(_components.li, null, \"查询的 IP 地址结果将缓存到本机以及本地域名服务器或公共域名服务器，用户下次查询时可以直接使用。\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"通常情况下，大型网站都会返回 CNAME 记录，传递给\", React.createElement(_components.a, {\n    href: \"#%E5%85%A8%E5%B1%80%E6%B5%81%E9%87%8F%E7%AE%A1%E7%90%86-gtm\"\n  }, \"全局流量管理 GTM 服务\"), \"，递归解析器将执行全新的 DNS 查找。通过 GTM 服务的负载均衡机制等，可以帮助用户找到最适合自己的访问的服务器 IP 地址；此外，大多数网站会做 CDN 缓存，GTM 服务也可以帮助用户找到最适合自己的 CDN 缓存服务器。\"), \"\\n\", React.createElement(_components.p, null, \"但无论如何，老天爷，浏览器可算是知道我博客的 IP 地址了。\"), \"\\n\", React.createElement(_components.h3, null, \"递归解析器\"), \"\\n\", React.createElement(_components.p, null, \"也称为 “DNS 解析器”。\"), \"\\n\", React.createElement(_components.p, null, \"递归解析器是 DNS 查询中的第一站。递归解析器作为客户端与 DNS 域名服务器的中间人。从 Web 客户端收到 DNS 查询后，递归解析器将使用缓存的数据进行响应，或者将向根域名服务器发送请求，接着向顶级域名服务器发送另一个请求，然后向权威域名服务器发送最后一个请求。收到来自包含已请求 IP 地址的权威域名服务器的响应后，递归解析器将向客户端发送响应。\"), \"\\n\", React.createElement(_components.p, null, \"大多数用户使用他们的 ISP 提供的递归解析器，即本地域名服务器。但也可以指定公共域名服务器作为递归解析器，如 Google 的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">8.8.8.8</code>\"\n    }\n  }), \" 或 Cloudflare 的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">1.1.1.1</code>\"\n    }\n  }), \" 等。\"), \"\\n\", React.createElement(_components.h3, null, \"根域名服务器\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://www.ruanyifeng.com/blog/2018/05/root-domain.html\"\n  }, \"「根域名的知识」\"), \"，2018-05-09\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"根域名服务器中记录了各个顶级域名服务器的 IP 地址信息。\"), \"\\n\", React.createElement(_components.p, null, \"由于早期的 DNS 查询结果是一个 512 字节的 UDP 数据包，这个包最多容纳 13 个服务器的地址，因此规定全世界有 13 台根域名服务器，编号从 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">a.root-servers.net</code>\"\n    }\n  }), \" 到 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">m.root-servers.net</code>\"\n    }\n  }), \"。\"), \"\\n\", React.createElement(_components.p, null, \"为了保证根域名服务器的可用性，每台服务器又有多个节点。根据\", React.createElement(_components.a, {\n    href: \"https://root-servers.org/\"\n  }, \"此网站\"), \"的统计，截止 2021 年 07 月 12 日，全球一共有 1403 台根域名服务器实例。\"), \"\\n\", React.createElement(_components.p, null, \"当需要通过根域名服务器查询顶级域名服务器时，进行请求的 DNS 服务器会向这 13 台服务器\", React.createElement(_components.strong, null, \"同时\"), \"发出请求，哪一个返回的信息先到达，则使用哪一个查询得到的结果。\"), \"\\n\", React.createElement(_components.h3, null, \"顶级域名服务器\"), \"\\n\", React.createElement(_components.p, null, \"也称为 “TLD 域名服务器”。\"), \"\\n\", React.createElement(_components.p, null, \"顶级域名服务器负责管理在该顶级域名下注册的所有二级域名。或者说，顶级域名服务器中记录了属于它的各个权威域名服务器的 IP 地址。\"), \"\\n\", React.createElement(_components.h3, null, \"权威域名服务器\"), \"\\n\", React.createElement(_components.p, null, \"权威域名服务器是保存 DNS 名称记录（包括 A、AAAA 和 CNAME）的服务器。\"), \"\\n\", React.createElement(_components.p, null, \"权威域名服务器包含特定于其服务域名的信息。它可为递归解析器提供在 DNS A 记录中找到的服务器的 IP 地址；或者如果该域具有 CNAME 记录，它将为递归解析器提供一个别名域，这时递归解析器将必须执行全新 DNS 查找，以便从权威域名服务器获取记录（通常为包含 IP 地址的 A 记录）。\"), \"\\n\", React.createElement(_components.h3, null, \"DNS 支持 TCP 和 UDP 协议\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://draveness.me/whys-the-design-dns-udp-tcp/\"\n  }, \"「为什么 DNS 使用 UDP 协议」\")), \"\\n\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"实际上，DNS 不仅使用了 UDP 协议，也使用了 TCP 协议，不过在具体介绍今天的问题之前，我们还是要对 DNS 协议进行简单的介绍：DNS 查询的类型不止包含 A 记录、CNAME 记录等常见查询，还包含 AXFR 类型的特殊查询，这种特殊查询主要用于 \", React.createElement(_components.strong, null, \"DNS 区域传输\"), \"，它的作用就是在多个命名服务器之间快速迁移记录，由于查询返回的响应比较大，所以会使用 TCP 协议来传输数据包。\\n……\\n我们可以简单总结一下 DNS 的发展史，1987 年的 RFC1034 和 RFC1035 定义了最初版本的 DNS 协议，刚被设计出来的 DNS 就会同时使用 UDP 和 TCP 协议，对于绝大多数的 DNS 查询来说都会使用 UDP 数据报进行传输，TCP 协议只会在区域传输的场景中使用，其中 UDP 数据包只会传输最大 512 字节的数据，多余的会被截断；两年后发布的 RFC1123 预测了 DNS 记录中存储的数据会越来越多，同时也第一次显式的指出了\", React.createElement(_components.strong, null, \"发现 UDP 包被截断时应该通过 TCP 协议重试\"), \"。\\n过了将近 20 年的时间，由于互联网的发展，人们发现 IPv4 已经不够分配了，所以\", React.createElement(_components.strong, null, \"引入了更长的 IPv6\"), \"，DNS 也在 2003 年发布的 RFC3596 中进行了协议上的支持；随后发布的 RFC5011 和 RFC6376 增加了在鉴权和安全方面的支持，但是也带来了巨大的 DNS 记录，UDP 数据包被截断变得非常常见。\\nRFC6891 提供的 DNS 扩展机制能够帮助我们在一定程度上解决大数据包被截断的问题，减少了使用 TCP 协议进行重试的需要，但是由于\", React.createElement(_components.strong, null, \"最大传输单元的限制\"), \"，这并不能解决所有问题。\\nDNS 出现之后的 30 多年，RFC7766 才终于提出了使用 TCP 协议作为主要协议来解决 UDP 无法解决的问题，TCP 协议也不再只是一种重试时使用的机制，随后出现的 DNS over TLS 和 DNS over HTTP 也都是对 DNS 协议的一种补充。\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"全局流量管理 GTM\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://help.aliyun.com/document_detail/189591.html?spm=a2c4g.11186623.6.640.3198229dgDSHXU\"\n  }, \"「全局流量管理产品原理」\"), \"，2020-12-11，阿里云\"), \"\\n\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"全局流量管理（GTM）支持用户就近接入、高并发负载均衡、健康检查与故障切换，可以帮助企业在短时间内构建同城多活与异地灾备的容灾架构。\\nGTM 属于 DNS 级别的服务，使用 DNS 向向用户返回特定的服务地址，然后客户端用户直接连接到服务地址。\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"当递归解析器接收到响应的 CNAME 结果后，会再执行一遍 DNS 查找过程，得到 GTM 服务器的 IP 地址。递归解析器向 GTM 服务器发送请求，GTM 收到请求后，会根据运行机制和预配置策略向递归解析器响应最终应用服务的 IP 地址。\"), \"\\n\", React.createElement(_components.p, null, \"递归解析器将最后一次查询得到的 IP 地址作为访问 URL 的最终地址，返回给浏览器，同时缓存到本地。浏览器使用此 IP 地址直接向应用服务器发起网络连接，开始进行业务通信。\"), \"\\n\", React.createElement(_components.h2, null, \"通过 ARP 获取 MAC 地址\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://zh.wikipedia.org/wiki/%E5%9C%B0%E5%9D%80%E8%A7%A3%E6%9E%90%E5%8D%8F%E8%AE%AE\"\n  }, \"「地址解析协议」\"), \"，Wikipedia\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://blog.51cto.com/chenxinjie/1961255\"\n  }, \"「图解 ARP 协议（四）代理 ARP：善意的欺骗」\"), \"，2017-09-01\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"经过传输层和网络层封装后的包含有 HTTP 报文的数据包，现在来到了链路层。在这里，还将为它加上 MAC 头部。\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"在\", React.createElement(_components.strong, null, \"以太网协议\"), \"（在点对点协议 PPP 中，知道 IP 地址就可以进行通信；本文的讨论基于以太网协议）中规定，同一局域网中的一台主机要和另一台主机进行直接通信，必须要知道目标主机的 MAC 地址……另外，当发送主机和目的主机不在同一个局域网中时，即便知道对方的 MAC 地址，两者也不能直接通信，必须经过\", React.createElement(_components.strong, null, \"路由转发\"), \"才可以。\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"如何将已知的目标主机的 IP 地址，转换为数据链路传输需要的 MAC 地址？在 IPv4 中，这通过地址解析协议 ARP（Address Resolution Protocol）实现；在 IPv6 中，使用邻居发现协议 NDP（Neighbor Discovery Protocol）代替 ARP。\"), \"\\n\", React.createElement(_components.p, null, \"以 ARP 协议为例，它通过 ARP 请求和 ARP 响应报文确定 MAC 地址。ARP 请求报文是一种广播报文，\", React.createElement(_components.strong, null, \"局域网内\"), \"的所有主机都可以收到。当某一个主机发现请求报文中的 IP 地址为自己的 IP 地址，就会发送 ARP 响应报文给发出请求报文的主机。\"), \"\\n\", React.createElement(_components.p, null, \"大多数情况下，我们需要与不在同一个局域网的主机通信，但由于每个网段都是独立的广播域，没法直接向互联网上的其它主机发送广播报文，该怎么办？网关设备就在这里大显身手了。\"), \"\\n\", React.createElement(_components.p, null, \"当主机\", React.createElement(_components.strong, null, \"已设置网关\"), \"时，主机设置的网关设备将接收到 ARP 请求报文，以路由器为例：路由器发现 ARP 请求报文中的 IP 地址不属于当前局域网，就把自己的 MAC 地址响应给请求主机。后续请求主机直接使用这个 MAC 地址，将数据包传输给路由器。而数据包通过路由器的\", React.createElement(_components.strong, null, \"路由转发\"), \"功能，最终顺利抵达互联网上对应 IP 地址的主机。\"), \"\\n\", React.createElement(_components.p, null, \"当主机\", React.createElement(_components.strong, null, \"未设置网关\"), \"时，可以使用 \", React.createElement(_components.strong, null, \"代理 ARP\"), \"（ARP Proxy）机制。局域网内的所有网关设备将接收到 ARP 请求报文，还是以路由器为例：路由器发现 ARP 请求报文中的 IP 地址不属于当前局域网，而是属于自己\", React.createElement(_components.strong, null, \"已知的\"), \"另一个网段上的某台主机，就将自己作为代理，把自己的 MAC 地址响应给请求主机。后续请求主机直接使用这个 MAC 地址，通过路由器代理，就可以访问到局域网外的目标主机了。与 ARP 相比，代理 ARP 有如下局限：\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"代理 ARP 需要有目标网关的信息；\"), \"\\n\", React.createElement(_components.li, null, \"代理 ARP 每次访问新的外网地址时，都需要发送一次 ARP 请求；\"), \"\\n\", React.createElement(_components.li, null, \"代理 ARP 受限于沿途网络设备。例如部分路由器可能不支持此功能，而支持此功能的路由器在默认情况下一般没有启用代理 ARP。\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"在跨网段通信中，无论使用 ARP 还是代理 ARP，发出 ARP 请求的主机总会收到网关的 MAC 地址作为响应。\"), \"\\n\", React.createElement(_components.p, null, \"因此，在实际网络中，无论是局域网内通信，还是跨网段通信，绝大多数情况下还是使用的是 ARP，而非代理 ARP。代理 ARP 是对 ARP 的补充，是 ARP 的拓展使用。\"), \"\\n\", React.createElement(_components.p, null, \"言归正传，假如我们使用的是 IPv4 网络，通过 ARP 协议，我们将收到主机设置的网关设备的 MAC 地址，这样我们就顺利地为数据包添加了 MAC 头部。现在，完整的数据包就可以从主机传输到网关设备上，再驶入互联网的快车道，最终抵达服务器了。\"), \"\\n\", React.createElement(_components.h3, null, \"RARP 和 IARP\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://zhuanlan.zhihu.com/p/29081692\"\n  }, \"「图解 ARP 协议（六）RARP 与 IARP：被遗忘的兄弟协议」\"), \"，2017-09-05\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"RARP 即反向 ARP（Reverse ARP），功能与 ARP 恰巧相反，用来实现 MAC 地址到 IP 地址的映射。\"), \"\\n\", React.createElement(_components.p, null, \"一个简单的例子是，当一台主机刚刚接入网络，这时它还没有局域网分配的内网 IP 地址。通过 RARP，它可以向局域网发送广播，广播包含自己的 MAC 地址，如果局域网内有 RARP 服务器且\", React.createElement(_components.strong, null, \"记录有此 MAC 地址的映射 IP 地址\"), \"，那么它将接收到 RARP 响应，于是主机就拥有了自己的 IP 地址。\"), \"\\n\", React.createElement(_components.p, null, \"RARP 有这些特性：\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"RARP 服务器必须提前绑定 MAC 地址和 IP 地址。如果没有提前绑定，则服务器不会发回响应；\"), \"\\n\", React.createElement(_components.li, null, \"RARP 服务器只能给请求的主机分配 IP 地址，不包括网关、DNS 等其它信息。\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"在后来，有了启动协议 BOOTP，又有了现在最常用的\", React.createElement(_components.a, {\n    href: \"https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol\"\n  }, \"动态主机设置协议 DHCP\"), \"。\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"RARP 是一种逝去的地址分配技术，是 BOOTP 和 DHCP 的鼻祖，目前我们的电脑基本不会用到这个协议，只有部分无盘工作站等情况需要用到。\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"IARP 即逆向 ARP（Inverse ARP），在帧中继网络（广域网）中实现 DLCI 到 IP 地址的映射。在帧中继网络中，它的功能\", React.createElement(_components.strong, null, \"类似于\"), \"以太网中 MAC 地址到 IP 地址的映射。\"), \"\\n\", React.createElement(_components.p, null, \"随着广域网技术的更迭，帧中继技术正慢慢被被其它技术所替代。因此 IARP 作为帧中继技术中的一环，在现实中的使用也愈来愈少。\"), \"\\n\", React.createElement(_components.h2, null, \"使用 TLS 与服务器建立安全的 TCP 连接\"), \"\\n\", React.createElement(_components.p, null, \"在发送包含 HTTP 报文的数据包之前，客户端还要先通过三次握手与服务器建立 TCP 连接，这是为了保证数据传输的\", React.createElement(_components.strong, null, \"可靠性\"), \"。在前面，我们已经得到了服务器的 MAC 地址，因此包含建立 TCP 连接请求报文的数据包可以顺利发送到服务器。\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"TCP 第一次握手，客户端主动向服务器发送 TCP 请求报文。设置其首部：\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">SYN = 1, seq = x</code>\"\n    }\n  }), \"。其中，x 和下面步骤中的 y 为随机值。\"), \"\\n\", React.createElement(_components.li, null, \"TCP 第二次握手，服务器监听请求，当接收到客户端的请求报文时，若同意连接请求，则发回确认报文。设置其首部：\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">SYN = 1, ACK = 1, ack = x + 1, seq = y</code>\"\n    }\n  }), \"。\"), \"\\n\", React.createElement(_components.li, null, \"TCP 第三次握手，客户端收到确认报文，通知上层应用（即我们的浏览器）连接已建立，并向服务器发送确认报文。设置其首部：\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ACK = 1, ack = y + 1</code>\"\n    }\n  }), \"。服务器接收到确认报文后，也通知其上层应用连接已建立。\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"由于前面我们提到的 HSTS 机制，我们的 HTTP 请求将基于 HTTPS 协议。严格来说，HTTPS 并非应用层的一种新协议，它只是将 HTTP 协议的\", React.createElement(_components.strong, null, \"通信接口\"), \"部分使用\", React.createElement(_components.strong, null, \"传输层安全性协议 TLS\"), \"（Transport Layer Security）代替罢了。通常，HTTP 直接与 TCP 通信。当使用 TLS 时，HTTP 先与 TLS 通信，再由 TLS 与 TCP 通信。\"), \"\\n\", React.createElement(_components.p, null, \"在这种情况下，为了保证数据传输的\", React.createElement(_components.strong, null, \"安全性\"), \"，客户端还要与服务器协商 TLS 协议参数，这个过程通常称为 TLS 握手。在 TLS 1.0, 1.1 及 1.2 版本中，握手有四次；而在 TLS 1.3 版本中，握手只需要三次。TLS 握手是在 TCP 连接建立之后进行的。\"), \"\\n\", React.createElement(_components.p, null, \"以 \", React.createElement(_components.a, {\n    href: \"https://datatracker.ietf.org/doc/html/rfc8446\"\n  }, \"TLS 1.3 协议\"), \"为例，握手过程如下所示：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"plaintext\\\"><pre class=\\\"language-plaintext\\\"><code class=\\\"language-plaintext\\\">       Client                                           Server\\n\\nKey  ^ ClientHello\\nExch | + key_share*\\n     | + signature_algorithms*\\n     | + psk_key_exchange_modes*\\n     v + pre_shared_key*       -------->\\n                                                  ServerHello  ^ Key\\n                                                 + key_share*  | Exch\\n                                            + pre_shared_key*  v\\n                                        {EncryptedExtensions}  ^  Server\\n                                        {CertificateRequest*}  v  Params\\n                                               {Certificate*}  ^\\n                                         {CertificateVerify*}  | Auth\\n                                                   {Finished}  v\\n                               &lt;--------  [Application Data*]\\n     ^ {Certificate*}\\nAuth | {CertificateVerify*}\\n     v {Finished}              -------->\\n       [Application Data]      &lt;------->  [Application Data]\\n\\n              +  Indicates noteworthy extensions sent in the\\n                 previously noted message.\\n\\n              *  Indicates optional or situation-dependent\\n                 messages/extensions that are not always sent.\\n\\n              {} Indicates messages protected using keys\\n                 derived from a [sender]_handshake_traffic_secret.\\n\\n              [] Indicates messages protected using keys\\n                 derived from [sender]_application_traffic_secret_N.</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"这样，我们的客户端和服务器建立了基于 TLS 1.3 的安全 TCP 连接，是时候传输数据了！\"), \"\\n\", React.createElement(_components.h3, null, \"TLS 与 SSL\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://zh.wikipedia.org/wiki/%E5%82%B3%E8%BC%B8%E5%B1%A4%E5%AE%89%E5%85%A8%E6%80%A7%E5%8D%94%E5%AE%9A\"\n  }, \"「传输层安全性协议」\"), \"，Wikipedia\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"在日常使用中，我们经常会说 SSL 或 TLS/SSL，那么 TLS 和 SSL 之间有什么关系呢？\"), \"\\n\", React.createElement(_components.p, null, \"原来，\", React.createElement(_components.strong, null, \"安全套接层 SSL\"), \"（Secure Sockets Layer） 是 TLS 的前身。TLS 基于 SSL 3.0 协议，是 SSL 协议标准化后的协议名。由于 SSL 3.0 设计中的缺陷，在 2015 年 6 月，\", React.createElement(_components.a, {\n    href: \"https://datatracker.ietf.org/doc/html/rfc7568\"\n  }, \"RFC 7568\"), \" 宣布弃用 SSL 3.0。\"), \"\\n\", React.createElement(_components.p, null, \"目前最新的 TLS 1.3 协议在 2018 年 8 月发表的 \", React.createElement(_components.a, {\n    href: \"https://datatracker.ietf.org/doc/html/rfc8446\"\n  }, \"RFC 8446\"), \" 中定义。而较老的 TLS 1.0 和 TLS 1.1 也已于 2021 年 3 月，在 \", React.createElement(_components.a, {\n    href: \"https://datatracker.ietf.org/doc/html/rfc8996\"\n  }, \"RFC 8996\"), \" 中宣告被弃用。\"), \"\\n\", React.createElement(_components.p, null, \"结论是，理论上我们现在用的加密协议大抵都是 TLS，在讨论中直接使用 TLS 即可。\"), \"\\n\", React.createElement(_components.h3, null, \"TLS 1.3 的进步\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://blog.cloudflare.com/rfc-8446-aka-tls-1-3/\"\n  }, \"「A Detailed Look at RFC 8446 (a.k.a. TLS 1.3)」\"), \"，2018-08-11\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"TLS 已经存在相当多的问题：例如代码缺乏测试，稳健性较低；存在许多设计缺陷，出现很多漏洞等。\"), \"\\n\", React.createElement(_components.p, null, \"在近些年来，互联网上一直存在一个主要趋势，即全面启用 HTTPS。这可以保护用户的安全，但会导致连接速度变慢。自 TLS 标准化以来，在发送加密数据之前，客户端到服务器的握手请求会进行两次往返（或者会话恢复连接时进行一次往返）。与单独的 HTTP 相比，HTTPS 中 TLS 握手的额外成本可能带来潜在的问题，并对以性能为中心的应用产生负面影响。在 \", React.createElement(_components.a, {\n    href: \"https://datatracker.ietf.org/doc/html/rfc5246\"\n  }, \"TLS 1.2 协议\"), \"中，握手过程如下所示：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"plaintext\\\"><pre class=\\\"language-plaintext\\\"><code class=\\\"language-plaintext\\\">Client                                                Server\\n\\nClientHello                   -------->\\n                                                 ServerHello\\n                                                Certificate*\\n                                          ServerKeyExchange*\\n                                         CertificateRequest*\\n                              &lt;--------      ServerHelloDone\\nCertificate*\\nClientKeyExchange\\nCertificateVerify*\\n[ChangeCipherSpec]\\nFinished                      -------->\\n                                          [ChangeCipherSpec]\\n                              &lt;--------             Finished\\nApplication Data              &lt;------->     Application Data\\n\\n* Indicates optional or situation-dependent messages that are not\\nalways sent.</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"IETF 对 TLS 1.2 的过时设计和两次往返开销不满意，着手定义新版本的 TLS，即 TLS 1.3，旨在解决如下的主要问题：\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"减少握手延迟；\"), \"\\n\", React.createElement(_components.li, null, \"加密更多的握手信息；\"), \"\\n\", React.createElement(_components.li, null, \"提高对跨协议攻击的恢复能力；\"), \"\\n\", React.createElement(_components.li, null, \"删除遗留的功能。\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"在过去的二十年里，对密码学的研究帮助人们学到更多关于如何编写\", React.createElement(_components.strong, null, \"更安全的加密协议\"), \"的知识。TLS 1.3 的设计目标之一就是删除潜在的危险元素，纠正过去的错误设计。例如：\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"移除 RSA 密钥交换模式\"), \"，仅保留 Diffie-Hellman（下简称 DH）密钥协议。RSA 模式存在两个严重的问题，一是它不是前向加密（forward secret），意味着如果有人记录下加密的会话，如果在某天获取到服务器的私钥，就可以对会话进行破解。二是存在难以修复的漏洞，可以参见 \", React.createElement(_components.a, {\n    href: \"https://robotattack.org/\"\n  }, \"ROBOT 攻击\"), \"。删除 RSA 模式，只保留 DH 密钥协议，带来了一些性能优势，我们在后面进行讨论。\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"提供更少的可选项\"), \"。在密码学中，提供太多的选项可能导致更多的错误。这个原则在选择 DH 密钥协议的参数时尤为明显。该协议的安全性取决于选择的 DH 参数值，它一方面要为较大的值，另一方面需要具有某些\", React.createElement(_components.a, {\n    href: \"https://arstechnica.com/information-technology/2016/01/high-severity-bug-in-openssl-allows-attackers-to-decrypt-https-traffic/\"\n  }, \"正确的数学属性\"), \"。在以前版本的 TLS 中，DH 参数由参与者决定；而在 TLS 1.3 版本中，则将参数限制为已知安全的值，减少用户的可选项。\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"更多关于安全性的改进可以访问该小节开头的\", React.createElement(_components.a, {\n    href: \"https://blog.cloudflare.com/rfc-8446-aka-tls-1-3/\"\n  }, \"参考博客\"), \"。下面我们来看看 TLS 1.3 在\", React.createElement(_components.strong, null, \"性能表现上的优势\"), \"。\"), \"\\n\", React.createElement(_components.p, null, \"在 DH 密钥协议中，客户端和服务器都从创建公钥-私钥对开始，然后交换各自的公钥，并根据自己的私钥和对方的公钥生成最终的密钥。最终的密钥自始至终都不会通过网络传输，DH 算法通过数学定律保证双方算出的结果一致。接下来，客户端和服务器就可以使用这个密钥对数据进行加密和解密。\"), \"\\n\", React.createElement(_components.p, null, \"TLS 1.3 使用这样一个更简单的密钥协商模式和一组更少的密钥协商选项，这意味着每个连接都将使用基于 DH 的密钥协议，服务器支持的 DH 参数更容易被猜到。有限的选择使得客户端可以在第一条消息中就发送自己的公钥，而无需等待服务器确认支持的类型。\"), \"\\n\", React.createElement(_components.p, null, \"在服务器不支持客户端使用协商选项的罕见情况下，服务器可以发送 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">HelloRetryRequest</code>\"\n    }\n  }), \" 的消息，让客户端知道自己支持哪些协商选项组。\"), \"\\n\", React.createElement(_components.p, null, \"作为小结：\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"TLS 1.3 is a modern security protocol built with modern tools like formal analysis that retains its backwards compatibility. It has been tested widely and iterated upon using real world deployment data. It's a cleaner, faster, and more secure protocol ready to become the de facto two-party encryption protocol online.\\nIt is one the best recent examples of how it is possible to take 20 years of deployed legacy code and change it on the fly, resulting in a better internet for everyone. TLS 1.3 has been debated and analyzed for the last three years (2015 - 2018) and it's now ready for prime time.\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"对称密钥加密，非对称密钥加密与混合加密\"), \"\\n\", React.createElement(_components.p, null, \"简单来说，在\", React.createElement(_components.strong, null, \"对称密钥加密\"), \"中，对数据的加密和解密都使用同一个密钥。相较于非对称密钥加密，它的速度更快；但是由于密钥在传输过程中容易被获取，因此其安全性较低。\"), \"\\n\", React.createElement(_components.p, null, \"在\", React.createElement(_components.strong, null, \"非对称密钥加密\"), \"（或公开密钥加密）中，使用一对密钥进行加密和解密，分别为公开密钥和私有密钥。公开密钥所有人都可以获得，客户端使用公开密钥对数据进行加密，服务器使用私有密钥对数据进行解密。同样，服务器对响应的数据使用私有密钥加密，客户端则可以通过公开密钥进行解密。相较于对称密钥加密，只要保管好私有密钥，就能保证客户端传输的消息不被破解，因此它的安全性更高；由于算法和过程更为繁琐，因此其速度较慢。\"), \"\\n\", React.createElement(_components.p, null, \"HTTPS 采用的是\", React.createElement(_components.strong, null, \"混合加密\"), \"机制——在 TLS 1.3 以前，客户端首先使用服务器提供的公钥，加密一个随机值，然后将它传输给服务器。服务器使用私钥解密，获得随机值，然后使用与客户端相同的密钥生成算法，基于这个随机值和之前握手中创建的另外两个随机值，生成与客户端相同的密钥，之后客户端和服务器就可以使用这把对称密钥进行通信了。在 TLS 1.3 中，基于 DH 密钥协议，不再赘述。这样，客户端和服务器之间的通信就兼顾了对称密钥加密的高效性和非对称密钥加密的安全性。\"), \"\\n\", React.createElement(_components.h2, null, \"欢迎访问我的博客\"), \"\\n\", React.createElement(_components.p, null, \"现在，浏览器知道了已经与远方的服务器建立好了安全可靠的传输通道，于是将 HTTP 请求信息打包好，传输到服务器上的 443 端口。服务器使用密钥解密获得其中的信息，发现是请求我博客的 HTTP 报文，遂转发给相应的 HTTP 服务。最终将我们所需的 HTML, CSS, JS 以及相关的静态文件发送给浏览器，浏览器再把它们渲染出来。\"), \"\\n\", React.createElement(_components.p, null, \"Oh, Welcome to visit my blog！\"), \"\\n\", React.createElement(_components.h2, null, \"参考文章\"), \"\\n\", React.createElement(_components.p, null, \"除了正文中特别罗列出来的网站文章，还包括：\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://www.zhihu.com/question/34873227/answer/518086565\"\n  }, \"「在浏览器地址栏输入一个 URL 后回车，背后会进行哪些技术步骤？」\"), \"，2020-03-28\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://segmentfault.com/a/1190000021000934\"\n  }, \"「上古面试题——浏览器地址栏输入后回车会发生什么」\"), \"，2019-11-14\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://segmentfault.com/a/1190000039650564\"\n  }, \"「搞懂这 9 步，DNS 访问原理就明明白白了」\"), \"，2021-03-17\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://segmentfault.com/a/1190000039406281\"\n  }, \"「DNS 查询机制」\"), \"，2021-03-13\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://www.cloudflare.com/zh-cn/learning/dns/dns-server-types/\"\n  }, \"「DNS 服务器有哪些不同类型？」\"), \"，Cloudflare\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://zhuanlan.zhihu.com/p/379015679\"\n  }, \"「36 张图详解 ARP ：网络世界没有我，你哪也别想去」\"), \"，2021-06-08\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://www.ituring.com.cn/book/1229\"\n  }, \"「图解 HTTP」\"), \"，[日]上野宣 著，于均良 译\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://ocdman.github.io/2018/11/02/%E8%AF%A6%E8%A7%A3TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%BB%A5%E5%8F%8ATLS-SSL%E6%8F%A1%E6%89%8B/\"\n  }, \"「详解 TCP 三次握手以及 TLS/SSL 握手」\"), \"，2018-11-02\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://segmentfault.com/a/1190000021559557\"\n  }, \"「HTTPS 详解二：SSL / TLS 工作原理和详细握手过程」\"), \"，2020-01-19\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/homepage/homepage/blog/posts/browser-behind-visit-url.mdx\";\nimport {Fancybox} from \"@fancyapps/ui\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport dayjs from \"dayjs\";\nimport {Link} from \"gatsby\";\nimport * as React from \"react\";\nimport Card from \"../components/card\";\nimport Category from \"../components/category\";\nimport SEO from \"../components/seo\";\nimport Tag from \"../components/tag\";\nconst FancyBoxImage = props => {\n  const {alt = \"The author is too lazy to give an alt\", src, ...restProps} = props;\n  return React.createElement(\"a\", {\n    href: src,\n    \"data-fancybox\": \"gallery\",\n    \"data-caption\": alt\n  }, React.createElement(\"img\", Object.assign({\n    src: src,\n    alt: alt\n  }, restProps)));\n};\nconst ALink = _ref => {\n  let {href = \"\", children} = _ref;\n  const isExternalHref = !(href !== null && href !== void 0 && href.startsWith(\"#\"));\n  const parsedHref = isExternalHref ? href : `#${encodeURIComponent(href.slice(1))}`;\n  return React.createElement(\"a\", {\n    href: parsedHref,\n    target: isExternalHref ? \"_blank\" : undefined,\n    rel: \"noreferrer\"\n  }, children);\n};\nconst components = {\n  a: ALink,\n  img: FancyBoxImage,\n  Card,\n  Link\n};\nconst PostTemplate = _ref2 => {\n  let {children, data} = _ref2;\n  const {mdx: {frontmatter: {title, date: dateString, updated: updatedDateString, categories, tags, timeliness}}} = data;\n  const articleRef = React.useRef(null);\n  const date = dayjs(dateString);\n  const updatedDate = updatedDateString ? dayjs(updatedDateString) : date;\n  const today = dayjs();\n  const diffDays = today.diff(updatedDate, \"days\");\n  React.useEffect(() => {\n    var _articleRef$current;\n    const optimizedImageLinks = (_articleRef$current = articleRef.current) === null || _articleRef$current === void 0 ? void 0 : _articleRef$current.querySelectorAll(\"a.gatsby-resp-image-link\");\n    optimizedImageLinks === null || optimizedImageLinks === void 0 ? void 0 : optimizedImageLinks.forEach(link => {\n      const image = link.children.item(1);\n      link.setAttribute(\"data-fancybox\", \"gallery\");\n      link.setAttribute(\"data-caption\", image.alt);\n    });\n    Fancybox.bind(\"[data-fancybox]\");\n    return () => Fancybox.unbind(\"[data-fancybox]\");\n  }, []);\n  return React.createElement(\"div\", {\n    className: \"mx-auto flex max-w-xl flex-col gap-y-12\"\n  }, React.createElement(\"div\", {\n    className: \"flex flex-col gap-4\"\n  }, (categories === null || categories === void 0 ? void 0 : categories.length) && React.createElement(Category, {\n    name: categories[0],\n    className: \"item-selectable\"\n  }), React.createElement(\"h1\", {\n    className: \"text-3xl font-bold\"\n  }, title), React.createElement(\"div\", {\n    className: \"item-secondary flex flex-col gap-2 lg:flex-row\"\n  }, dateString && React.createElement(\"span\", {\n    title: `首次发布于：${date.toString()}\\n最后更新于：${updatedDate.toString()}`\n  }, date.format(\"MM 月 DD 日 YYYY 年\")), (tags === null || tags === void 0 ? void 0 : tags.length) && React.createElement(\"div\", {\n    className: \"flex flex-1 flex-wrap gap-2 lg:before:content-['\\u2022']\"\n  }, tags.map(tag => React.createElement(Tag, {\n    key: tag,\n    name: tag,\n    className: \"item-secondary item-selectable\"\n  }))))), React.createElement(\"article\", {\n    ref: articleRef,\n    className: \"heti post-entry\"\n  }, timeliness !== false && diffDays > 365 && React.createElement(\"blockquote\", {\n    className: \"border-l-4 border-orange-400\"\n  }, \"\\u8FD9\\u662F\\u4E00\\u7BC7\", React.createElement(\"strong\", null, \"\\u6700\\u540E\\u66F4\\u65B0\\u4E8E \", diffDays, \" \\u5929\\u524D\"), \"\\u7684\\u535A\\u5BA2\\uFF0C\\u5185\\u5BB9\\u53EF\\u80FD\\u968F\\u7740\\u65F6\\u95F4\\u7684\\u63A8\\u79FB\\u800C\\u53D8\\u5F97\\u4E0D\\u518D\\u9002\\u7528\\uFF0C\\u5EFA\\u8BAE\\u60A8\\u4ED4\\u7EC6\\u8BC4\\u4F30\\u4FE1\\u606F\\u7684\\u6709\\u6548\\u6027\\u3002\"), React.createElement(MDXProvider, {\n    components: components\n  }, children)));\n};\nconst query = \"2697480803\";\nexport const Head = _ref3 => {\n  let {data} = _ref3;\n  return React.createElement(SEO, {\n    title: String(data.mdx.frontmatter.title)\n  });\n};\nPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","a","span","h2","h3","ul","li","strong","ol","blockquote","_provideComponents","components","React","href","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","_ref","children","isExternalHref","startsWith","parsedHref","encodeURIComponent","slice","target","undefined","rel","img","alt","src","restProps","Card","Link","PostTemplate","_ref2","data","mdx","frontmatter","title","date","dateString","updated","updatedDateString","categories","tags","timeliness","articleRef","dayjs","updatedDate","diffDays","diff","_articleRef$current","optimizedImageLinks","current","querySelectorAll","forEach","link","image","item","setAttribute","Fancybox","bind","unbind","className","length","Category","name","toString","format","map","tag","Tag","key","ref","MDXProvider","Head","_ref3","SEO","String","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}