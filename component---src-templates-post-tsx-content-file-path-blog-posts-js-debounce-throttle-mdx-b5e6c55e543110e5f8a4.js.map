{"version":3,"file":"component---src-templates-post-tsx-content-file-path-blog-posts-js-debounce-throttle-mdx-b5e6c55e543110e5f8a4.js","mappings":"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","sources":["webpack://homepage/./blog/posts/js-debounce-throttle.mdx","webpack://homepage/./src/templates/post.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    ol: \"ol\",\n    li: \"li\",\n    h2: \"h2\",\n    span: \"span\",\n    h3: \"h3\",\n    a: \"a\",\n    ul: \"ul\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"在前端性能优化中存在一个老生常谈的问题：如何优化\", React.createElement(_components.strong, null, \"高频率执行\"), \"的 JS 代码？例如：\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"我们为浏览器滚动 scroll 绑定了监听事件，当滚动到某位置之下后，会在浏览器右下方显示一个点击后能快速回到页面顶部的浮动按钮；而滚动回该位置之上时，浮动按钮消失。现在我们发现，用户每次使用滚轮滑动页面，都会触发很多次该事件，判断当前在该位置之上还是之下，这在一定程度上降低了前端的性能。\"), \"\\n\", React.createElement(_components.li, null, \"我们为网页添加了搜索功能，当用户输入搜索关键字后，会自动显示出搜索的结果。但是，用户每次更改输入都立即调用后端进行了搜索，彼时用户可能尚未输入完关键字，亦或是关键字输入错误需要修改。这样搜索出来的结果并非用户希望看到的，同时还降低了前端性能，浪费了大量的服务器资源。\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"针对上述列举的问题，我们应该怎么做，才能在优化前端性能的同时不至于影响到用户的体验，便是本文探讨的内容。\"), \"\\n\", React.createElement(_components.h2, null, \"函数节流\"), \"\\n\", React.createElement(_components.p, null, \"函数节流（Throttle），指在触发事件后的一定时间内绑定的函数只能执行一次。\"), \"\\n\", React.createElement(_components.p, null, \"函数节流的实现思路比较简单，例如使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">setTimeout</code>\"\n    }\n  }), \" 方法实现：由于 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">setTimeout</code>\"\n    }\n  }), \" 方法的返回值是一个正整数，表示定时器的编号，所以可以利用闭包的方法维护一个定时器编号。每次触发事件时都通过定时器编号判断当前是否有尚未到期的定时器，如果有则结束，如果没有则启用一个定时器。定时器到期后调用绑定的需要节流的函数，并设置定时器编号为空，表示可以启用一个新的定时器。代码如下：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">/**\\n * 函数节流\\n * 连续触发事件但是在 wait 毫秒中只执行一次函数\\n * @param {Function} func 执行的函数\\n * @param {Number} wait 函数节流等待的时间，单位为 ms\\n * @returns 节流执行的函数\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">throttle1</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">func<span class=\\\"token punctuation\\\">,</span> wait</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> timer<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 维护的定时器编号</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 返回节流执行的函数，可以绑定给事件</span>\\n    <span class=\\\"token keyword\\\">const</span> args <span class=\\\"token operator\\\">=</span> arguments<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 执行函数的参数</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>timer<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 当定时器不存在或已到期时</span>\\n      timer <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 启用一个新的定时器</span>\\n        timer <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">undefined</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 到期后设置定时器编号为空</span>\\n        <span class=\\\"token function\\\">func</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> args<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 到期后执行函数</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> wait<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 定时器等待 wait 毫秒后执行</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">setTimeout</code>\"\n    }\n  }), \" 的方法，可以在触发事件后的 wait 毫秒自动后执行需要节流的函数。\"), \"\\n\", React.createElement(_components.p, null, \"需要特别留意的是上述代码有这样一个细节：\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">setTimeout(() => { func.apply(this, args) }, wait)</code>\"\n    }\n  }), \"。\"), \"\\n\", React.createElement(_components.p, null, \"我们使用了箭头函数，使得 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">setTimeout</code>\"\n    }\n  }), \" 中方法内 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">this</code>\"\n    }\n  }), \" 的作用于指向绑定此节流函数的对象，而非全局 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">window</code>\"\n    }\n  }), \" 对象。\"), \"\\n\", React.createElement(_components.p, null, \"此外，如果不使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">apply()</code>\"\n    }\n  }), \" 方法而是直接调用函数的话，节流执行函数内的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">this</code>\"\n    }\n  }), \" 对象仍指向的是全局的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">window</code>\"\n    }\n  }), \" 对象，而非我们期望的绑定此节流函数的对象，因此应使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">apply()</code>\"\n    }\n  }), \" 传入 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">this</code>\"\n    }\n  }), \" 上下文对象。\"), \"\\n\", React.createElement(_components.p, null, \"对于实现传入上下文对象，\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">call()</code>\"\n    }\n  }), \" 方法的作用和 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">apply()</code>\"\n    }\n  }), \" 相同，只是前者需要将传入的参数列举出来，而后者需要将传入的参数放在一个数组中。由于我们使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">const args = arguments</code>\"\n    }\n  }), \" 获取了函数传入的参数，而 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">args</code>\"\n    }\n  }), \" 为一个数组，因此选择使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">apply()</code>\"\n    }\n  }), \" 的方法。\"), \"\\n\", React.createElement(_components.p, null, \"假如不使用箭头函数，应该在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">setTimeout</code>\"\n    }\n  }), \" 方法前获取 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">this</code>\"\n    }\n  }), \" 上下文对象，再调用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">apply()</code>\"\n    }\n  }), \" 方法，如：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">/**\\n * 函数节流非箭头函数版本\\n * 连续触发事件但是在 wait 毫秒中只执行一次函数\\n * @param {Function} func 执行的函数\\n * @param {Number} wait 函数节流等待的时间，单位为 ms\\n * @returns 节流执行的函数\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">throttle2</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">func<span class=\\\"token punctuation\\\">,</span> wait</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> timer<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> args <span class=\\\"token operator\\\">=</span> arguments<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> that <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 获取作用域上下文</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>timer<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      timer <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 使用 function () {} 的方式</span>\\n        timer <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">undefined</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token function\\\">func</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span>that<span class=\\\"token punctuation\\\">,</span> args<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 使用绑定的上下文对象</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> wait<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"如果不喜欢 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">setTimeout</code>\"\n    }\n  }), \" 方法，也可以使用时间戳的方法实现函数节流：利用闭包的方法维护一个时间戳，每次触发事件时通过当前的时间戳和维护的时间戳之间的差值获取间隔的时间。若间隔时间大于预设的等待时间，则执行函数，并设置维护的时间戳为当前的时间戳。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">/**\\n * 函数节流时间戳版本\\n * 连续触发事件但是在 wait 毫秒中只执行一次函数\\n * @param {Function} func 执行的函数\\n * @param {Number} wait 函数节流等待的时间，单位为 ms\\n * @returns 节流执行的函数\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">throttle3</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">func<span class=\\\"token punctuation\\\">,</span> wait</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> previous <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> args <span class=\\\"token operator\\\">=</span> arguments<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> now <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 获取当前的时间</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>now <span class=\\\"token operator\\\">-</span> previous <span class=\\\"token operator\\\">></span> wait<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// Date 对象在计算时会隐式转换为时间戳，当间隔时间大于等待时间时</span>\\n      previous <span class=\\\"token operator\\\">=</span> now<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 设置维护的时间为当前的时间</span>\\n      <span class=\\\"token function\\\">func</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> args<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 执行函数</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"时间戳的方法不会在等待时间后自动执行需要节流的函数，而是在下一次触发事件后才执行。应根据具体需求在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">setTimeout</code>\"\n    }\n  }), \" 和时间戳的方法之间进行选择。\"), \"\\n\", React.createElement(_components.p, null, \"特别的，我们可以设置当触发事件后立即执行需要节流的函数，再等待一定时间后才能再次执行此函数。基于 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">setTimeout</code>\"\n    }\n  }), \" 的方法，改良代码如下：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">/**\\n * 函数节流 setTimeout 改良版本\\n * 连续触发事件但是在 wait 毫秒中只执行一次函数\\n * @param {Function} func 执行的函数\\n * @param {Number} wait 函数节流等待的时间，单位为 ms\\n * @param {Boolean} immediate 触发后立即执行函数\\n * @returns 节流执行的函数\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">throttle4</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">func<span class=\\\"token punctuation\\\">,</span> wait<span class=\\\"token punctuation\\\">,</span> immediate <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> timer<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> args <span class=\\\"token operator\\\">=</span> arguments<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>timer<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>immediate<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 设置立即执行函数</span>\\n        timer <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token comment\\\">// 启用一个新的定时器</span>\\n          timer <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">undefined</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 到期后设置定时器编号为空</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> wait<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 定时器等待 wait 毫秒后执行</span>\\n        <span class=\\\"token function\\\">func</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> args<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 立即执行函数</span>\\n      <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n        timer <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n          timer <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">undefined</span><span class=\\\"token punctuation\\\">;</span>\\n          <span class=\\\"token function\\\">func</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> args<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> wait<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, null, \"函数防抖\"), \"\\n\", React.createElement(_components.p, null, \"函数防抖（Debounce），指在触发事件后的一定时间内绑定的函数只能执行一次，如果在这段时间内又触发了事件，则会重新计算时间。\"), \"\\n\", React.createElement(_components.p, null, \"从定义上来看，函数防抖像是函数节流的“强化版”：函数节流保证在一定时间内只执行一次事件绑定的函数，而函数防抖确保了事件在\", React.createElement(_components.strong, null, \"一定时间内稳定不变\"), \"后才执行绑定的函数。\"), \"\\n\", React.createElement(_components.p, null, \"函数防抖的实现思路更加简单：同样适用闭包的方法维护一个定时器编号，每次触发事件时都通过此编号取消之前的定时器，并启用一个新的定时器。定时器到期后执行需要防抖的函数，并设置定时器编号为空。\"), \"\\n\", React.createElement(_components.p, null, \"特别的，我们也可以设置当触发事件后立即执行需要防抖的函数。触发事件时，若维护的定时器编号为空，表示可以立即执行函数。此时启用一个定时器，定时器到期后设置编号为空。当存在定时器编号时，表示仍在等待时间内，不会执行需要防抖的函数，此时我们清除前一个定时器，并启用一个新的定时器。\"), \"\\n\", React.createElement(_components.p, null, \"代码如下：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">/**\\n * 函数防抖\\n * 触发事件后在 wait 毫秒内函数只执行一次；如果在 wait 毫秒内又触发了事件，则会重新计算函数执行时间\\n * @param {Function} func 需要防抖的函数\\n * @param {Number} wait 防抖的等待时间，单位为 ms\\n * @param {Boolean} immediate 触发事件后立即执行函数\\n * @returns 防抖执行的函数\\n */</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">debounce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">func<span class=\\\"token punctuation\\\">,</span> wait<span class=\\\"token punctuation\\\">,</span> immediate <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> timer<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> args <span class=\\\"token operator\\\">=</span> arguments<span class=\\\"token punctuation\\\">;</span>\\n\\n    timer <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token function\\\">clearTimeout</span><span class=\\\"token punctuation\\\">(</span>timer<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 如果定时器编号不为空，则清除定时器。此处只是清除定时器，并未清除定时器编号</span>\\n\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>immediate<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 设置立即执行函数</span>\\n      <span class=\\\"token operator\\\">!</span>timer <span class=\\\"token operator\\\">&amp;&amp;</span> <span class=\\\"token function\\\">func</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> args<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 如果定时器编号不为空，即在等待时间内，不执行函数；若为空，则执行函数</span>\\n      timer <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 启用新的定时器</span>\\n        timer <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">undefined</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 定时器到期后清空定时器编号</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> wait<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 定时器等待 wait 毫秒后执行</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 不立即执行函数</span>\\n      timer <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">setTimeout</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// 启用新的定时器</span>\\n        <span class=\\\"token function\\\">func</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">apply</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">,</span> args<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 定时器到期后执行函数</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span> wait<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 定时器等待 wait 毫秒后执行</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, null, \"在 Nuxt.js 中引入函数节流和防抖\"), \"\\n\", React.createElement(_components.p, null, \"在项目的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">plugins</code>\"\n    }\n  }), \" 目录下创建一个新的文件，例如 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">main.js</code>\"\n    }\n  }), \"。将函数节流和防抖添加为 Vue 的实例方法。如：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// plugins/main.js</span>\\n<span class=\\\"token keyword\\\">import</span> Vue <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">\\\"vue\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">throttle</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">//</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">debounce</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">//</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> main <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">install</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">Vue</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 注册到 Vue.prototype.$Main 中</span>\\n    <span class=\\\"token class-name\\\">Vue</span><span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>$Main <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n      throttle<span class=\\\"token punctuation\\\">,</span>\\n      debounce<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\nVue<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">use</span><span class=\\\"token punctuation\\\">(</span>main<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"接下来在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">nuxt.config.js</code>\"\n    }\n  }), \" 中引入：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token literal-property property\\\">plugins</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"~/plugins/main.js\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"就可以在组件中通过 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">this.$Main.throttle()</code>\"\n    }\n  }), \" 调用函数了。其中 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">this</code>\"\n    }\n  }), \" 指向了全局的 Vue 对象。\"), \"\\n\", React.createElement(_components.h2, null, \"简单的使用示例\"), \"\\n\", React.createElement(_components.h3, null, \"浏览器滚动事件\"), \"\\n\", React.createElement(_components.p, null, \"对于本博客开头提出的第一种情况，我们可以使用函数节流的方案优化前端性能。\"), \"\\n\", React.createElement(_components.p, null, \"为什么不用函数防抖？假如用户一直在滚动浏览器，那么直到用户停止滚动前，都不会执行函数判断当前滚动位置。而使用函数节流，无论用户是否一直在滚动浏览器，都会在一定时间后再次执行函数判断当前滚动位置。\"), \"\\n\", React.createElement(_components.p, null, \"基于 Vuetify UI 组件库编写 Vue 代码如下：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"vue\\\"><pre class=\\\"language-vue\\\"><code class=\\\"language-vue\\\">&lt;template&gt;\\n  &lt;v-fab-transition&gt;\\n    &lt;!-- 当窗口滚动值大于 300 时显示按钮 --&gt;\\n    &lt;v-btn\\n      v-show=&quot;scrollVal &gt; 300&quot;\\n      fixed\\n      fab\\n      dark\\n      bottom\\n      right\\n      color=&quot;white&quot;\\n      elevation=&quot;2&quot;\\n      class=&quot;mb-12&quot;\\n      @click=&quot;backToTop&quot;\\n    &gt;\\n      &lt;v-icon color=&quot;primary&quot;&gt;mdi-arrow-up&lt;/v-icon&gt;\\n    &lt;/v-btn&gt;\\n  &lt;/v-fab-transition&gt;\\n&lt;/template&gt;\\n\\n&lt;script&gt;\\nexport default {\\n  data: () =&gt; ({\\n    // 当前的窗口滚动值\\n    scrollVal: 0,\\n  }),\\n  mounted() {\\n    // 每 500 毫秒获取当前的 scrollVal 值\\n    const throttleOnScroll = this.$Main.throttle(this.onScroll, 500);\\n    // 为 window 添加滚动事件\\n    window.addEventListener(&quot;scroll&quot;, throttleOnScroll);\\n  },\\n  methods: {\\n    // 获取 window.pageYOffset 值并赋值给 scrollVal\\n    onScroll() {\\n      this.scrollVal = window.pageYOffset;\\n    },\\n    // 回到顶端\\n    backToTop() {\\n      window.scroll({\\n        top: 0,\\n        left: 0,\\n        behavior: &quot;smooth&quot;,\\n      });\\n    },\\n  },\\n};\\n&lt;/script&gt;</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">window.pageYOffset</code>\"\n    }\n  }), \" 是 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">window.scrollY</code>\"\n    }\n  }), \" 的别名，前者的浏览器兼容性较好，调用时将返回文档在垂直方向已滚动的像素值。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">onScroll()</code>\"\n    }\n  }), \" 方法可以获取当前文档在垂直方向已滚动的像素值并赋值给 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">scrollVal</code>\"\n    }\n  }), \"，而浮动按钮根据此值判断是否显示。上述代码设定当该值大于 300 时显示浮动按钮。\"), \"\\n\", React.createElement(_components.p, null, \"上述代码将 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">onScroll()</code>\"\n    }\n  }), \" 方法封装成了一个等待时间为 500 毫秒的节流函数 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">throttleOnScroll()</code>\"\n    }\n  }), \"，并将该节流函数绑定给浏览器滚动事件。\"), \"\\n\", React.createElement(_components.p, null, \"当用户滚动浏览器时，每隔 500 毫秒会获取当前已滚动的像素值，浮动按钮再根据此值判断是否显示，性能优化完成！\"), \"\\n\", React.createElement(_components.h2, null, \"Easy ride\"), \"\\n\", React.createElement(_components.p, null, \"不想自己手撸函数节流和防抖？\"), \"\\n\", React.createElement(_components.p, null, \"那就用封装好的吧：\", React.createElement(_components.a, {\n    href: \"https://lodash.com/\"\n  }, \"Lodash\"), \"，你值得拥有。\"), \"\\n\", React.createElement(_components.h2, null, \"参考资料\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://juejin.cn/post/6914591853882900488\"\n  }, \"终于搞懂：防抖和节流\"), \", 2021-01-06\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://segmentfault.com/a/1190000018445196\"\n  }, \"彻底弄懂函数防抖和函数节流\"), \", 2019-03-09\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/5\"\n  }, \"什么是防抖和节流？有什么区别？如何实现\"), \", 2019-01-23\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://www.jianshu.com/p/f9f6b637fd6c\"\n  }, \"浅析函数防抖与函数节流\"), \", 2018-08-12\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/homepage/homepage/blog/posts/js-debounce-throttle.mdx\";\nimport {Fancybox} from \"@fancyapps/ui\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport dayjs from \"dayjs\";\nimport {Link} from \"gatsby\";\nimport * as React from \"react\";\nimport Card from \"../components/card\";\nimport Category from \"../components/category\";\nimport SEO from \"../components/seo\";\nimport Tag from \"../components/tag\";\nconst FancyBoxImage = props => {\n  const {alt = \"The author is too lazy to give an alt\", src, ...restProps} = props;\n  return React.createElement(\"a\", {\n    href: src,\n    \"data-fancybox\": \"gallery\",\n    \"data-caption\": alt\n  }, React.createElement(\"img\", Object.assign({\n    src: src,\n    alt: alt\n  }, restProps)));\n};\nconst ALink = _ref => {\n  let {href = \"\", children} = _ref;\n  const isExternalHref = !(href !== null && href !== void 0 && href.startsWith(\"#\"));\n  const parsedHref = isExternalHref ? href : `#${encodeURIComponent(href.slice(1))}`;\n  return React.createElement(\"a\", {\n    href: parsedHref,\n    target: isExternalHref ? \"_blank\" : undefined,\n    rel: \"noreferrer\"\n  }, children);\n};\nconst components = {\n  a: ALink,\n  img: FancyBoxImage,\n  Card,\n  Link\n};\nconst PostTemplate = _ref2 => {\n  let {children, pageContext} = _ref2;\n  const {frontmatter: {title, date: dateString, updated: updatedDateString, categories, tags, timeliness = true}} = pageContext;\n  const articleRef = React.useRef(null);\n  const date = dayjs(dateString);\n  const updatedDate = updatedDateString ? dayjs(updatedDateString) : date;\n  const today = dayjs();\n  const diffDays = today.diff(updatedDate, \"days\");\n  React.useEffect(() => {\n    var _articleRef$current;\n    const optimizedImageLinks = (_articleRef$current = articleRef.current) === null || _articleRef$current === void 0 ? void 0 : _articleRef$current.querySelectorAll(\"a.gatsby-resp-image-link\");\n    optimizedImageLinks === null || optimizedImageLinks === void 0 ? void 0 : optimizedImageLinks.forEach(link => {\n      const image = link.children.item(1);\n      link.setAttribute(\"data-fancybox\", \"gallery\");\n      link.setAttribute(\"data-caption\", image.alt);\n    });\n    Fancybox.bind(\"[data-fancybox]\");\n    return () => Fancybox.unbind(\"[data-fancybox]\");\n  }, []);\n  return React.createElement(\"div\", {\n    className: \"mx-auto flex max-w-xl flex-col gap-y-12\"\n  }, React.createElement(\"div\", {\n    className: \"flex flex-col gap-4\"\n  }, (categories === null || categories === void 0 ? void 0 : categories.length) && React.createElement(Category, {\n    name: categories[0],\n    className: \"item-selectable\"\n  }), React.createElement(\"h1\", {\n    className: \"text-3xl font-bold\"\n  }, title), React.createElement(\"div\", {\n    className: \"item-secondary flex gap-2\"\n  }, dateString && React.createElement(\"span\", {\n    title: `首次发布于：${date.toString()}\\n最后更新于：${updatedDate.toString()}`\n  }, date.format(\"MM 月 DD 日 YYYY 年\")), (tags === null || tags === void 0 ? void 0 : tags.length) && React.createElement(\"div\", {\n    className: \"flex flex-1 flex-wrap gap-2 before:content-['\\u2022']\"\n  }, tags.map(tag => React.createElement(Tag, {\n    key: tag,\n    name: tag,\n    className: \"item-secondary item-selectable\"\n  }))))), React.createElement(\"article\", {\n    ref: articleRef,\n    className: \"heti post-entry\"\n  }, timeliness && diffDays > 365 && React.createElement(\"blockquote\", {\n    className: \"border-l-4 border-orange-400\"\n  }, \"\\u8FD9\\u662F\\u4E00\\u7BC7\", React.createElement(\"strong\", null, \"\\u6700\\u540E\\u66F4\\u65B0\\u4E8E \", diffDays, \" \\u5929\\u524D\"), \"\\u7684\\u535A\\u5BA2\\uFF0C\\u5185\\u5BB9\\u53EF\\u80FD\\u968F\\u7740\\u65F6\\u95F4\\u7684\\u63A8\\u79FB\\u800C\\u53D8\\u5F97\\u4E0D\\u518D\\u9002\\u7528\\uFF0C\\u5EFA\\u8BAE\\u60A8\\u4ED4\\u7EC6\\u8BC4\\u4F30\\u4FE1\\u606F\\u7684\\u6709\\u6548\\u6027\\u3002\"), React.createElement(MDXProvider, {\n    components: components\n  }, children)));\n};\nexport const Head = _ref3 => {\n  let {pageContext} = _ref3;\n  return React.createElement(SEO, {\n    title: pageContext.frontmatter.title\n  });\n};\nPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","strong","ol","li","h2","span","h3","a","ul","_provideComponents","components","React","dangerouslySetInnerHTML","__html","href","wrapper","MDXLayout","_ref","children","isExternalHref","startsWith","parsedHref","encodeURIComponent","slice","target","undefined","rel","img","alt","src","restProps","Card","Link","PostTemplate","_ref2","pageContext","frontmatter","title","date","dateString","updated","updatedDateString","categories","tags","timeliness","articleRef","dayjs","updatedDate","diffDays","diff","_articleRef$current","optimizedImageLinks","current","querySelectorAll","forEach","link","image","item","setAttribute","Fancybox","bind","unbind","className","length","Category","name","toString","format","map","tag","Tag","key","ref","MDXProvider","Head","_ref3","SEO","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}