"use strict";(self.webpackChunkhomepage=self.webpackChunkhomepage||[]).push([[3046],{6621:function(e,n,a){a.r(n),a.d(n,{Head:function(){return k},default:function(){return b}});var t=a(8453),s=a(6540);function l(e){const n=Object.assign({p:"p",h2:"h2",span:"span",a:"a",ul:"ul",li:"li"},(0,t.R)(),e.components);return s.createElement(s.Fragment,null,s.createElement(n.p,null,"现在，我已经安装了 Docker，并拉取了 Nginx 的镜像。除此之外，我也购买了域名，完成了备案，并且为域名配置了 SSL。一切准备就绪，那么我该怎么将我的静态网页项目在 Linux 主机上通过 Nginx 部署，最终实现域名访问呢？"),"\n",s.createElement(n.p,null,"本文以部署我的个人博客页面为例，介绍如何使用基于 Docker 的 Nginx 部署静态网页项目。"),"\n",s.createElement(n.h2,null,"准备静态网页项目"),"\n",s.createElement(n.p,null,"为了更方便管理网页项目，可以在主机根目录下新建一个目录，例如 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">www</code>'}}),"："),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token parameter variable">-i</span> <span class="token comment"># 切换为管理员用户</span>\n<span class="token builtin class-name">cd</span> /\n<span class="token function">mkdir</span> www</code></pre></div>'}}),"\n",s.createElement(n.p,null,"现在，我已经有了一个完整的静态网页项目——我的",s.createElement(n.a,{href:"https://github.com/LolipopJ/LolipopJ.github.io"},"个人博客"),"。我的个人博客基于 Hexo，其中代码放在 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">source</code>'}})," 分支，生成的静态网页文件放在 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">master</code>'}})," 分支。首先通过 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">git</code>'}})," 命令将静态网页文件克隆下来："),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /www\n<span class="token function">git</span> clone https://github.com/LolipopJ/LolipopJ.github.io.git <span class="token parameter variable">-b</span> master</code></pre></div>'}}),"\n",s.createElement(n.h2,null,"准备 SSL 证书"),"\n",s.createElement(n.p,null,"我使用了腾讯云执行了备案操作，并申请了免费的 SSL 证书。参考",s.createElement(n.a,{href:"https://cloud.tencent.com/document/product/400/35244"},"腾讯云官方文档"),"，下面执行安装 SSL 证书操作。"),"\n",s.createElement(n.p,null,"将下载的证书文件传入 Linux 主机中并解压。以 SSL 证书文件压缩包 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">blog.towind.fun.zip</code>'}})," 为例："),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token comment"># 将文件解压到当前目录下的 blog.towind.fun 目录中</span>\n<span class="token function">unzip</span> blog.towind.fun.zip <span class="token parameter variable">-d</span> blog.towind.fun</code></pre></div>'}}),"\n",s.createElement(n.p,null,"可以将 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">blog.towind.fun/Nginx</code>'}})," 目录下的文件放置到 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">/www/cert</code>'}})," 目录下："),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token function">mkdir</span> /www/cert\n<span class="token function">cp</span> blog.towind.fun/Nginx/* /www/cert</code></pre></div>'}}),"\n",s.createElement(n.p,null,"之后，只需要将 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">/www/cert</code>'}})," 目录挂载到 Nginx 的容器中，再通过 Nginx 配置访问即可。"),"\n",s.createElement(n.h2,null,"创建 Nginx 容器"),"\n",s.createElement(n.p,null,"从 Nginx 1.19 版本开始，允许在配置中自定义环境变量，只需要编写一个 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">docker-compose.yml</code>'}})," 文件。",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">docker-compose</code>'}})," 是用来将 Docker 自动化的命令，如果还没有，需要先安装它："),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token string">"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">)</span></span>-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>"</span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose\n<span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose\n<span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/bin/docker-compose /usr/bin/docker-compose</code></pre></div>'}}),"\n",s.createElement(n.p,null,"可以用 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">docker-compose --version</code>'}})," 命令测试安装的结果。"),"\n",s.createElement(n.p,null,"在默认情况下，Nginx 会寻找容器的 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">/usr/share/nginx/html</code>'}})," 目录下的网页文件，因此我们需要把网页文件放到这个目录下去。最简单的方式是通过挂载 volume 使得容器可以访问到我们的 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">/www/LolipopJ.github.io</code>'}})," 目录。"),"\n",s.createElement(n.p,null,"在 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">/www/LolipopJ.github.io</code>'}})," 目录下创建 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">docker-compose.yml</code>'}}),"，编辑如下："),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="yml"><pre class="language-yml"><code class="language-yml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"1.0"</span>\n<span class="token key atrule">services</span><span class="token punctuation">:</span>\n  <span class="token key atrule">blog</span><span class="token punctuation">:</span>\n    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>1.21.0\n    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> blog<span class="token punctuation">-</span>nginx\n    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always\n    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> ./<span class="token punctuation">:</span>/usr/share/nginx/html <span class="token comment"># 挂载当前静态网页文件目录</span>\n      <span class="token punctuation">-</span> ./templates<span class="token punctuation">:</span>/etc/nginx/templates <span class="token comment"># 挂载 Nginx 配置模板目录</span>\n      <span class="token punctuation">-</span> /www/cert<span class="token punctuation">:</span>/etc/nginx/cert <span class="token comment"># 挂载 SSL 证书目录</span>\n    <span class="token key atrule">ports</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token datetime number">80:80</span>\n      <span class="token punctuation">-</span> 443<span class="token punctuation">:</span><span class="token number">443</span>\n    <span class="token key atrule">environment</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> NGINX_HOST=blog.towind.fun\n      <span class="token punctuation">-</span> NGINX_HOST_SSL_CRT=cert/1_blog.towind.fun_bundle.crt\n      <span class="token punctuation">-</span> NGINX_HOST_SSL_KEY=cert/2_blog.towind.fun.key</code></pre></div>'}}),"\n",s.createElement(n.p,null,"由于 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">nginx.conf</code>'}})," 读取文件时，默认以 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">/etc/nginx</code>'}})," 为起始目录，因此当把 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">/www/cert</code>'}})," 目录挂载到 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">/etc/nginx/cert</code>'}})," 目录时，应当设置环境变量 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">NGINX_HOST_SSL_CRT</code>'}})," 为 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">cert/1_www.example.com_bundle.crt</code>'}}),"。"),"\n",s.createElement(n.p,null,"在默认情况下，执行此文件后，将会读取 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">templates</code>'}}),"（对应容器中的 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">/etc/nginx/templates</code>'}}),"）目录下的模板文件，并将结果输出到容器中 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">/etc/nginx/conf.d</code>'}})," 目录下。因此，可以在 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">/www/LolipopJ.github.io</code>'}})," 目录下创建 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">templates</code>'}})," 目录，并编写 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">templates/default.conf.template</code>'}})," 文件如下："),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="conf"><pre class="language-conf"><code class="language-conf">server {\n  listen 443 ssl;\n  listen [::]:443 ssl;\n  server_name ${NGINX_HOST};\n  ssl_certificate ${NGINX_HOST_SSL_CRT};\n  ssl_certificate_key ${NGINX_HOST_SSL_KEY};\n\n  location / {\n    root /usr/share/nginx/html;\n    index index.html index.htm;\n  }\n\n  error_page 404 /404.html;\n\n  error_page 500 502 503 504 /50x.html;\n  location = /50x.html {\n    root /usr/share/nginx/html;\n  }\n}\n\n# 将 http 请求转为 https 请求\nserver {\n  listen 80;\n  listen [::]:80;\n  server_name ${NGINX_HOST};\n  return 301 https://$host$request_uri;\n}</code></pre></div>'}}),"\n",s.createElement(n.p,null,"现在，在 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">/www/LolipopJ.github.io</code>'}})," 目录下有我们编写好的 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">docker-compose.yml</code>'}})," 和 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">templates/default.conf.template</code>'}})," 文件；另外，为部署 https 服务所需的 ssl 证书文件在 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">/www/cert</code>'}})," 目录下。那么最后只需要在 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">/www/LolipopJ.github.io</code>'}})," 目录执行下面的命令即可："),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span></code></pre></div>'}}),"\n",s.createElement(n.p,null,"其中，",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">-d</code>'}})," 表示在后台运行容器。执行后，将拉起 Nginx 容器，并在容器中生成对应的 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">/etc/nginx/conf.d/default.conf</code>'}})," 文件，供 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">/etc/nginx/nginx.conf</code>'}})," 读取。"),"\n",s.createElement(n.h2,null,"从浏览器访问"),"\n",s.createElement(n.p,null,"嘿！一切就绪，从浏览器访问我的博客吧！网址是：",s.createElement(n.a,{href:"https://blog.towind.fun/"},"https://blog.towind.fun")),"\n",s.createElement(n.p,null,"当我的个人博客有更新时，可以通过 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">git</code>'}})," 命令来拉取，然后重新执行 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">docker-compose up -d</code>'}})," 即可："),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /www/LolipopJ.github.io\n<span class="token function">git</span> pull\n<span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span></code></pre></div>'}}),"\n",s.createElement(n.h2,null,"参考文档"),"\n",s.createElement(n.ul,null,"\n",s.createElement(n.li,null,s.createElement(n.a,{href:"https://www.docker.com/blog/how-to-use-the-official-nginx-docker-image/"},"How To Use the Official NGINX Docker Image")),"\n"))}var c=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,t.R)(),e.components);return n?s.createElement(n,e,s.createElement(l,e)):l(e)},o=a(197),r=a(4353),p=a.n(r),u=a(4794),g=a(6947),i=a(4017),m=a(1042),d=a(1038);const h={a:e=>{let{href:n="",children:a}=e;const t=!(null!=n&&n.startsWith("#")),l=t?n:`#${encodeURIComponent(n.slice(1))}`;return s.createElement("a",{href:l,target:t?"_blank":void 0,rel:"noreferrer"},a)},img:e=>{const{alt:n="The author is too lazy to give an alt",src:a,...t}=e;return s.createElement("a",{href:a,"data-fancybox":"gallery","data-caption":n},s.createElement("img",Object.assign({src:a,alt:n},t)))},Card:g.A,Link:u.Link},_=e=>{let{children:n,data:a}=e;const{mdx:{frontmatter:{title:l,date:c,updated:r,categories:u,tags:g,timeliness:m}}}=a,_=s.useRef(null),k=p()(c),b=r?p()(r):k,E=p()().diff(b,"days");return s.useEffect((()=>{var e;const n=null===(e=_.current)||void 0===e?void 0:e.querySelectorAll("a.gatsby-resp-image-link");return null==n||n.forEach((e=>{const n=e.children.item(1);e.setAttribute("data-fancybox","gallery"),e.setAttribute("data-caption",n.alt)})),o.lX.bind("[data-fancybox]"),()=>o.lX.unbind("[data-fancybox]")}),[]),s.createElement("div",{className:"mx-auto flex max-w-xl flex-col gap-y-12"},s.createElement("div",{className:"flex flex-col gap-4"},(null==u?void 0:u.length)&&s.createElement(i.A,{name:u[0],className:"item-selectable"}),s.createElement("h1",{className:"text-3xl font-bold"},l),s.createElement("div",{className:"item-secondary flex flex-col gap-2 lg:flex-row"},c&&s.createElement("span",{title:`首次发布于：${k.toString()}\n最后更新于：${b.toString()}`},k.format("MM 月 DD 日 YYYY 年")),(null==g?void 0:g.length)&&s.createElement("div",{className:"flex flex-1 flex-wrap gap-2 lg:before:content-['•']"},g.map((e=>s.createElement(d.A,{key:e,name:e,className:"item-secondary item-selectable"})))))),s.createElement("article",{ref:_,className:"heti post-entry"},!1!==m&&E>365&&s.createElement("blockquote",{className:"border-l-4 border-orange-400"},"这是一篇",s.createElement("strong",null,"最后更新于 ",E," 天前"),"的博客，内容可能随着时间的推移而变得不再适用，建议您仔细评估信息的有效性。"),s.createElement(t.x,{components:h},n)))},k=e=>{let{data:n}=e;return s.createElement(m.A,{title:String(n.mdx.frontmatter.title)})};function b(e){return s.createElement(_,e,s.createElement(c,e))}}}]);
//# sourceMappingURL=component---src-templates-post-tsx-content-file-path-blog-posts-website-deployment-docker-nginx-mdx-25add2f000e2c0a9310f.js.map