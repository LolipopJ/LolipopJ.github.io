"use strict";(self.webpackChunkhomepage=self.webpackChunkhomepage||[]).push([[5396],{1715:function(e,a,n){n.r(a),n.d(a,{Head:function(){return f},default:function(){return E}});var t=n(8453),s=n(6540);function l(e){const a=Object.assign({h2:"h2",p:"p",a:"a",span:"span"},(0,t.R)(),e.components);return s.createElement(s.Fragment,null,s.createElement(a.h2,null,"编写代码时使用 EditorConfig"),"\n",s.createElement(a.p,null,"EditorConfig 能够帮助跨各种 IDE 开发同一项目的不同开发人员保持一致的编码风格。"),"\n",s.createElement(a.p,null,"VSCode 没有内置对 EditorConfig 的支持，需要在插件市场中手动搜索并安装",s.createElement(a.a,{href:"https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig"},"插件"),"。"),"\n",s.createElement(a.p,null,"EditorConfig 会自动读取工作区中的 ",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.editorconfig</code>'}})," 文件，更详细的配置说明可以参考",s.createElement(a.a,{href:"https://editorconfig-specification.readthedocs.io/"},"官方介绍"),"。下面是笔者常用的配置："),"\n",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="editorconfig"><pre class="language-editorconfig"><code class="language-editorconfig"><span class="token key attr-name">root</span> <span class="token value attr-value"><span class="token punctuation">=</span> true</span>\n\n<span class="token section selector"><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span></span>\n<span class="token key attr-name">indent_style</span> <span class="token value attr-value"><span class="token punctuation">=</span> space</span>\n<span class="token key attr-name">indent_size</span> <span class="token value attr-value"><span class="token punctuation">=</span> 4</span>\n<span class="token key attr-name">end_of_line</span> <span class="token value attr-value"><span class="token punctuation">=</span> lf</span>\n<span class="token key attr-name">charset</span> <span class="token value attr-value"><span class="token punctuation">=</span> utf-8</span>\n<span class="token key attr-name">insert_final_newline</span> <span class="token value attr-value"><span class="token punctuation">=</span> true</span>\n<span class="token key attr-name">trim_trailing_whitespace</span> <span class="token value attr-value"><span class="token punctuation">=</span> true</span></code></pre></div>'}}),"\n",s.createElement(a.h2,null,"推送仓库前使用 Prettier"),"\n",s.createElement(a.p,null,"为了进一步确保代码风格符合编码规范，可以在上库前使用 Prettier 修复代码格式。"),"\n",s.createElement(a.p,null,"将 Prettier 安装为项目开发依赖："),"\n",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> <span class="token parameter variable">-D</span> prettier</code></pre></div>'}}),"\n",s.createElement(a.p,null,"在 ",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">package.json</code>'}})," 中添加 Prettier 运行脚本："),"\n",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="json"><pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"prettier"</span><span class="token operator">:</span> <span class="token string">"prettier --write **/* --ignore-unknown"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",s.createElement(a.p,null,"现在，执行 ",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">yarn prettier</code>'}})," 命令，工具将按照 Prettier 预置的规则自动格式化所有支持的后缀格式的文件了。"),"\n",s.createElement(a.p,null,"在项目根目录创建 ",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.prettierrc.json</code>'}})," 文件，可以进一步配置 Prettier 格式化规则，可参考",s.createElement(a.a,{href:"https://prettier.io/docs/en/options.html"},"官方文档"),"。例如："),"\n",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="json"><pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token comment">// JSON 文件中不应添加注释，需去除</span>\n  <span class="token property">"semi"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 句末是否添加分号</span>\n  <span class="token property">"singleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 是否使用单引号</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",s.createElement(a.p,null,"假如我们的项目中会包含 PHP 以及 Java 等语言的代码，要让 Prettier 处理它们的格式，该怎么做呢？"),"\n",s.createElement(a.p,null,"在默认情况下，Prettier 并不支持 PHP 或 Java 代码的格式化，这就需要我们单独添加支持其它编程语言的 ",s.createElement(a.a,{href:"https://prettier.io/docs/en/plugins.html"},"Prettier 插件"),"作为项目的依赖。其中，以 ",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">@prettier</code>'}})," 开头的插件为官方维护插件，例如 ",s.createElement(a.a,{href:"https://github.com/prettier/plugin-php"},s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">@prettier/plugin-php</code>'}})),"；其它命名插件为社区开发插件，例如 ",s.createElement(a.a,{href:"https://github.com/jhipster/prettier-java"},s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">prettier-plugin-java</code>'}})),"。"),"\n",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> <span class="token parameter variable">--dev</span> @prettier/plugin-php prettier-plugin-java</code></pre></div>'}}),"\n",s.createElement(a.p,null,"Prettier 将自动加载与它在同一 ",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">node_modules</code>'}})," 文件夹中的 Prettier 插件，并自动识别新增的代码后缀（如 ",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.php</code>'}})," 和 ",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.java</code>'}}),"）。因此在最后，只需要再执行一遍 ",s.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">yarn prettier</code>'}}),"，就可以实现格式化项目中的 PHP 及 Java 代码了。"))}var r=function(e){void 0===e&&(e={});const{wrapper:a}=Object.assign({},(0,t.R)(),e.components);return a?s.createElement(a,e,s.createElement(l,e)):l(e)},c=n(197),o=n(4353),p=n.n(o),i=n(4794),u=n(6947),g=n(4017),m=n(1042),d=n(1038);const h={a:e=>{let{href:a="",children:n}=e;const t=!(null!=a&&a.startsWith("#")),l=t?a:`#${encodeURIComponent(a.slice(1))}`;return s.createElement("a",{href:l,target:t?"_blank":void 0,rel:"noreferrer"},n)},img:e=>{const{alt:a="The author is too lazy to give an alt",src:n,...t}=e;return s.createElement("a",{href:n,"data-fancybox":"gallery","data-caption":a},s.createElement("img",Object.assign({src:n,alt:a},t)))},Card:u.A,Link:i.Link},k=e=>{let{children:a,data:n}=e;const{mdx:{frontmatter:{title:l,date:r,updated:o,categories:i,tags:u,timeliness:m=!0}}}=n,k=s.useRef(null),f=p()(r),E=o?p()(o):f,y=p()().diff(E,"days");return s.useEffect((()=>{var e;const a=null===(e=k.current)||void 0===e?void 0:e.querySelectorAll("a.gatsby-resp-image-link");return null==a||a.forEach((e=>{const a=e.children.item(1);e.setAttribute("data-fancybox","gallery"),e.setAttribute("data-caption",a.alt)})),c.lX.bind("[data-fancybox]"),()=>c.lX.unbind("[data-fancybox]")}),[]),s.createElement("div",{className:"mx-auto flex max-w-xl flex-col gap-y-12"},s.createElement("div",{className:"flex flex-col gap-4"},(null==i?void 0:i.length)&&s.createElement(g.A,{name:i[0],className:"item-selectable"}),s.createElement("h1",{className:"text-3xl font-bold"},l),s.createElement("div",{className:"item-secondary flex flex-col gap-2 lg:flex-row"},r&&s.createElement("span",{title:`首次发布于：${f.toString()}\n最后更新于：${E.toString()}`},f.format("MM 月 DD 日 YYYY 年")),(null==u?void 0:u.length)&&s.createElement("div",{className:"flex flex-1 flex-wrap gap-2 lg:before:content-['•']"},u.map((e=>s.createElement(d.A,{key:e,name:e,className:"item-secondary item-selectable"})))))),s.createElement("article",{ref:k,className:"heti post-entry"},m&&y>365&&s.createElement("blockquote",{className:"border-l-4 border-orange-400"},"这是一篇",s.createElement("strong",null,"最后更新于 ",y," 天前"),"的博客，内容可能随着时间的推移而变得不再适用，建议您仔细评估信息的有效性。"),s.createElement(t.x,{components:h},a)))},f=e=>{let{data:a}=e;return s.createElement(m.A,{title:String(a.mdx.frontmatter.title)})};function E(e){return s.createElement(k,e,s.createElement(r,e))}}}]);
//# sourceMappingURL=component---src-templates-post-tsx-content-file-path-blog-posts-editorconfig-prettier-mdx-d5d6509ee9a5c135812a.js.map