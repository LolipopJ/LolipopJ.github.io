"use strict";(self.webpackChunkhomepage=self.webpackChunkhomepage||[]).push([[6198],{2844:function(e,n,t){t.r(n),t.d(n,{Head:function(){return k},default:function(){return f}});var a=t(8453),s=t(6540);function l(e){const n=Object.assign({p:"p",strong:"strong",h2:"h2",ul:"ul",li:"li",blockquote:"blockquote",span:"span",a:"a"},(0,a.R)(),e.components);return s.createElement(s.Fragment,null,s.createElement(n.p,null,"哪位代码人不希望自己的代码总有统一优美的风格，不会因为合作开发项目而杂乱呢？"),"\n",s.createElement(n.p,null,"在最开始写项目代码的时候我就用起了 ESLint 和 Prettier，再装一堆预设的配置，便跑了起来。令人沮丧的是，用 ESLint 修复了代码",s.createElement(n.strong,null,"质量"),"问题，还是会在编译器里看到红色波浪线，提醒还有些代码",s.createElement(n.strong,null,"风格"),"需要修复。直到这一次，我才忽然意识到 ESLint 和 Prettier 其实分工了不同领域，协同使用体验极好。"),"\n",s.createElement(n.p,null,"本文基于 Nuxt.js + VSCode 阐述如何配置并实现 ESLint + Prettier 检查并规范代码质量与格式。"),"\n",s.createElement(n.h2,null,"ESLint 与 Prettier"),"\n",s.createElement(n.p,null,"ESLint 是一个开源的 JavaScript 代码检查工具，Prettier 是一款代码格式工具。它们的功能侧重如下所示："),"\n",s.createElement(n.ul,null,"\n",s.createElement(n.li,null,"ESLint：主要负责代码",s.createElement(n.strong,null,"质量"),"的校验，其次包含代码",s.createElement(n.strong,null,"风格"),"的检验。"),"\n",s.createElement(n.li,null,"Prettier：主要负责代码",s.createElement(n.strong,null,"风格"),"的校验。"),"\n"),"\n",s.createElement(n.p,null,"ESLint 认为代码风格并没有那么重要，因此并未完全解决代码风格问题。"),"\n",s.createElement(n.blockquote,null,"\n",s.createElement(n.p,null,'Rules are "agenda free" - ESLint does not promote any particular coding style.'),"\n"),"\n",s.createElement(n.p,null,"而 Prettier 则认为自己是固执己见的代码格式化工具。"),"\n",s.createElement(n.blockquote,null,"\n",s.createElement(n.p,null,"An opinionated code formatter."),"\n"),"\n",s.createElement(n.p,null,"尚且不论二者孰是孰非，作为开发者，一句“我全都要”就可以解决这个争论，同时让自己项目的代码享受美妙的质量校验与风格修复体验。"),"\n",s.createElement(n.h2,null,"安装依赖和编译器插件"),"\n",s.createElement(n.p,null,"首先，自然是安装 ESLint 和 Prettier 作为项目依赖。"),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> <span class="token parameter variable">--dev</span> eslint prettier</code></pre></div>'}}),"\n",s.createElement(n.p,null,"在 VSCode 扩展商店查找并安装："),"\n",s.createElement(n.ul,null,"\n",s.createElement(n.li,null,"ESLint"),"\n",s.createElement(n.li,null,"Prettier"),"\n"),"\n",s.createElement(n.p,null,"在过去，我们可能会使用 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">prettier-eslint</code>'}})," 作为项目依赖，通过它依次执行 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">prettier</code>'}})," 然后是 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">eslint --fix</code>'}}),"，实现修复代码格式和质量问题。但是："),"\n",s.createElement(n.blockquote,null,"\n",s.createElement(n.p,null,"It's the recommended practice to let Prettier handle formatting and ESLint for non-formatting issues, ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">prettier-eslint</code>'}})," is not in the same direction as that practice, hence ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">prettier-eslint</code>'}})," is not recommended anymore. You can use ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">eslint-plugin-prettier</code>'}})," and ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">eslint-config-prettier</code>'}})," together."),"\n"),"\n",s.createElement(n.p,null,"最佳实践是让 Prettier 处理代码格式问题，让 ESLint 处理代码质量问题。"),"\n",s.createElement(n.p,null,"这可以通过以下两个库实现："),"\n",s.createElement(n.ul,null,"\n",s.createElement(n.li,null,s.createElement(n.a,{href:"https://github.com/prettier/eslint-plugin-prettier"},"eslint-plugin-prettier"),"：ESLint 插件，包括了 ESLint 需要检查的一些额外代码格式规则。在幕后，它使用到了 Prettier，相当于将 Prettier 作为 ESLint 的一部分运行。"),"\n",s.createElement(n.li,null,s.createElement(n.a,{href:"https://github.com/prettier/eslint-config-prettier"},"eslint-config-prettier"),"：ESLint 配置，可以关闭所有不必要或者可能与 Prettier 产生冲突的代码格式规则。"),"\n"),"\n",s.createElement(n.p,null,"二者相辅相成，eslint-config-prettier 可以关闭 ESLint 中与 Prettier 相冲突的代码格式规则，这样我们就将代码格式化的问题全都交给我们的 Prettier 处理。"),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">add</span> <span class="token parameter variable">--dev</span> eslint-plugin-prettier eslint-config-prettier</code></pre></div>'}}),"\n",s.createElement(n.p,null,"修改 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.eslintrc.js</code>'}})," 中配置，将 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">plugin:prettier/recommended</code>'}})," 和 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">prettier</code>'}})," 放到拓展的最后两项，如下所示："),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// .eslintrc.js</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">extends</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">"您使用的其它 ESLint 拓展"</span><span class="token punctuation">,</span>\n    <span class="token string">"plugin:prettier/recommended"</span><span class="token punctuation">,</span>\n    <span class="token string">"prettier"</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",s.createElement(n.h2,null,"配置 Prettier"),"\n",s.createElement(n.p,null,"参考 Prettier 的官方",s.createElement(n.a,{href:"https://prettier.io/docs/en/options.html"},"配置文档"),"，自由地配置项目代码的风格吧！"),"\n",s.createElement(n.p,null,"只需要在项目目录创建 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.prettierrc.json</code>'}})," 文件，填写配置即可。例如（注意，JSON 文件中不应该添加注释）："),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="json"><pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>\n  <span class="token property">"semi"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 句末是否添加分号</span>\n  <span class="token property">"singleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// 是否使用单引号（而非双引号）</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",s.createElement(n.p,null,"由于 Prettier 是以插件的形式添加到 ESLint 中，因此您需要在修改后重新启动 VSCode 工作区。"),"\n",s.createElement(n.h2,null,"现在就格式化代码吧"),"\n",s.createElement(n.p,null,"修改 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">package.json</code>'}})," 文件，添加脚本："),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="json"><pre class="language-json"><code class="language-json"><span class="token comment">// package.json</span>\n<span class="token punctuation">{</span>\n  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"lint"</span><span class="token operator">:</span> <span class="token string">"eslint --ignore-path .gitignore --ext .ts,.js,.vue ."</span><span class="token punctuation">,</span>\n    <span class="token property">"lint:fix"</span><span class="token operator">:</span> <span class="token string">"yarn lint --fix"</span><span class="token punctuation">,</span>\n    <span class="token property">"lint:prettier"</span><span class="token operator">:</span> <span class="token string">"prettier --ignore-path .gitignore --write **/* --ignore-unknown"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",s.createElement(n.p,null,"这里笔者使用了比较偷懒的方法，调用了 Prettier 一键修复",s.createElement(n.strong,null,"所有可修复"),"的代码风格问题，而不限于我们指定的 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.ts</code>'}})," 文件等。既然在前面我们已经配置好了 ESLint 和 Prettier 之间的关系，所以在这里单独通过 Prettier 修复后，VSCode 中并不会显示可恶的红色波浪线。"),"\n",s.createElement(n.p,null,"根据上面的配置，可以在项目根目录下执行如下脚本："),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token comment"># 只检查 .ts, .js, .vue 文件的代码质量问题</span>\n<span class="token function">yarn</span> lint\n<span class="token comment"># 检查并修复 .ts, .js, .vue 文件的代码质量问题</span>\n<span class="token function">yarn</span> lint:fix\n<span class="token comment"># 修复所有可修复的代码风格问题</span>\n<span class="token function">yarn</span> lint:prettier</code></pre></div>'}}),"\n",s.createElement(n.p,null,"此外，VSCode 还可以设置",s.createElement(n.strong,null,"保存时自动修复代码问题"),"，如下所示。这样执行 ",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Ctrl + S</code>'}})," 保存时会自动格式化代码文件。"),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="json"><pre class="language-json"><code class="language-json"><span class="token comment">// settings.json</span>\n<span class="token property">"editor.codeActionsOnSave"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token property">"source.fixAll.eslint"</span><span class="token operator">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre></div>'}}),"\n",s.createElement(n.h2,null,"参考资料"),"\n",s.createElement(n.ul,null,"\n",s.createElement(n.li,null,s.createElement(n.a,{href:"https://stackoverflow.com/questions/44690308/whats-the-difference-between-prettier-eslint-eslint-plugin-prettier-and-eslint"},"What's the difference between prettier-eslint, eslint-plugin-prettier and eslint-config-prettier?")," - stackoverflow"),"\n",s.createElement(n.li,null,s.createElement(n.a,{href:"https://github.com/prettier/prettier-eslint-cli/issues/208#issuecomment-673631308"},"Error: 'basePath' should be an absolute path")," - mathiaswillburger - 2020.08.14"),"\n",s.createElement(n.li,null,s.createElement(n.a,{href:"https://zhuanlan.zhihu.com/p/80574300"},"搞懂 ESLint 和 Prettier")," - 乃乎 - 2019.08.31"),"\n",s.createElement(n.li,null,s.createElement(n.a,{href:"https://www.jianshu.com/p/dd07cca0a48e"},"ESLint+Prettier 代码规范实践")," - Bernie 维 - 2019.06.04"),"\n"))}var r=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,a.R)(),e.components);return n?s.createElement(n,e,s.createElement(l,e)):l(e)},c=t(197),o=t(4353),p=t.n(o),i=t(4810),u=t(6947),m=t(4017),g=t(1042),d=t(1038);const E={a:e=>{let{href:n="",children:t}=e;const a=!(null!=n&&n.startsWith("#")),l=a?n:`#${encodeURIComponent(n.slice(1))}`;return s.createElement("a",{href:l,target:a?"_blank":void 0,rel:"noreferrer"},t)},img:e=>{const{alt:n="The author is too lazy to give an alt",src:t,...a}=e;return s.createElement("a",{href:t,"data-fancybox":"gallery","data-caption":n},s.createElement("img",Object.assign({src:t,alt:n},a)))},Card:u.A,Link:i.N_},h=e=>{let{children:n,pageContext:t}=e;const{frontmatter:{title:l,date:r,updated:o,categories:i,tags:u,timeliness:g=!0}}=t,h=s.useRef(null),k=p()(r),f=o?p()(o):k,y=p()().diff(f,"days");return s.useEffect((()=>{var e;const n=null===(e=h.current)||void 0===e?void 0:e.querySelectorAll("a.gatsby-resp-image-link");return null==n||n.forEach((e=>{const n=e.children.item(1);e.setAttribute("data-fancybox","gallery"),e.setAttribute("data-caption",n.alt)})),c.lX.bind("[data-fancybox]"),()=>c.lX.unbind("[data-fancybox]")}),[]),s.createElement("div",{className:"mx-auto flex max-w-xl flex-col gap-y-12"},s.createElement("div",{className:"flex flex-col gap-4"},(null==i?void 0:i.length)&&s.createElement(m.A,{name:i[0],className:"item-selectable"}),s.createElement("h1",{className:"text-3xl font-bold"},l),s.createElement("div",{className:"item-secondary flex gap-2"},r&&s.createElement("span",{title:`首次发布于：${k.toString()}\n最后更新于：${f.toString()}`},k.format("MM 月 DD 日 YYYY 年")),(null==u?void 0:u.length)&&s.createElement("div",{className:"flex flex-1 flex-wrap gap-2 before:content-['•']"},u.map((e=>s.createElement(d.A,{key:e,name:e,className:"item-secondary item-selectable"})))))),s.createElement("article",{ref:h,className:"heti post-entry"},g&&y>365&&s.createElement("blockquote",{className:"border-l-4 border-orange-400"},"这是一篇",s.createElement("strong",null,"最后更新于 ",y," 天前"),"的博客，内容可能随着时间的推移而变得不再适用，建议您仔细评估信息的有效性。"),s.createElement(a.x,{components:E},n)))},k=e=>{let{pageContext:n}=e;return s.createElement(g.A,{title:n.frontmatter.title})};function f(e){return s.createElement(h,e,s.createElement(r,e))}}}]);
//# sourceMappingURL=component---src-templates-post-tsx-content-file-path-blog-posts-nodejs-eslint-prettier-mdx-d35625e6876d5c572f3c.js.map