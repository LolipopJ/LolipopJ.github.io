"use strict";(self.webpackChunkhomepage=self.webpackChunkhomepage||[]).push([[3856],{2575:function(n,e,a){a.r(e),a.d(e,{Head:function(){return y},default:function(){return E}});var s=a(8453),t=a(6540);function l(n){const e=Object.assign({p:"p",blockquote:"blockquote",a:"a",h2:"h2",h3:"h3",strong:"strong",span:"span"},(0,s.R)(),n.components),{Link:a}=e;return a||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Link",!0),t.createElement(t.Fragment,null,t.createElement(e.p,null,"这是我撰写的第一篇与 Github Actions 有关的博客，那么就首先对 Github Actions 做一个简短的介绍吧。"),"\n",t.createElement(e.p,null,"Github Actions 是 Github 于 2018 年 10 月推出的持续集成服务（CI）。"),"\n",t.createElement(e.blockquote,null,"\n",t.createElement(e.p,null,"大家知道，持续集成由很多操作组成，比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等。GitHub 把这些操作就称为 actions。\n很多操作在不同项目里面是类似的，完全可以共享。GitHub 注意到了这一点，想出了一个很妙的点子，允许开发者把每个操作写成独立的脚本文件，存放到代码仓库，使得其他开发者可以引用。\n如果你需要某个 action，不必自己写复杂的脚本，直接引用他人写好的 action 即可，整个持续集成过程，就变成了一个 actions 的组合。这就是 GitHub Actions 最特别的地方。\n—— ",t.createElement(e.a,{href:"http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html"},"GitHub Actions 入门教程")),"\n"),"\n",t.createElement(e.p,null,"不过在 Github Actions 的发展的过程中，它早已不局限于 CI 等功能，还可以用于各种自动化操作，例如",t.createElement(e.a,{href:"https://github.com/srcrs/TiebaSignIn"},"百度贴吧自动签到"),"（注：已失效。Github 官方会对此类利用服务器实现签到功能的仓库进行封禁打击，还是不要使用了吧）等。"),"\n",t.createElement(e.h2,null,"持续集成与部署 Hexo 博客"),"\n",t.createElement(e.p,null,"在",t.createElement(a,{to:"/posts/hello-hexo-world"},"搭建自己的 Hexo 博客"),"那篇文章的最后，我们使用的是 ",t.createElement(e.a,{href:"https://hexo.io/zh-cn/docs/github-pages#%E7%A7%81%E6%9C%89-Repository"},"hexo-deployer-git 一键部署到仓库"),"的方式，实现手动构建个人博客网页并通过脚本推送部署到自己的 Github Pages."),"\n",t.createElement(e.p,null,"事实上，利用 Github Actions 就再也不用多此一举：每次提交代码到 Github 后，就可以触发 Github Actions 并自动部署新的博客内容。"),"\n",t.createElement(e.h3,null,"文档是您最有用的帮手"),"\n",t.createElement(e.p,null,"更确切的说，英文文档是您最有用的帮手！"),"\n",t.createElement(e.p,null,"在此处记一个小插曲，在本博客初次撰写的时候，中文的 Hexo 文档页面仍在使用 Travis CI 实现自动化部署，而英文的 Hexo 文档已经更新到推荐使用 Github Actions 实现自动化部署操作了。"),"\n",t.createElement(e.p,null,"使用 Travis CI 对免费用户有 10000 分钟执行时间的限额，为了以后不再迁移，还是使用 Github Actions 吧！"),"\n",t.createElement(e.p,null,"接下来的内容主要参考了",t.createElement(e.a,{href:"https://hexo.io/docs/github-pages"},"英文文档"),"，在此基础上加上了自己的一些操作与理解。"),"\n",t.createElement(e.p,null,"假设您已经创建了一个 ",t.createElement(e.strong,null,"username.github.io")," 仓库，其中 username 是您在 Github 上的用户名。"),"\n",t.createElement(e.h3,null,"创建存放 Hexo 源的分支"),"\n",t.createElement(e.p,null,"众所周知，Hexo 首先通过 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Hexo generate</code>'}})," 方法构建了博客所有的 HTML, JS 和 CSS 文件，只需要将这些文件上传到 ",t.createElement(e.strong,null,"username.github.io")," 仓库，并在仓库设置中修改 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">GitHub Pages</code>'}})," 项的相应内容，就可以通过 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">username.github.io</code>'}})," 访问到您的博客了。"),"\n",t.createElement(e.p,null,"因此我们可以单独将构建前的所有文件放置在 ",t.createElement(e.strong,null,"username.github.io")," 仓库中的一个分支上，每次更新此分支后，自动通过 Github Actions 将构建出的所有文件推送到展示的分支上去。"),"\n",t.createElement(e.p,null,"这里，假设您展示的博客文件存放在 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">master</code>'}})," 分支，而 Hexo 源文件存放在新建的 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">source</code>'}})," 分支。"),"\n",t.createElement(e.h3,null,"编写 Github Actions"),"\n",t.createElement(e.p,null,"克隆此仓库到本地，切换到 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">source</code>'}})," 分支，在根目录下新建文件夹 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.github/workflows</code>'}}),"，在此目录下新建文件如 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">main.yml</code>'}}),". 名字并不重要。"),"\n",t.createElement(e.p,null,"您也可以在 Github 的仓库页面上点击 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Actions</code>'}})," 并创建新的工作流 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">main.yml</code>'}}),"。"),"\n",t.createElement(e.p,null,"编写工作流文件 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">main.yml</code>'}})," 如下所示："),"\n",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="yml"><pre class="language-yml"><code class="language-yml"><span class="token key atrule">name</span><span class="token punctuation">:</span> Hexo Blog CI &amp; CD\n\n<span class="token key atrule">on</span><span class="token punctuation">:</span>\n  <span class="token key atrule">push</span><span class="token punctuation">:</span>\n    <span class="token key atrule">branches</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> source <span class="token comment"># 存放 Hexo 源文件的分支</span>\n\n<span class="token key atrule">jobs</span><span class="token punctuation">:</span>\n  <span class="token key atrule">pages</span><span class="token punctuation">:</span>\n    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest\n    <span class="token key atrule">steps</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Use Node.js 12.x\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v1\n        <span class="token key atrule">with</span><span class="token punctuation">:</span>\n          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">"12.x"</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Cache NPM dependencies\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/cache@v2\n        <span class="token key atrule">with</span><span class="token punctuation">:</span>\n          <span class="token key atrule">path</span><span class="token punctuation">:</span> node_modules\n          <span class="token key atrule">key</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> runner.OS <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">-</span>npm<span class="token punctuation">-</span>cache\n          <span class="token key atrule">restore-keys</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">\n            ${{ runner.OS }}-npm-cache</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install Dependencies\n        <span class="token key atrule">run</span><span class="token punctuation">:</span> npm install\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Build\n        <span class="token key atrule">run</span><span class="token punctuation">:</span> npm run build\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> peaceiris/actions<span class="token punctuation">-</span>gh<span class="token punctuation">-</span>pages@v3\n        <span class="token key atrule">with</span><span class="token punctuation">:</span>\n          <span class="token key atrule">github_token</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.GITHUB_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment"># 无需修改</span>\n          <span class="token key atrule">publish_dir</span><span class="token punctuation">:</span> ./public <span class="token comment"># hexo generate 生成的博客文件默认存放在 /public 目录下</span>\n          <span class="token key atrule">publish_branch</span><span class="token punctuation">:</span> master <span class="token comment"># 存放展示的博客文件的分支</span></code></pre></div>'}}),"\n",t.createElement(e.p,null,"工作流采用了别人编写好的 ",t.createElement(e.a,{href:"https://github.com/peaceiris/actions-gh-pages"},"actions-gh-pages@v3"),"，其中 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">GITHUB_TOKEN</code>'}})," 为 Github Actions 在运行中自动生成的，用于验证身份的 Token，无需修改。关于 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">GITHUB_TOKEN</code>'}})," 的更多介绍，可以查看",t.createElement(e.a,{href:"https://docs.github.com/en/actions/reference/authentication-in-a-workflow"},"此文档"),"。"),"\n",t.createElement(e.p,null,"提交修改或保存此工作流文件，很快 Github Actions 就会开始自动执行，并将最新的博客文件推送到仓库的 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">master</code>'}})," 分支。"),"\n",t.createElement(e.p,null,"最后，等到 Github Pages 也更新完毕后，就可以访问您的博客啦！"),"\n",t.createElement(e.h3,null,"假如您采用了账户两重验证"),"\n",t.createElement(e.p,null,"Ops, 也许您的邮箱收到了一份新的邮件，遗憾地通知您 Github Actions 执行失败。这时您可以想一想自己是否启用了 Github 账号的双重验证或其它安全访问验证。这都可能导致自动部署失败。"),"\n",t.createElement(e.p,null,"但是别担心，您可以通过",t.createElement(e.a,{href:"https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-create-ssh-deploy-key"},"添加 SSH 身份验证"),"来解决这个问题。"),"\n",t.createElement(e.p,null,"首先，使用 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ssh-keygen -t rsa -C "YOUR USERNAME"</code>'}})," 命令创建一个新的 SSH key 公钥密钥对。"),"\n",t.createElement(e.p,null,"然后在 Github 上的 ",t.createElement(e.strong,null,"Account settings")," 中的 ",t.createElement(e.strong,null,"SSH and GPG keys")," 设置中保存带有 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.pub</code>'}})," 后缀的公钥，并在当前项目仓库的 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">secrets</code>'}})," 中存放不带任何后缀的密钥。"),"\n",t.createElement(e.p,null,"最后修改刚刚的 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">main.yml</code>'}})," 文件，添加 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">deploy_key</code>'}})," 设置，如下所示："),"\n",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="yml"><pre class="language-yml"><code class="language-yml"><span class="token key atrule">name</span><span class="token punctuation">:</span> Hexo Blog CI &amp; CD\n\n<span class="token key atrule">on</span><span class="token punctuation">:</span>\n  <span class="token key atrule">push</span><span class="token punctuation">:</span>\n    <span class="token key atrule">branches</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> source\n\n<span class="token key atrule">jobs</span><span class="token punctuation">:</span>\n  <span class="token key atrule">pages</span><span class="token punctuation">:</span>\n    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest\n    <span class="token key atrule">steps</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Use Node.js 12.x\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/setup<span class="token punctuation">-</span>node@v1\n        <span class="token key atrule">with</span><span class="token punctuation">:</span>\n          <span class="token key atrule">node-version</span><span class="token punctuation">:</span> <span class="token string">"12.x"</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Cache NPM dependencies\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/cache@v2\n        <span class="token key atrule">with</span><span class="token punctuation">:</span>\n          <span class="token key atrule">path</span><span class="token punctuation">:</span> node_modules\n          <span class="token key atrule">key</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> runner.OS <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">-</span>npm<span class="token punctuation">-</span>cache\n          <span class="token key atrule">restore-keys</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">\n            ${{ runner.OS }}-npm-cache</span>\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install Dependencies\n        <span class="token key atrule">run</span><span class="token punctuation">:</span> npm install\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Build\n        <span class="token key atrule">run</span><span class="token punctuation">:</span> npm run build\n      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy\n        <span class="token key atrule">uses</span><span class="token punctuation">:</span> peaceiris/actions<span class="token punctuation">-</span>gh<span class="token punctuation">-</span>pages@v3\n        <span class="token key atrule">with</span><span class="token punctuation">:</span>\n          <span class="token key atrule">github_token</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.GITHUB_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span>\n          <span class="token key atrule">deploy_key</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.ACCESS_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment"># 添加 ACCESS_TOKEN</span>\n          <span class="token key atrule">publish_dir</span><span class="token punctuation">:</span> ./public\n          <span class="token key atrule">publish_branch</span><span class="token punctuation">:</span> master</code></pre></div>'}}),"\n",t.createElement(e.p,null,"其中 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ACCESS_TOKEN</code>'}})," 为新建的 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">secret</code>'}})," 的名字，您应当修改为刚刚您创建 ",t.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">secret</code>'}})," 时指定的名字。"),"\n",t.createElement(e.p,null,"当然，您也可以生成 Github personal access token，本文不再赘述。"),"\n",t.createElement(e.p,null,"最后，提交您的修改，一切都工作得如此完美。"))}var c=function(n){void 0===n&&(n={});const{wrapper:e}=Object.assign({},(0,s.R)(),n.components);return e?t.createElement(e,n,t.createElement(l,n)):l(n)};var p=a(197),o=a(4353),u=a.n(o),r=a(4794),i=a(6947),k=a(4017),m=a(1042),g=a(1038);const h={a:n=>{let{href:e="",children:a}=n;const s=!(null!=e&&e.startsWith("#")),l=s?e:`#${encodeURIComponent(e.slice(1))}`;return t.createElement("a",{href:l,target:s?"_blank":void 0,rel:"noreferrer"},a)},img:n=>{const{alt:e="The author is too lazy to give an alt",src:a,...s}=n;return t.createElement("a",{href:a,"data-fancybox":"gallery","data-caption":e},t.createElement("img",Object.assign({src:a,alt:e},s)))},Card:i.A,Link:r.Link},d=n=>{let{children:e,data:a}=n;const{mdx:{frontmatter:{title:l,date:c,updated:o,categories:r,tags:i,timeliness:m=!0}}}=a,d=t.useRef(null),y=u()(c),E=o?u()(o):y,b=u()().diff(E,"days");return t.useEffect((()=>{var n;const e=null===(n=d.current)||void 0===n?void 0:n.querySelectorAll("a.gatsby-resp-image-link");return null==e||e.forEach((n=>{const e=n.children.item(1);n.setAttribute("data-fancybox","gallery"),n.setAttribute("data-caption",e.alt)})),p.lX.bind("[data-fancybox]"),()=>p.lX.unbind("[data-fancybox]")}),[]),t.createElement("div",{className:"mx-auto flex max-w-xl flex-col gap-y-12"},t.createElement("div",{className:"flex flex-col gap-4"},(null==r?void 0:r.length)&&t.createElement(k.A,{name:r[0],className:"item-selectable"}),t.createElement("h1",{className:"text-3xl font-bold"},l),t.createElement("div",{className:"item-secondary flex flex-col gap-2 lg:flex-row"},c&&t.createElement("span",{title:`首次发布于：${y.toString()}\n最后更新于：${E.toString()}`},y.format("MM 月 DD 日 YYYY 年")),(null==i?void 0:i.length)&&t.createElement("div",{className:"flex flex-1 flex-wrap gap-2 lg:before:content-['•']"},i.map((n=>t.createElement(g.A,{key:n,name:n,className:"item-secondary item-selectable"})))))),t.createElement("article",{ref:d,className:"heti post-entry"},m&&b>365&&t.createElement("blockquote",{className:"border-l-4 border-orange-400"},"这是一篇",t.createElement("strong",null,"最后更新于 ",b," 天前"),"的博客，内容可能随着时间的推移而变得不再适用，建议您仔细评估信息的有效性。"),t.createElement(s.x,{components:h},e)))},y=n=>{let{data:e}=n;return t.createElement(m.A,{title:String(e.mdx.frontmatter.title)})};function E(n){return t.createElement(d,n,t.createElement(c,n))}}}]);
//# sourceMappingURL=component---src-templates-post-tsx-content-file-path-blog-posts-hexo-github-actions-ci-cd-mdx-f5e6d676e57cbef90de8.js.map