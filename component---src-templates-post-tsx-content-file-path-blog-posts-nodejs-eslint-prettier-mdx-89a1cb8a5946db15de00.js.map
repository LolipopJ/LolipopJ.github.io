{"version":3,"file":"component---src-templates-post-tsx-content-file-path-blog-posts-nodejs-eslint-prettier-mdx-89a1cb8a5946db15de00.js","mappings":"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","sources":["webpack://homepage/./blog/posts/nodejs-eslint-prettier.mdx","webpack://homepage/./src/templates/post.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    blockquote: \"blockquote\",\n    span: \"span\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"哪位代码人不希望自己的代码总有统一优美的风格，不会因为合作开发项目而杂乱呢？\"), \"\\n\", React.createElement(_components.p, null, \"在最开始写项目代码的时候我就用起了 ESLint 和 Prettier，再装一堆预设的配置，便跑了起来。令人沮丧的是，用 ESLint 修复了代码\", React.createElement(_components.strong, null, \"质量\"), \"问题，还是会在编译器里看到红色波浪线，提醒还有些代码\", React.createElement(_components.strong, null, \"风格\"), \"需要修复。直到这一次，我才忽然意识到 ESLint 和 Prettier 其实分工了不同领域，协同使用体验极好。\"), \"\\n\", React.createElement(_components.p, null, \"本文基于 Nuxt.js + VSCode 阐述如何配置并实现 ESLint + Prettier 检查并规范代码质量与格式。\"), \"\\n\", React.createElement(_components.h2, null, \"ESLint 与 Prettier\"), \"\\n\", React.createElement(_components.p, null, \"ESLint 是一个开源的 JavaScript 代码检查工具，Prettier 是一款代码格式工具。它们的功能侧重如下所示：\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"ESLint：主要负责代码\", React.createElement(_components.strong, null, \"质量\"), \"的校验，其次包含代码\", React.createElement(_components.strong, null, \"风格\"), \"的检验。\"), \"\\n\", React.createElement(_components.li, null, \"Prettier：主要负责代码\", React.createElement(_components.strong, null, \"风格\"), \"的校验。\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"ESLint 认为代码风格并没有那么重要，因此并未完全解决代码风格问题。\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Rules are \\\"agenda free\\\" - ESLint does not promote any particular coding style.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"而 Prettier 则认为自己是固执己见的代码格式化工具。\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"An opinionated code formatter.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"尚且不论二者孰是孰非，作为开发者，一句“我全都要”就可以解决这个争论，同时让自己项目的代码享受美妙的质量校验与风格修复体验。\"), \"\\n\", React.createElement(_components.h2, null, \"安装依赖和编译器插件\"), \"\\n\", React.createElement(_components.p, null, \"首先，自然是安装 ESLint 和 Prettier 作为项目依赖。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token function\\\">yarn</span> <span class=\\\"token function\\\">add</span> <span class=\\\"token parameter variable\\\">--dev</span> eslint prettier</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"在 VSCode 扩展商店查找并安装：\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"ESLint\"), \"\\n\", React.createElement(_components.li, null, \"Prettier\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"在过去，我们可能会使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">prettier-eslint</code>\"\n    }\n  }), \" 作为项目依赖，通过它依次执行 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">prettier</code>\"\n    }\n  }), \" 然后是 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">eslint --fix</code>\"\n    }\n  }), \"，实现修复代码格式和质量问题。但是：\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"It's the recommended practice to let Prettier handle formatting and ESLint for non-formatting issues, \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">prettier-eslint</code>\"\n    }\n  }), \" is not in the same direction as that practice, hence \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">prettier-eslint</code>\"\n    }\n  }), \" is not recommended anymore. You can use \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">eslint-plugin-prettier</code>\"\n    }\n  }), \" and \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">eslint-config-prettier</code>\"\n    }\n  }), \" together.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"最佳实践是让 Prettier 处理代码格式问题，让 ESLint 处理代码质量问题。\"), \"\\n\", React.createElement(_components.p, null, \"这可以通过以下两个库实现：\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://github.com/prettier/eslint-plugin-prettier\"\n  }, \"eslint-plugin-prettier\"), \"：ESLint 插件，包括了 ESLint 需要检查的一些额外代码格式规则。在幕后，它使用到了 Prettier，相当于将 Prettier 作为 ESLint 的一部分运行。\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://github.com/prettier/eslint-config-prettier\"\n  }, \"eslint-config-prettier\"), \"：ESLint 配置，可以关闭所有不必要或者可能与 Prettier 产生冲突的代码格式规则。\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"二者相辅相成，eslint-config-prettier 可以关闭 ESLint 中与 Prettier 相冲突的代码格式规则，这样我们就将代码格式化的问题全都交给我们的 Prettier 处理。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token function\\\">yarn</span> <span class=\\\"token function\\\">add</span> <span class=\\\"token parameter variable\\\">--dev</span> eslint-plugin-prettier eslint-config-prettier</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"修改 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">.eslintrc.js</code>\"\n    }\n  }), \" 中配置，将 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">plugin:prettier/recommended</code>\"\n    }\n  }), \" 和 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">prettier</code>\"\n    }\n  }), \" 放到拓展的最后两项，如下所示：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// .eslintrc.js</span>\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">extends</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token string\\\">\\\"您使用的其它 ESLint 拓展\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"plugin:prettier/recommended\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token string\\\">\\\"prettier\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, null, \"配置 Prettier\"), \"\\n\", React.createElement(_components.p, null, \"参考 Prettier 的官方\", React.createElement(_components.a, {\n    href: \"https://prettier.io/docs/en/options.html\"\n  }, \"配置文档\"), \"，自由地配置项目代码的风格吧！\"), \"\\n\", React.createElement(_components.p, null, \"只需要在项目目录创建 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">.prettierrc.json</code>\"\n    }\n  }), \" 文件，填写配置即可。例如（注意，JSON 文件中不应该添加注释）：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"json\\\"><pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"semi\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 句末是否添加分号</span>\\n  <span class=\\\"token property\\\">\\\"singleQuote\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token comment\\\">// 是否使用单引号（而非双引号）</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"由于 Prettier 是以插件的形式添加到 ESLint 中，因此您需要在修改后重新启动 VSCode 工作区。\"), \"\\n\", React.createElement(_components.h2, null, \"现在就格式化代码吧\"), \"\\n\", React.createElement(_components.p, null, \"修改 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">package.json</code>\"\n    }\n  }), \" 文件，添加脚本：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"json\\\"><pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token comment\\\">// package.json</span>\\n<span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"scripts\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token property\\\">\\\"lint\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"eslint --ignore-path .gitignore --ext .ts,.js,.vue .\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"lint:fix\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"yarn lint --fix\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token property\\\">\\\"lint:prettier\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"prettier --ignore-path .gitignore --write **/* --ignore-unknown\\\"</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"这里笔者使用了比较偷懒的方法，调用了 Prettier 一键修复\", React.createElement(_components.strong, null, \"所有可修复\"), \"的代码风格问题，而不限于我们指定的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">.ts</code>\"\n    }\n  }), \" 文件等。既然在前面我们已经配置好了 ESLint 和 Prettier 之间的关系，所以在这里单独通过 Prettier 修复后，VSCode 中并不会显示可恶的红色波浪线。\"), \"\\n\", React.createElement(_components.p, null, \"根据上面的配置，可以在项目根目录下执行如下脚本：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token comment\\\"># 只检查 .ts, .js, .vue 文件的代码质量问题</span>\\n<span class=\\\"token function\\\">yarn</span> lint\\n<span class=\\\"token comment\\\"># 检查并修复 .ts, .js, .vue 文件的代码质量问题</span>\\n<span class=\\\"token function\\\">yarn</span> lint:fix\\n<span class=\\\"token comment\\\"># 修复所有可修复的代码风格问题</span>\\n<span class=\\\"token function\\\">yarn</span> lint:prettier</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"此外，VSCode 还可以设置\", React.createElement(_components.strong, null, \"保存时自动修复代码问题\"), \"，如下所示。这样执行 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Ctrl + S</code>\"\n    }\n  }), \" 保存时会自动格式化代码文件。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"json\\\"><pre class=\\\"language-json\\\"><code class=\\\"language-json\\\"><span class=\\\"token comment\\\">// settings.json</span>\\n<span class=\\\"token property\\\">\\\"editor.codeActionsOnSave\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token property\\\">\\\"source.fixAll.eslint\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token boolean\\\">true</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, null, \"参考资料\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://stackoverflow.com/questions/44690308/whats-the-difference-between-prettier-eslint-eslint-plugin-prettier-and-eslint\"\n  }, \"What's the difference between prettier-eslint, eslint-plugin-prettier and eslint-config-prettier?\"), \" - stackoverflow\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://github.com/prettier/prettier-eslint-cli/issues/208#issuecomment-673631308\"\n  }, \"Error: 'basePath' should be an absolute path\"), \" - mathiaswillburger - 2020.08.14\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://zhuanlan.zhihu.com/p/80574300\"\n  }, \"搞懂 ESLint 和 Prettier\"), \" - 乃乎 - 2019.08.31\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://www.jianshu.com/p/dd07cca0a48e\"\n  }, \"ESLint+Prettier 代码规范实践\"), \" - Bernie 维 - 2019.06.04\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/homepage/homepage/blog/posts/nodejs-eslint-prettier.mdx\";\nimport {Fancybox} from \"@fancyapps/ui\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport dayjs from \"dayjs\";\nimport {Link} from \"gatsby\";\nimport * as React from \"react\";\nimport Card from \"../components/card\";\nimport Category from \"../components/category\";\nimport SEO from \"../components/seo\";\nimport Tag from \"../components/tag\";\nconst FancyBoxImage = props => {\n  const {alt = \"The author is too lazy to give an alt\", src, ...restProps} = props;\n  return React.createElement(\"a\", {\n    href: src,\n    \"data-fancybox\": \"gallery\",\n    \"data-caption\": alt\n  }, React.createElement(\"img\", Object.assign({\n    src: src,\n    alt: alt\n  }, restProps)));\n};\nconst ALink = _ref => {\n  let {href = \"\", children} = _ref;\n  const isExternalHref = !(href !== null && href !== void 0 && href.startsWith(\"#\"));\n  const parsedHref = isExternalHref ? href : `#${encodeURIComponent(href.slice(1))}`;\n  return React.createElement(\"a\", {\n    href: parsedHref,\n    target: isExternalHref ? \"_blank\" : undefined,\n    rel: \"noreferrer\"\n  }, children);\n};\nconst components = {\n  a: ALink,\n  img: FancyBoxImage,\n  Card,\n  Link\n};\nconst PostTemplate = _ref2 => {\n  let {children, data} = _ref2;\n  const {mdx: {frontmatter: {title, date: dateString, updated: updatedDateString, categories, tags, timeliness = true}}} = data;\n  const articleRef = React.useRef(null);\n  const date = dayjs(dateString);\n  const updatedDate = updatedDateString ? dayjs(updatedDateString) : date;\n  const today = dayjs();\n  const diffDays = today.diff(updatedDate, \"days\");\n  React.useEffect(() => {\n    var _articleRef$current;\n    const optimizedImageLinks = (_articleRef$current = articleRef.current) === null || _articleRef$current === void 0 ? void 0 : _articleRef$current.querySelectorAll(\"a.gatsby-resp-image-link\");\n    optimizedImageLinks === null || optimizedImageLinks === void 0 ? void 0 : optimizedImageLinks.forEach(link => {\n      const image = link.children.item(1);\n      link.setAttribute(\"data-fancybox\", \"gallery\");\n      link.setAttribute(\"data-caption\", image.alt);\n    });\n    Fancybox.bind(\"[data-fancybox]\");\n    return () => Fancybox.unbind(\"[data-fancybox]\");\n  }, []);\n  return React.createElement(\"div\", {\n    className: \"mx-auto flex max-w-xl flex-col gap-y-12\"\n  }, React.createElement(\"div\", {\n    className: \"flex flex-col gap-4\"\n  }, (categories === null || categories === void 0 ? void 0 : categories.length) && React.createElement(Category, {\n    name: categories[0],\n    className: \"item-selectable\"\n  }), React.createElement(\"h1\", {\n    className: \"text-3xl font-bold\"\n  }, title), React.createElement(\"div\", {\n    className: \"item-secondary flex flex-col gap-2 lg:flex-row\"\n  }, dateString && React.createElement(\"span\", {\n    title: `首次发布于：${date.toString()}\\n最后更新于：${updatedDate.toString()}`\n  }, date.format(\"MM 月 DD 日 YYYY 年\")), (tags === null || tags === void 0 ? void 0 : tags.length) && React.createElement(\"div\", {\n    className: \"flex flex-1 flex-wrap gap-2 lg:before:content-['\\u2022']\"\n  }, tags.map(tag => React.createElement(Tag, {\n    key: tag,\n    name: tag,\n    className: \"item-secondary item-selectable\"\n  }))))), React.createElement(\"article\", {\n    ref: articleRef,\n    className: \"heti post-entry\"\n  }, timeliness && diffDays > 365 && React.createElement(\"blockquote\", {\n    className: \"border-l-4 border-orange-400\"\n  }, \"\\u8FD9\\u662F\\u4E00\\u7BC7\", React.createElement(\"strong\", null, \"\\u6700\\u540E\\u66F4\\u65B0\\u4E8E \", diffDays, \" \\u5929\\u524D\"), \"\\u7684\\u535A\\u5BA2\\uFF0C\\u5185\\u5BB9\\u53EF\\u80FD\\u968F\\u7740\\u65F6\\u95F4\\u7684\\u63A8\\u79FB\\u800C\\u53D8\\u5F97\\u4E0D\\u518D\\u9002\\u7528\\uFF0C\\u5EFA\\u8BAE\\u60A8\\u4ED4\\u7EC6\\u8BC4\\u4F30\\u4FE1\\u606F\\u7684\\u6709\\u6548\\u6027\\u3002\"), React.createElement(MDXProvider, {\n    components: components\n  }, children)));\n};\nconst query = \"2697480803\";\nexport const Head = _ref3 => {\n  let {data} = _ref3;\n  return React.createElement(SEO, {\n    title: String(data.mdx.frontmatter.title)\n  });\n};\nPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","strong","h2","ul","li","blockquote","span","a","_provideComponents","components","React","dangerouslySetInnerHTML","__html","href","wrapper","MDXLayout","_ref","children","isExternalHref","startsWith","parsedHref","encodeURIComponent","slice","target","undefined","rel","img","alt","src","restProps","Card","Link","PostTemplate","_ref2","data","mdx","frontmatter","title","date","dateString","updated","updatedDateString","categories","tags","timeliness","articleRef","dayjs","updatedDate","diffDays","diff","_articleRef$current","optimizedImageLinks","current","querySelectorAll","forEach","link","image","item","setAttribute","Fancybox","bind","unbind","className","length","Category","name","toString","format","map","tag","Tag","key","ref","MDXProvider","Head","_ref3","SEO","String","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}