{"version":3,"file":"component---src-templates-post-tsx-content-file-path-blog-posts-hello-hexo-world-mdx-be31c3ff33a07460cbba.js","mappings":"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","sources":["webpack://homepage/./blog/posts/hello-hexo-world.mdx","webpack://homepage/./src/templates/post.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    h3: \"h3\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    span: \"span\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"搭建一个自己的博客是多少投身于 IT 行业的男人女人们的梦想！撇开维护所花费的巨量时间开销不看，能够在网络上划得一片净土去传递自己的故事与思考，是一件何等快乐的事情！\"), \"\\n\", React.createElement(_components.p, null, \"正如许多人的第一篇博客那样，在这里记录下搭建博客的流程，也许能带给你些许决意和帮助。\"), \"\\n\", React.createElement(_components.h2, null, \"开始前\"), \"\\n\", React.createElement(_components.p, null, \"假设你已了解何为 Github Pages，并充分认识到它对于一个渴望搭建博客的中国人的难以替代性（是的，我不愿意备案）。在开始之前，我们首先要选择博客框架，并下载与之对应的依赖软件。\"), \"\\n\", React.createElement(_components.h3, null, \"Hello, Hexo\"), \"\\n\", React.createElement(_components.p, null, \"Hexo 基于 Node.js，是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\"), \"\\n\", React.createElement(_components.p, null, \"类似的生成静态网页的框架还有 Hugo、Jekyll、Ghost 等，各有所长。权衡利弊，我最终选择了简单且高效的 Hexo 框架。\"), \"\\n\", React.createElement(_components.p, null, \"访问 \", React.createElement(_components.a, {\n    href: \"https://hexo.io/zh-cn\"\n  }, \"Hexo 官网\"), \"总是开始的不二之选。\"), \"\\n\", React.createElement(_components.h3, null, \"依赖程序\"), \"\\n\", React.createElement(_components.p, null, \"安装 Hexo 十分简单，只需要先安装下列应用程序：\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://nodejs.org/en/\"\n  }, \"Node.js\"), \"（版本不低于 10.13.0）\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://git-scm.com/\"\n  }, \"Git\")), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"通常选择最新版本即可。\"), \"\\n\", React.createElement(_components.h3, null, \"安装 Hexo\"), \"\\n\", React.createElement(_components.p, null, \"安装完毕依赖程序后，打开 Git bash，使用 npm 命令一键安装 Hexo 5.x 版本以及所需依赖。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> <span class=\\\"token parameter variable\\\">-g</span> hexo-cli</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, null, \"搭建博客\"), \"\\n\", React.createElement(_components.h3, null, \"初始化\"), \"\\n\", React.createElement(_components.p, null, \"首先在 Git bash 的工作目录新建存放 Hexo 文件的文件夹，进入该文件夹并初始化。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">hexo init <span class=\\\"token punctuation\\\">[</span>文件夹名<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token builtin class-name\\\">cd</span> <span class=\\\"token punctuation\\\">[</span>文件夹名<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h3, null, \"修改配置文件\"), \"\\n\", React.createElement(_components.p, null, \"在 Hexo 目录下的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">_config.yml</code>\"\n    }\n  }), \" 修改大部分的配置，包括网站标题、副标题、您的名字、网站语言和网站时区等等。\"), \"\\n\", React.createElement(_components.p, null, \"可以参见 \", React.createElement(_components.a, {\n    href: \"https://hexo.io/zh-cn/docs/configuration\"\n  }, \"Hexo 配置官方文档\"), \"，按照自己的需求进行更改。\"), \"\\n\", React.createElement(_components.h3, null, \"部署到 Github Pages\"), \"\\n\", React.createElement(_components.p, null, \"登录你的 Github，新建一个 Repository，命名为 \", React.createElement(_components.strong, null, \"你的 Github 用户名.github.io\"), \"。\"), \"\\n\", React.createElement(_components.p, null, \"现在你可以随时通过浏览器访问 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">https://你的Github用户名.github.io</code>\"\n    }\n  }), \" 的方式，进入到库中根目录下的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">index.html</code>\"\n    }\n  }), \" 页面（如果有的话）。\"), \"\\n\", React.createElement(_components.p, null, \"Hexo 提供了快速方便的一键部署功能，配置完成以后只需要一条命令就可以将网站刷新并部署到网站上！\"), \"\\n\", React.createElement(_components.p, null, \"1.安装 hexo-deployer-git。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token function\\\">npm</span> <span class=\\\"token function\\\">install</span> hexo-deployer-git <span class=\\\"token parameter variable\\\">--save</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"2.修改 Hexo 目录下的配置文件 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">_config.yml</code>\"\n    }\n  }), \" 中 deploy 的内容如下。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"json\\\"><pre class=\\\"language-json\\\"><code class=\\\"language-json\\\">deploy<span class=\\\"token operator\\\">:</span>\\n  type<span class=\\\"token operator\\\">:</span> git\\n  repo<span class=\\\"token operator\\\">:</span> 你的 Github Pages 链接 # 例如https<span class=\\\"token operator\\\">:</span><span class=\\\"token comment\\\">//bitbucket.org/JohnSmith/johnsmith.bitbucket.io</span>\\n  branch<span class=\\\"token operator\\\">:</span> master</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"3.生成站点文件并推送至 Github 库。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\">hexo clean <span class=\\\"token operator\\\">&amp;&amp;</span> hexo deploy</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"至此，博客便已经搭建完毕了！Hexo 拥有一个 landscape 的初始主题，意味着现在你就可以访问你自己的 Github Pages 了！\"), \"\\n\", React.createElement(_components.p, null, \"更多的主题可以在 \", React.createElement(_components.a, {\n    href: \"https://hexo.io/themes\"\n  }, \"Hexo 官方主题页面\"), \"上选择。\"), \"\\n\", React.createElement(_components.h3, null, \"维护与更新博客\"), \"\\n\", React.createElement(_components.p, null, \"当执行 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">hexo deploy</code>\"\n    }\n  }), \" 时，Hexo 会将 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">public</code>\"\n    }\n  }), \" 目录中的文件和目录推送至 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">_config.yml</code>\"\n    }\n  }), \" 中指定的远端仓库和分支中，并且\", React.createElement(_components.strong, null, \"完全覆盖\"), \"该分支下的已有内容。\"), \"\\n\", React.createElement(_components.p, null, \"编写好博客推送以后，只需要用 Git bash 移动到 Hexo 目录，使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">hexo clean &amp;&amp; hexo deploy</code>\"\n    }\n  }), \" 命令（在 windows terminal 上请使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">hexo clean ; hexo deploy</code>\"\n    }\n  }), \"），即可完成博客页面的更新与同步了。\"), \"\\n\", React.createElement(_components.h2, null, \"关于\"), \"\\n\", React.createElement(_components.p, null, \"上述步骤由 \", React.createElement(_components.a, {\n    href: \"https://hexo.io/docs/\"\n  }, \"Hexo 官方文档\"), \"简化而来。\"), \"\\n\", React.createElement(_components.p, null, \"您可以随时访问官方文档获取最新的搭建博客方法和更多重要的使用方法。\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/homepage/homepage/blog/posts/hello-hexo-world.mdx\";\nimport {Fancybox} from \"@fancyapps/ui\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport dayjs from \"dayjs\";\nimport {Link} from \"gatsby\";\nimport * as React from \"react\";\nimport Card from \"../components/card\";\nimport Category from \"../components/category\";\nimport SEO from \"../components/seo\";\nimport Tag from \"../components/tag\";\nconst FancyBoxImage = props => {\n  const {alt = \"The author is too lazy to give an alt\", src, ...restProps} = props;\n  return React.createElement(\"a\", {\n    href: src,\n    \"data-fancybox\": \"gallery\",\n    \"data-caption\": alt\n  }, React.createElement(\"img\", Object.assign({\n    src: src,\n    alt: alt\n  }, restProps)));\n};\nconst ALink = _ref => {\n  let {href = \"\", children} = _ref;\n  const isExternalHref = !(href !== null && href !== void 0 && href.startsWith(\"#\"));\n  const parsedHref = isExternalHref ? href : `#${encodeURIComponent(href.slice(1))}`;\n  return React.createElement(\"a\", {\n    href: parsedHref,\n    target: isExternalHref ? \"_blank\" : undefined,\n    rel: \"noreferrer\"\n  }, children);\n};\nconst components = {\n  a: ALink,\n  img: FancyBoxImage,\n  Card,\n  Link\n};\nconst PostTemplate = _ref2 => {\n  let {children, data} = _ref2;\n  const {mdx: {frontmatter: {title, date: dateString, updated: updatedDateString, categories, tags, timeliness = true}}} = data;\n  const articleRef = React.useRef(null);\n  const date = dayjs(dateString);\n  const updatedDate = updatedDateString ? dayjs(updatedDateString) : date;\n  const today = dayjs();\n  const diffDays = today.diff(updatedDate, \"days\");\n  React.useEffect(() => {\n    var _articleRef$current;\n    const optimizedImageLinks = (_articleRef$current = articleRef.current) === null || _articleRef$current === void 0 ? void 0 : _articleRef$current.querySelectorAll(\"a.gatsby-resp-image-link\");\n    optimizedImageLinks === null || optimizedImageLinks === void 0 ? void 0 : optimizedImageLinks.forEach(link => {\n      const image = link.children.item(1);\n      link.setAttribute(\"data-fancybox\", \"gallery\");\n      link.setAttribute(\"data-caption\", image.alt);\n    });\n    Fancybox.bind(\"[data-fancybox]\");\n    return () => Fancybox.unbind(\"[data-fancybox]\");\n  }, []);\n  return React.createElement(\"div\", {\n    className: \"mx-auto flex max-w-xl flex-col gap-y-12\"\n  }, React.createElement(\"div\", {\n    className: \"flex flex-col gap-4\"\n  }, (categories === null || categories === void 0 ? void 0 : categories.length) && React.createElement(Category, {\n    name: categories[0],\n    className: \"item-selectable\"\n  }), React.createElement(\"h1\", {\n    className: \"text-3xl font-bold\"\n  }, title), React.createElement(\"div\", {\n    className: \"item-secondary flex flex-col gap-2 lg:flex-row\"\n  }, dateString && React.createElement(\"span\", {\n    title: `首次发布于：${date.toString()}\\n最后更新于：${updatedDate.toString()}`\n  }, date.format(\"MM 月 DD 日 YYYY 年\")), (tags === null || tags === void 0 ? void 0 : tags.length) && React.createElement(\"div\", {\n    className: \"flex flex-1 flex-wrap gap-2 lg:before:content-['\\u2022']\"\n  }, tags.map(tag => React.createElement(Tag, {\n    key: tag,\n    name: tag,\n    className: \"item-secondary item-selectable\"\n  }))))), React.createElement(\"article\", {\n    ref: articleRef,\n    className: \"heti post-entry\"\n  }, timeliness && diffDays > 365 && React.createElement(\"blockquote\", {\n    className: \"border-l-4 border-orange-400\"\n  }, \"\\u8FD9\\u662F\\u4E00\\u7BC7\", React.createElement(\"strong\", null, \"\\u6700\\u540E\\u66F4\\u65B0\\u4E8E \", diffDays, \" \\u5929\\u524D\"), \"\\u7684\\u535A\\u5BA2\\uFF0C\\u5185\\u5BB9\\u53EF\\u80FD\\u968F\\u7740\\u65F6\\u95F4\\u7684\\u63A8\\u79FB\\u800C\\u53D8\\u5F97\\u4E0D\\u518D\\u9002\\u7528\\uFF0C\\u5EFA\\u8BAE\\u60A8\\u4ED4\\u7EC6\\u8BC4\\u4F30\\u4FE1\\u606F\\u7684\\u6709\\u6548\\u6027\\u3002\"), React.createElement(MDXProvider, {\n    components: components\n  }, children)));\n};\nconst query = \"2697480803\";\nexport const Head = _ref3 => {\n  let {data} = _ref3;\n  return React.createElement(SEO, {\n    title: String(data.mdx.frontmatter.title)\n  });\n};\nPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h2","h3","a","ul","li","span","strong","_provideComponents","components","React","href","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","_ref","children","isExternalHref","startsWith","parsedHref","encodeURIComponent","slice","target","undefined","rel","img","alt","src","restProps","Card","Link","PostTemplate","_ref2","data","mdx","frontmatter","title","date","dateString","updated","updatedDateString","categories","tags","timeliness","articleRef","dayjs","updatedDate","diffDays","diff","_articleRef$current","optimizedImageLinks","current","querySelectorAll","forEach","link","image","item","setAttribute","Fancybox","bind","unbind","className","length","Category","name","toString","format","map","tag","Tag","key","ref","MDXProvider","Head","_ref3","SEO","String","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}