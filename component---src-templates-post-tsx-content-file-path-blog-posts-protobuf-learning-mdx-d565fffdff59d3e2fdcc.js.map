{"version":3,"file":"component---src-templates-post-tsx-content-file-path-blog-posts-protobuf-learning-mdx-d565fffdff59d3e2fdcc.js","mappings":"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","sources":["webpack://homepage/./blog/posts/protobuf-learning.mdx","webpack://homepage/./src/templates/post.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    strong: \"strong\",\n    a: \"a\",\n    span: \"span\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"实习中学习一下 Protobuf 的功能和语法等，整理为此笔记。主要为翻译官方文档而来。\"), \"\\n\", React.createElement(_components.h2, null, \"什么是 Protobuf\"), \"\\n\", React.createElement(_components.p, null, \"Protobuf 是 Google 公司研发的一种用于序列化结构数据的机制，全称为 Protocol Buffers，具有语言无关、平台无关以及可拓展的特性。\"), \"\\n\", React.createElement(_components.p, null, \"我们常常把 Protobuf 与 XML (Extensible Markup Language) 相比较，它们二者都被设计来传输和存储结构化数据。相比于 XML，Protobuf 有如下优势与缺点：\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Protobuf 占用的空间更小\"), \"。Protobuf 采用二进制格式存储数据，适合网络传输和高性能场景；而 XML 采用文本格式存储数据，数据冗余度较高。\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Protobuf 编码和解码更快\"), \"。测试 Protobuf 库和 tinyxml2 库执行序列化和反序列化操作（\", React.createElement(_components.a, {\n    href: \"https://zhuanlan.zhihu.com/p/91313277\"\n  }, \"相关链接\"), \"），Protobuf 序列化速度大约是 XML 的 5 - 9 倍，反序列化速度大约是 XML 的 9 - 12 倍，更加适合高性能场景。\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"Protobuf 不具有可读性\"), \"。Protobuf 传输的值为二进制数据，需要专用工具生成和解析；而 XML 自身的标签和文本内容具有一定的可读性。\"), \"\\n\"), \"\\n\", React.createElement(\"details\", null, React.createElement(\"summary\", null, \"使用 Protobuf，只需要编写 \", React.createElement(\"code\", null, \".proto\"), \" 文件来描述需要传输和存储的结构数据，随后编译器会为之创建一个类，实现结构数据的自动编码和解码。\"), React.createElement(_components.p, null, \"With protocol buffers, you write a .proto description of the data structure you wish to store. From that, the protocol buffer compiler creates a class that implements automatic encoding and parsing of the protocol buffer data with an efficient binary format. The generated class provides getters and setters for the fields that make up a protocol buffer and takes care of the details of reading and writing the protocol buffer as a unit.\")), \"\\n\", React.createElement(\"details\", null, React.createElement(\"summary\", null, \"此外，Protobuf 支持使用特定的方式来拓展格式，使代码能够解析以前格式编码得到的数据。\"), React.createElement(_components.p, null, \"Importantly, the protocol buffer format supports the idea of extending the format over time in such a way that the code can still read data encoded with the old format.\")), \"\\n\", React.createElement(_components.h2, null, \"定义协议格式\"), \"\\n\", React.createElement(_components.p, null, \"为了创建基于 Protobuf 的应用程序，我们需要首先创建一个 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">.proto</code>\"\n    }\n  }), \" 文件并且给出定义：为需要序列化的每个结构数据添加一条 \", React.createElement(_components.strong, null, \"message\"), \" ，然后为 message 的每个字段指定名称和类型。下面是一个来自官网的基于 C++ 语言的例子，可以让您对 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">.proto</code>\"\n    }\n  }), \" 文件有一个更加直观的了解：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"proto\\\"><pre class=\\\"language-proto\\\"><code class=\\\"language-proto\\\">syntax = &quot;proto2&quot;; // 协议版本\\n\\npackage tutorial; // 程序包声明\\n\\nmessage Person {\\n  optional string name = 1;\\n  optional int32 id = 2;\\n  optional string email = 3;\\n\\n  enum PhoneType {\\n    MOBILE = 0;\\n    HOME = 1;\\n    WORK = 2;\\n  }\\n\\n  message PhoneNumber {\\n    optional string number = 1;\\n    optional PhoneType type = 2 [default = HOME];\\n  }\\n\\n  repeated PhoneNumber phones = 4;\\n}\\n\\nmessage AddressBook {\\n  repeated Person people = 1;\\n}</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"在开头，首先指定了协议的版本，\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">syntax = \\\"proto2\\\";</code>\"\n    }\n  }), \" 表示应使用 proto2 进行编码和解码。同理，如果指定为 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">syntax = \\\"proto3\\\";</code>\"\n    }\n  }), \" 则表示应使用 proto3 进行编码和解码。如果不指定协议版本，在默认情况下，编译器会使用 proto2 进行编码和解码。\"), \"\\n\", React.createElement(_components.p, null, \"使用程序包声明 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">package tutorial;</code>\"\n    }\n  }), \" 有助于防止不同项目之间的命名发生冲突。在 C++ 中，生成的类将放置在与程序包名称匹配的命名空间中。\"), \"\\n\", React.createElement(_components.p, null, \"接下来就是最重要的 message 定义了。message 是包含一组字段类型的总合。我们将基于 \", React.createElement(_components.strong, null, \"proto3\"), \" 版本对 message 语法进行讲解与描述。\"), \"\\n\", React.createElement(_components.h2, null, \"proto3 基础语法\"), \"\\n\", React.createElement(_components.h3, null, React.createElement(_components.a, {\n    href: \"https://developers.google.com/protocol-buffers/docs/proto3#simple\"\n  }, \"定义消息类型\")), \"\\n\", React.createElement(_components.p, null, \"下面是一个非常简单的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">.proto</code>\"\n    }\n  }), \" 例子：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"proto\\\"><pre class=\\\"language-proto\\\"><code class=\\\"language-proto\\\">syntax = &quot;proto3&quot;;\\n\\nmessage SearchRequest {\\n  string query = 1;\\n  int32 page_number = 2;\\n  int32 result_per_page = 3;\\n}</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"其中第一行需要指定正在使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">proto3</code>\"\n    }\n  }), \" 语法，否则编译器将假定正在使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">proto2</code>\"\n    }\n  }), \" 语法。指定语法版本必须在文件的第一个非空、非注释行。\"), \"\\n\", React.createElement(_components.p, null, \"例子定义了一个名为 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">SearchRequest</code>\"\n    }\n  }), \" 的 message，存储了三个字段，包括字符串类型的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">query</code>\"\n    }\n  }), \" 和整数类型的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">page_number</code>\"\n    }\n  }), \" 与 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">result_per_page</code>\"\n    }\n  }), \". 三个字段均为标量值类型，所有可用的标量值类型可参考\", React.createElement(_components.a, {\n    href: \"https://developers.google.com/protocol-buffers/docs/proto3#scalar\"\n  }, \"此链接\"), \"。除了标量值类型，字段还可以使用枚举和其它 message 类型。\"), \"\\n\", React.createElement(_components.p, null, \"每个定义的字段都有一个\", React.createElement(_components.strong, null, \"唯一\"), \"的编号，用来标识二进制格式下的字段。例如 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">query</code>\"\n    }\n  }), \" 字段的唯一编号为 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">1</code>\"\n    }\n  }), \". 对字段编号的补充可参考\", React.createElement(_components.a, {\n    href: \"https://developers.google.com/protocol-buffers/docs/proto3#assigning_field_numbers\"\n  }, \"此链接\"), \"。\"), \"\\n\", React.createElement(_components.h3, null, React.createElement(_components.a, {\n    href: \"https://developers.google.com/protocol-buffers/docs/proto3#specifying_field_rules\"\n  }, \"字段规则\")), \"\\n\", React.createElement(_components.p, null, \"与 proto2 不同的是，proto3 只包括两种字段规则：\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"singular. 一则 message 只能拥有不超过一个该字段。是\", React.createElement(_components.strong, null, \"默认\"), \"的字段规则，不需要特别指定；\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">repeated</code>\"\n    }\n  }), \". 一则 message 可以拥有任意个该字段。重复值的顺序将被保留。\"), \"\\n\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"proto\\\"><pre class=\\\"language-proto\\\"><code class=\\\"language-proto\\\">message SearchRequest {\\n  string query = 1;\\n  int32 page_number = 2;\\n  int32 result_per_page = 3;\\n  repeated string query_extras = 4;\\n}</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"上例中定义了三个 singular 字段 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">query</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">page_number</code>\"\n    }\n  }), \" 和 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">result_per_page</code>\"\n    }\n  }), \"，以及一个 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">repeated</code>\"\n    }\n  }), \" 字段 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">query_extras</code>\"\n    }\n  }), \".\"), \"\\n\", React.createElement(\"details\", null, React.createElement(\"summary\", null, React.createElement(_components.p, null, \"作为补充，proto2 包括三种字段规则：\", React.createElement(\"code\", null, \"required\"), \", \", React.createElement(\"code\", null, \"optional\"), \" 和 \", React.createElement(\"code\", null, \"repeated\"), \".\")), React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">required</code>\"\n    }\n  }), \". 一则 message 中必须且只能拥有一个该字段；\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">optional</code>\"\n    }\n  }), \". 一则 message 中只能拥有不超过一个该字段，相当于 proto3 的 singular.\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">repeated</code>\"\n    }\n  }), \". 一则 message 可以拥有任意个该字段，相当于 proto3 的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">repeated</code>\"\n    }\n  }), \".\"), \"\\n\"), React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"(https://developers.google.com/protocol-buffers/docs/proto#specifying_field_rules)\"\n  }, \"相关链接\"))), \"\\n\", React.createElement(_components.h3, null, React.createElement(_components.a, {\n    href: \"https://developers.google.com/protocol-buffers/docs/proto3#reserved\"\n  }, \"保留字段\")), \"\\n\", React.createElement(_components.p, null, \"当更新 message 定义需要完全移除一个字段时，则将来的用户在自己对该类型进行更新时可以重用该字段号。为了保证在读取旧版本的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">.proto</code>\"\n    }\n  }), \" 时不引发问题，需要将已删除字段的字段编号（或名称）指定为 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">reserved</code>\"\n    }\n  }), \"，这样将来任何用户在更新 message 时尝试使用这些字段号（或名称）时，编译器会报错。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"proto\\\"><pre class=\\\"language-proto\\\"><code class=\\\"language-proto\\\">message Foo {\\n  reserved 2, 15, 9 to 11;\\n  reserved &quot;foo&quot;, &quot;bar&quot;;\\n}</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"上述内容指定了 2, 9, 10, 11, 15 为保留字段号，指定了 foo, bar 为保留字段名。在以后的编写中不应当被使用。\"), \"\\n\", React.createElement(_components.p, null, \"需要注意的是，不能在一条 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">reserved</code>\"\n    }\n  }), \" 语句中同时使用字段号和字段名。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"proto\\\"><pre class=\\\"language-proto\\\"><code class=\\\"language-proto\\\">reserved 2, 15, &quot;foo&quot;; // wrong!</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h3, null, React.createElement(_components.a, {\n    href: \"https://developers.google.com/protocol-buffers/docs/proto3#enum\"\n  }, \"使用枚举类型\")), \"\\n\", React.createElement(_components.p, null, \"当只希望某一个字段的取值为预定义值的某一个时，可以使用枚举。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"proto\\\"><pre class=\\\"language-proto\\\"><code class=\\\"language-proto\\\">message SearchRequest {\\n  string query = 1;\\n  int32 page_number = 2;\\n  int32 result_per_page = 3;\\n  enum Corpus {\\n    UNIVERSAL = 0;\\n    WEB = 1;\\n    IMAGES = 2;\\n    LOCAL = 3;\\n    NEWS = 4;\\n    PRODUCTS = 5;\\n    VIDEO = 6;\\n  }\\n  Corpus corpus = 4;\\n}</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"上例中我们定义了名为 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Corpus</code>\"\n    }\n  }), \" 的枚举，其中包括 7 种可能的取值。接下来，我们就可以添加使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Corpus</code>\"\n    }\n  }), \" 枚举的字段 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">corpus</code>\"\n    }\n  }), \".\"), \"\\n\", React.createElement(_components.p, null, \"为了定义枚举常量的别名，我们可以将相同的值分配给不同的枚举常量名。为此，首先需要将 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">allow_alias</code>\"\n    }\n  }), \" 选项设置为 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">true</code>\"\n    }\n  }), \"，否则将会报错。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"proto\\\"><pre class=\\\"language-proto\\\"><code class=\\\"language-proto\\\">message MyMessage {\\n  enum EnumAllowingAlias {\\n    option allow_alias = true;\\n    UNKNOWN = 0;\\n    STARTED = 1;\\n    RUNNING = 1; // It works.\\n  }\\n  EnumAllowingAlias enum_allowing_alias = 1;\\n}</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"上例中，\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">STARTED</code>\"\n    }\n  }), \" 和 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">RUNNING</code>\"\n    }\n  }), \" 为同一枚举常量的不同别名。\"), \"\\n\", React.createElement(_components.h3, null, React.createElement(_components.a, {\n    href: \"https://developers.google.com/protocol-buffers/docs/proto3#other\"\n  }, \"使用 Message 类型\")), \"\\n\", React.createElement(_components.p, null, \"为了使消息结构更加清晰，我们可以指定其他 message 类型作为字段类型，实现嵌套。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"proto\\\"><pre class=\\\"language-proto\\\"><code class=\\\"language-proto\\\">message SearchResponse {\\n  repeated Result results = 1;\\n}\\n\\nmessage Result {\\n  string url = 1;\\n  string title = 2;\\n  repeated string snippets = 3;\\n}</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"上例中定义了两种不同的 message 类型，\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">SearchResponse</code>\"\n    }\n  }), \" 和 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Result</code>\"\n    }\n  }), \". 其中 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">SearchResponse</code>\"\n    }\n  }), \" 拥有一个 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">results</code>\"\n    }\n  }), \" 字段，其字段类型为 message 类型 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Result</code>\"\n    }\n  }), \".\"), \"\\n\", React.createElement(_components.h3, null, React.createElement(_components.a, {\n    href: \"https://developers.google.com/protocol-buffers/docs/proto3#nested\"\n  }, \"使用嵌套类型\")), \"\\n\", React.createElement(_components.p, null, \"也许您不需要复用一些 message 类型，我们也可以将 message 类型放在 message 当中。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"proto\\\"><pre class=\\\"language-proto\\\"><code class=\\\"language-proto\\\">message SearchResponse {\\n  message Result {\\n    string url = 1;\\n    string title = 2;\\n    repeated string snippets = 3;\\n  }\\n  repeated Result results = 1;\\n}</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"上例与前一小段的例子有相同的效果。\"), \"\\n\", React.createElement(_components.p, null, \"嵌套类型不限定层数，可以根据需要进行深层嵌套。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"proto\\\"><pre class=\\\"language-proto\\\"><code class=\\\"language-proto\\\">message Outer { // Level 0\\n  message MiddleAA { // Level 1\\n    message Inner { // Level 2\\n      int64 ival = 1;\\n      bool  booly = 2;\\n    }\\n  }\\n  message MiddleBB { // Level 1\\n    message Inner { // Level 2\\n      int32 ival = 1;\\n      bool  booly = 2;\\n    }\\n  }\\n}</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"其中，\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">MiddleAA</code>\"\n    }\n  }), \" 中的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Inner</code>\"\n    }\n  }), \" 与 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">MiddleBB</code>\"\n    }\n  }), \" 中的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Inner</code>\"\n    }\n  }), \" 虽然有相同的字段名，但存储的是不同的内容。\"), \"\\n\", React.createElement(_components.h3, null, \"其它字段类型\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://developers.google.com/protocol-buffers/docs/proto3#any\"\n  }, \"Any\"), \".\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://developers.google.com/protocol-buffers/docs/proto3#oneof\"\n  }, \"Oneof\"), \".\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://developers.google.com/protocol-buffers/docs/proto3#maps\"\n  }, \"Maps\"), \".\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"定义为 RPC 服务\"), \"\\n\", React.createElement(_components.p, null, \"如果想要将 message 类型用于 RPC 系统，可以在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">.proto</code>\"\n    }\n  }), \" 文件中定义 RPC 服务接口，编译器将根据使用的语言生成 RPC 服务接口并打桩。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"proto\\\"><pre class=\\\"language-proto\\\"><code class=\\\"language-proto\\\">service SearchService {\\n  rpc Search(SearchRequest) returns (SearchResponse);\\n}</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"上例定义了一个名为 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">SearchService</code>\"\n    }\n  }), \" 的 RPC 服务，其中包含了一个 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Search</code>\"\n    }\n  }), \" 方法，其参数为 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">SearchRequest</code>\"\n    }\n  }), \" 类型的 message，返回值为 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">SearchResponse</code>\"\n    }\n  }), \" 类型的 message.\"), \"\\n\", React.createElement(_components.p, null, \"能够与 Protobuf 最直接对接的 RPC 系统是 gRPC，同样由 Google 公司开发的语言无关、平台无关的开源 RPC 系统。如果使用 gRPC，只需要使用一个特殊的 \", React.createElement(_components.a, {\n    href: \"https://grpc.io/docs/protoc-installation/\"\n  }, \"gRPC 插件\"), \"，就可以根据 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">.proto</code>\"\n    }\n  }), \" 文件里的内容自动生成 RPC 代码。\"), \"\\n\", React.createElement(_components.h2, null, \"编译 .proto 文件\"), \"\\n\", React.createElement(_components.p, null, \"首先编译并配置好 Protoc，并且安装了 Go 语言插件 protoc-gen-go.\"), \"\\n\", React.createElement(_components.p, null, \"参考官网给出的例子，我分别编写了 Go 和 C++ 版本的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">.proto</code>\"\n    }\n  }), \" 文件：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"proto\\\"><pre class=\\\"language-proto\\\"><code class=\\\"language-proto\\\">// addressbook-go.proto\\nsyntax = &quot;proto3&quot;;\\npackage tutorial;\\n\\nimport &quot;google/protobuf/timestamp.proto&quot;;\\n\\n// go_package 选项定义了软件包的导入路径\\n// 对于 go 版本，包含 go_package 设置的内容；cpp 版本应注释掉\\noption go_package = &quot;github.com/protocolbuffers/protobuf/examples/go/tutorialpb&quot;;\\n\\nmessage Person {\\n  string name = 1;\\n  int32 id = 2;\\n  string email = 3;\\n\\n  enum PhoneType {\\n    MOBILE = 0;\\n    HOME = 1;\\n    WORK = 2;\\n  }\\n\\n  message PhoneNumber {\\n    string number = 1;\\n    PhoneType type = 2;\\n  }\\n\\n  repeated PhoneNumber phones = 4;\\n\\n  google.protobuf.Timestamp last_updated = 5;\\n}\\n\\nmessage AddressBook {\\n  repeated Person people = 1;\\n}</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">protoc</code>\"\n    }\n  }), \" 命令对编写的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">.protoc</code>\"\n    }\n  }), \" 文件进行编译。\"), \"\\n\", React.createElement(_components.h3, null, \"Go 版本编译\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token comment\\\"># 编译 Go 版本的 .protoc 文件</span>\\nprotoc <span class=\\\"token parameter variable\\\">-I</span><span class=\\\"token operator\\\">=</span><span class=\\\"token variable\\\">$SRC_DIR</span> <span class=\\\"token parameter variable\\\">--go_out</span><span class=\\\"token operator\\\">=</span><span class=\\\"token variable\\\">$DST_DIR</span> <span class=\\\"token variable\\\">$SRC_DIR</span>/addressbook-go.proto</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"编译 Go 版本，会在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">$DST_DIR/github.com/protocolbuffers/protobuf/examples/go/tutorialpb</code>\"\n    }\n  }), \" 目录下生成 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">addressbook-go.pb.go</code>\"\n    }\n  }), \" 文件。\"), \"\\n\", React.createElement(_components.p, null, \"示例代码 \", React.createElement(_components.a, {\n    href: \"https://github.com/protocolbuffers/protobuf/blob/master/examples/list_people.go\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">list_people.go</code>\"\n    }\n  })), \" 展示了如何打印出 AddressBook 中所有的 Person 信息：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"go\\\"><pre class=\\\"language-go\\\"><code class=\\\"language-go\\\"><span class=\\\"token keyword\\\">func</span> <span class=\\\"token function\\\">writePerson</span><span class=\\\"token punctuation\\\">(</span>w io<span class=\\\"token punctuation\\\">.</span>Writer<span class=\\\"token punctuation\\\">,</span> p <span class=\\\"token operator\\\">*</span>pb<span class=\\\"token punctuation\\\">.</span>Person<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    fmt<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Fprintln</span><span class=\\\"token punctuation\\\">(</span>w<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"Person ID:\\\"</span><span class=\\\"token punctuation\\\">,</span> p<span class=\\\"token punctuation\\\">.</span>Id<span class=\\\"token punctuation\\\">)</span>\\n    fmt<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Fprintln</span><span class=\\\"token punctuation\\\">(</span>w<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"  Name:\\\"</span><span class=\\\"token punctuation\\\">,</span> p<span class=\\\"token punctuation\\\">.</span>Name<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token keyword\\\">if</span> p<span class=\\\"token punctuation\\\">.</span>Email <span class=\\\"token operator\\\">!=</span> <span class=\\\"token string\\\">\\\"\\\"</span> <span class=\\\"token punctuation\\\">{</span>\\n        fmt<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Fprintln</span><span class=\\\"token punctuation\\\">(</span>w<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"  E-mail address:\\\"</span><span class=\\\"token punctuation\\\">,</span> p<span class=\\\"token punctuation\\\">.</span>Email<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token boolean\\\">_</span><span class=\\\"token punctuation\\\">,</span> pn <span class=\\\"token operator\\\">:=</span> <span class=\\\"token keyword\\\">range</span> p<span class=\\\"token punctuation\\\">.</span>Phones <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">switch</span> pn<span class=\\\"token punctuation\\\">.</span>Type <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">case</span> pb<span class=\\\"token punctuation\\\">.</span>Person_MOBILE<span class=\\\"token punctuation\\\">:</span>\\n            fmt<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Fprint</span><span class=\\\"token punctuation\\\">(</span>w<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"  Mobile phone #: \\\"</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">case</span> pb<span class=\\\"token punctuation\\\">.</span>Person_HOME<span class=\\\"token punctuation\\\">:</span>\\n            fmt<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Fprint</span><span class=\\\"token punctuation\\\">(</span>w<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"  Home phone #: \\\"</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">case</span> pb<span class=\\\"token punctuation\\\">.</span>Person_WORK<span class=\\\"token punctuation\\\">:</span>\\n            fmt<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Fprint</span><span class=\\\"token punctuation\\\">(</span>w<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"  Work phone #: \\\"</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        fmt<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">Fprintln</span><span class=\\\"token punctuation\\\">(</span>w<span class=\\\"token punctuation\\\">,</span> pn<span class=\\\"token punctuation\\\">.</span>Number<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">func</span> <span class=\\\"token function\\\">listPeople</span><span class=\\\"token punctuation\\\">(</span>w io<span class=\\\"token punctuation\\\">.</span>Writer<span class=\\\"token punctuation\\\">,</span> book <span class=\\\"token operator\\\">*</span>pb<span class=\\\"token punctuation\\\">.</span>AddressBook<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token boolean\\\">_</span><span class=\\\"token punctuation\\\">,</span> p <span class=\\\"token operator\\\">:=</span> <span class=\\\"token keyword\\\">range</span> book<span class=\\\"token punctuation\\\">.</span>People <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">writePerson</span><span class=\\\"token punctuation\\\">(</span>w<span class=\\\"token punctuation\\\">,</span> p<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h3, null, \"C++ 版本编译\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token comment\\\"># 编译 C++ 版本的 .protoc 文件</span>\\nprotoc <span class=\\\"token parameter variable\\\">-I</span><span class=\\\"token operator\\\">=</span><span class=\\\"token variable\\\">$SRC_DIR</span> <span class=\\\"token parameter variable\\\">--cpp_out</span><span class=\\\"token operator\\\">=</span><span class=\\\"token variable\\\">$DST_DIR</span> <span class=\\\"token variable\\\">$SRC_DIR</span>/addressbook-cpp.proto</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"编译 C++ 版本，会在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">$DST_DIR</code>\"\n    }\n  }), \" 目录下生成 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">addressbook-cpp.pb.cc</code>\"\n    }\n  }), \" 和 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">addressbook-cpp.pb.h</code>\"\n    }\n  }), \" 两个文件。\"), \"\\n\", React.createElement(_components.p, null, \"示例代码 \", React.createElement(_components.a, {\n    href: \"https://github.com/protocolbuffers/protobuf/blob/master/examples/list_people.cc\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">list_people.cc</code>\"\n    }\n  })), \" 展示了如何打印出 AddressBook 中所有的 Person 信息：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"cpp\\\"><pre class=\\\"language-cpp\\\"><code class=\\\"language-cpp\\\"><span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">ListPeople</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> tutorial<span class=\\\"token double-colon punctuation\\\">::</span>AddressBook<span class=\\\"token operator\\\">&amp;</span> address_book<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> address_book<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">people_size</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> tutorial<span class=\\\"token double-colon punctuation\\\">::</span>Person<span class=\\\"token operator\\\">&amp;</span> person <span class=\\\"token operator\\\">=</span> address_book<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">people</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    cout <span class=\\\"token operator\\\">&lt;&lt;</span> <span class=\\\"token string\\\">\\\"Person ID: \\\"</span> <span class=\\\"token operator\\\">&lt;&lt;</span> person<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">id</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&lt;&lt;</span> endl<span class=\\\"token punctuation\\\">;</span>\\n    cout <span class=\\\"token operator\\\">&lt;&lt;</span> <span class=\\\"token string\\\">\\\"  Name: \\\"</span> <span class=\\\"token operator\\\">&lt;&lt;</span> person<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">name</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&lt;&lt;</span> endl<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>person<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">email</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">!=</span> <span class=\\\"token string\\\">\\\"\\\"</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      cout <span class=\\\"token operator\\\">&lt;&lt;</span> <span class=\\\"token string\\\">\\\"  E-mail address: \\\"</span> <span class=\\\"token operator\\\">&lt;&lt;</span> person<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">email</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&lt;&lt;</span> endl<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> j <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">&lt;</span> person<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">phones_size</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> j<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> tutorial<span class=\\\"token double-colon punctuation\\\">::</span>Person<span class=\\\"token double-colon punctuation\\\">::</span>PhoneNumber<span class=\\\"token operator\\\">&amp;</span> phone_number <span class=\\\"token operator\\\">=</span> person<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">phones</span><span class=\\\"token punctuation\\\">(</span>j<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n      <span class=\\\"token keyword\\\">switch</span> <span class=\\\"token punctuation\\\">(</span>phone_number<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">type</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">case</span> tutorial<span class=\\\"token double-colon punctuation\\\">::</span>Person<span class=\\\"token double-colon punctuation\\\">::</span>MOBILE<span class=\\\"token operator\\\">:</span>\\n          cout <span class=\\\"token operator\\\">&lt;&lt;</span> <span class=\\\"token string\\\">\\\"  Mobile phone #: \\\"</span><span class=\\\"token punctuation\\\">;</span>\\n          <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">case</span> tutorial<span class=\\\"token double-colon punctuation\\\">::</span>Person<span class=\\\"token double-colon punctuation\\\">::</span>HOME<span class=\\\"token operator\\\">:</span>\\n          cout <span class=\\\"token operator\\\">&lt;&lt;</span> <span class=\\\"token string\\\">\\\"  Home phone #: \\\"</span><span class=\\\"token punctuation\\\">;</span>\\n          <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">case</span> tutorial<span class=\\\"token double-colon punctuation\\\">::</span>Person<span class=\\\"token double-colon punctuation\\\">::</span>WORK<span class=\\\"token operator\\\">:</span>\\n          cout <span class=\\\"token operator\\\">&lt;&lt;</span> <span class=\\\"token string\\\">\\\"  Work phone #: \\\"</span><span class=\\\"token punctuation\\\">;</span>\\n          <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">default</span><span class=\\\"token operator\\\">:</span>\\n          cout <span class=\\\"token operator\\\">&lt;&lt;</span> <span class=\\\"token string\\\">\\\"  Unknown phone #: \\\"</span><span class=\\\"token punctuation\\\">;</span>\\n          <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n      cout <span class=\\\"token operator\\\">&lt;&lt;</span> phone_number<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">number</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&lt;&lt;</span> endl<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>person<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">has_last_updated</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      cout <span class=\\\"token operator\\\">&lt;&lt;</span> <span class=\\\"token string\\\">\\\"  Updated: \\\"</span> <span class=\\\"token operator\\\">&lt;&lt;</span> <span class=\\\"token class-name\\\">TimeUtil</span><span class=\\\"token double-colon punctuation\\\">::</span><span class=\\\"token function\\\">ToString</span><span class=\\\"token punctuation\\\">(</span>person<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">last_updated</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">&lt;&lt;</span> endl<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/homepage/homepage/blog/posts/protobuf-learning.mdx\";\nimport {Fancybox} from \"@fancyapps/ui\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport dayjs from \"dayjs\";\nimport {Link} from \"gatsby\";\nimport * as React from \"react\";\nimport Card from \"../components/card\";\nimport Category from \"../components/category\";\nimport SEO from \"../components/seo\";\nimport Tag from \"../components/tag\";\nconst FancyBoxImage = props => {\n  const {alt = \"The author is too lazy to give an alt\", src, ...restProps} = props;\n  return React.createElement(\"a\", {\n    href: src,\n    \"data-fancybox\": \"gallery\",\n    \"data-caption\": alt\n  }, React.createElement(\"img\", Object.assign({\n    src: src,\n    alt: alt\n  }, restProps)));\n};\nconst ALink = _ref => {\n  let {href = \"\", children} = _ref;\n  const isExternalHref = !(href !== null && href !== void 0 && href.startsWith(\"#\"));\n  const parsedHref = isExternalHref ? href : `#${encodeURIComponent(href.slice(1))}`;\n  return React.createElement(\"a\", {\n    href: parsedHref,\n    target: isExternalHref ? \"_blank\" : undefined,\n    rel: \"noreferrer\"\n  }, children);\n};\nconst components = {\n  a: ALink,\n  img: FancyBoxImage,\n  Card,\n  Link\n};\nconst PostTemplate = _ref2 => {\n  let {children, data} = _ref2;\n  const {mdx: {frontmatter: {title, date: dateString, updated: updatedDateString, categories, tags, timeliness = true}}} = data;\n  const articleRef = React.useRef(null);\n  const date = dayjs(dateString);\n  const updatedDate = updatedDateString ? dayjs(updatedDateString) : date;\n  const today = dayjs();\n  const diffDays = today.diff(updatedDate, \"days\");\n  React.useEffect(() => {\n    var _articleRef$current;\n    const optimizedImageLinks = (_articleRef$current = articleRef.current) === null || _articleRef$current === void 0 ? void 0 : _articleRef$current.querySelectorAll(\"a.gatsby-resp-image-link\");\n    optimizedImageLinks === null || optimizedImageLinks === void 0 ? void 0 : optimizedImageLinks.forEach(link => {\n      const image = link.children.item(1);\n      link.setAttribute(\"data-fancybox\", \"gallery\");\n      link.setAttribute(\"data-caption\", image.alt);\n    });\n    Fancybox.bind(\"[data-fancybox]\");\n    return () => Fancybox.unbind(\"[data-fancybox]\");\n  }, []);\n  return React.createElement(\"div\", {\n    className: \"mx-auto flex max-w-xl flex-col gap-y-12\"\n  }, React.createElement(\"div\", {\n    className: \"flex flex-col gap-4\"\n  }, (categories === null || categories === void 0 ? void 0 : categories.length) && React.createElement(Category, {\n    name: categories[0],\n    className: \"item-selectable\"\n  }), React.createElement(\"h1\", {\n    className: \"text-3xl font-bold\"\n  }, title), React.createElement(\"div\", {\n    className: \"item-secondary flex flex-col gap-2 lg:flex-row\"\n  }, dateString && React.createElement(\"span\", {\n    title: `首次发布于：${date.toString()}\\n最后更新于：${updatedDate.toString()}`\n  }, date.format(\"MM 月 DD 日 YYYY 年\")), (tags === null || tags === void 0 ? void 0 : tags.length) && React.createElement(\"div\", {\n    className: \"flex flex-1 flex-wrap gap-2 lg:before:content-['\\u2022']\"\n  }, tags.map(tag => React.createElement(Tag, {\n    key: tag,\n    name: tag,\n    className: \"item-secondary item-selectable\"\n  }))))), React.createElement(\"article\", {\n    ref: articleRef,\n    className: \"heti post-entry\"\n  }, timeliness && diffDays > 365 && React.createElement(\"blockquote\", {\n    className: \"border-l-4 border-orange-400\"\n  }, \"\\u8FD9\\u662F\\u4E00\\u7BC7\", React.createElement(\"strong\", null, \"\\u6700\\u540E\\u66F4\\u65B0\\u4E8E \", diffDays, \" \\u5929\\u524D\"), \"\\u7684\\u535A\\u5BA2\\uFF0C\\u5185\\u5BB9\\u53EF\\u80FD\\u968F\\u7740\\u65F6\\u95F4\\u7684\\u63A8\\u79FB\\u800C\\u53D8\\u5F97\\u4E0D\\u518D\\u9002\\u7528\\uFF0C\\u5EFA\\u8BAE\\u60A8\\u4ED4\\u7EC6\\u8BC4\\u4F30\\u4FE1\\u606F\\u7684\\u6709\\u6548\\u6027\\u3002\"), React.createElement(MDXProvider, {\n    components: components\n  }, children)));\n};\nconst query = \"2697480803\";\nexport const Head = _ref3 => {\n  let {data} = _ref3;\n  return React.createElement(SEO, {\n    title: String(data.mdx.frontmatter.title)\n  });\n};\nPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h2","ul","li","strong","a","span","h3","_provideComponents","components","React","href","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","_ref","children","isExternalHref","startsWith","parsedHref","encodeURIComponent","slice","target","undefined","rel","img","alt","src","restProps","Card","Link","PostTemplate","_ref2","data","mdx","frontmatter","title","date","dateString","updated","updatedDateString","categories","tags","timeliness","articleRef","dayjs","updatedDate","diffDays","diff","_articleRef$current","optimizedImageLinks","current","querySelectorAll","forEach","link","image","item","setAttribute","Fancybox","bind","unbind","className","length","Category","name","toString","format","map","tag","Tag","key","ref","MDXProvider","Head","_ref3","SEO","String","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}