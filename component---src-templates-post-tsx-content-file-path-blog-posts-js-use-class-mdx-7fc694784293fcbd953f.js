"use strict";(self.webpackChunkhomepage=self.webpackChunkhomepage||[]).push([[161],{90:function(n,s,a){a.r(s),a.d(s,{Head:function(){return y},default:function(){return E}});var t=a(8453),e=a(6540);function p(n){const s=Object.assign({p:"p",span:"span",strong:"strong",a:"a",h2:"h2",h3:"h3",ul:"ul",li:"li"},(0,t.R)(),n.components);return e.createElement(e.Fragment,null,e.createElement(s.p,null,"类（Class）是用于创建对象的模板，他们用代码封装数据以处理该数据，是面向对象编程方法的重要特性之一。JavaScript 中的 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">class</code>'}})," 语法在 ES6 中引入，其底层实现基于原型（Prototype），系原型继承的语法糖（Syntactic Sugar）。"),"\n",e.createElement(s.p,null,"本博文将探讨 JavaScript 中",e.createElement(s.strong,null,"如何使用类"),"的相关知识，文章组织架构和内容基于 MDN 上关于类的",e.createElement(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes"},"章节"),"。"),"\n",e.createElement(s.h2,null,"定义类"),"\n",e.createElement(s.p,null,"类可以被看作一种“特殊的函数”，和函数的定义方法一样，类的定义方法有两种：",e.createElement(s.strong,null,"类声明"),"和",e.createElement(s.strong,null,"类表达式"),"。"),"\n",e.createElement(s.p,null,"第一种方法是，直接使用 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">class</code>'}})," 关键字声明类，即",e.createElement(s.strong,null,"类声明"),"的方法。"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n  <span class="token comment">//</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"但是，与函数声明不同的是，使用类声明的方式",e.createElement(s.strong,null,"不会提升"),"。这意味着必须先声明类，再使用它。"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Uncaught ReferenceError: User is not defined</span>\n\n<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n  <span class="token comment">//</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"另一种方法是，将 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">class</code>'}})," 声明的类赋值给变量，即",e.createElement(s.strong,null,"类表达式"),"的方法。类表达式可以命名或匿名，其中，命名类表达式的名称（类的 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">name</code>'}})," 属性）是该类体的局部名称。"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// 匿名类</span>\n<span class="token keyword">let</span> User <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token punctuation">{</span>\n  <span class="token comment">//</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// User</span>\n\n<span class="token comment">// 命名类</span>\n<span class="token keyword">let</span> User <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">Admin</span> <span class="token punctuation">{</span>\n  <span class="token comment">//</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Admin</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"同样，使用类表达式的方式也",e.createElement(s.strong,null,"不会提升"),"。"),"\n",e.createElement(s.p,null,"定义类之后，就可以使用 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">new</code>'}})," 关键字实例化类了。"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(s.h2,null,"构造函数"),"\n",e.createElement(s.p,null,e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">constructor()</code>'}})," 方法或",e.createElement(s.strong,null,"构造函数"),"，是用于创建和初始化一个由 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">class</code>'}})," 创建的对象的特殊方法，一个类只能拥有一个 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">constructor()</code>'}})," 方法。"),"\n",e.createElement(s.p,null,"如果一个类中有构造函数，那么执行 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">new</code>'}})," 创建实例时，将调用这个构造函数。"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 构造函数</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> gender</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Ming"</span><span class="token punctuation">,</span> <span class="token string">"Male"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 初始化对象</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span>name<span class="token punctuation">,</span> u<span class="token punctuation">.</span>gender<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Ming Male</span>\n\n<span class="token keyword">const</span> u2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Xiao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 初始化赋值参数少于构造函数参数时</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>u2<span class="token punctuation">.</span>name<span class="token punctuation">,</span> u2<span class="token punctuation">.</span>gender<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Xiao undefined</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"对于 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">new</code>'}})," 创建实例时的每个参数，将依次赋值给构造函数。多余的参数将被忽略。"),"\n",e.createElement(s.p,null,"特别的，ES6 规定，子类的 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">constructor()</code>'}})," 中必须使用 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">super()</code>'}})," 调用父类的构造函数，否则会报错。一个合法的例子："),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> gender</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 使用 extends 创建 User 的子类 Admin</span>\n<span class="token keyword">class</span> <span class="token class-name">Admin</span> <span class="token keyword">extends</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> openId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> gender<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用父类的构造函数</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>openId <span class="token operator">=</span> openId<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Admin</span><span class="token punctuation">(</span><span class="token string">"Ming"</span><span class="token punctuation">,</span> <span class="token string">"Male"</span><span class="token punctuation">,</span> <span class="token string">"xxx489"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">,</span> a<span class="token punctuation">.</span>gender<span class="token punctuation">,</span> a<span class="token punctuation">.</span>openId<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Ming Male xxx489</span></code></pre></div>'}}),"\n",e.createElement(s.h2,null,"原型方法"),"\n",e.createElement(s.p,null,"在类体中可以声明函数方法。从底层实现来看，这些方法将会在对象的原型链上定义出来，故称作",e.createElement(s.strong,null,"原型方法"),"。"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Field declarations</span>\n  log <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 日志属性</span>\n  <span class="token comment">// Constructor</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">height<span class="token punctuation">,</span> width</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// Getter 获取当前的面积</span>\n  <span class="token keyword">get</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">calcArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// Setter 修改 height 属性时添加日志</span>\n  <span class="token keyword">set</span> <span class="token function">height</span><span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_height <span class="token operator">=</span> h<span class="token punctuation">;</span> <span class="token comment">// 如果为 this.height = h 会循环调用这个 Setter，发生堆栈溢出</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">set height: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>h<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// Setter 修改 width 属性时添加日志</span>\n  <span class="token keyword">set</span> <span class="token function">width</span><span class="token punctuation">(</span><span class="token parameter">w</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_width <span class="token operator">=</span> w<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>log<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">set width: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>w<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// Method 计算当前的面积</span>\n  <span class="token function">calcArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_height <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_width<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> rec <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rec<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["set height: 5", "set width: 10"]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rec<span class="token punctuation">.</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 50</span>\n\nrec<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\nrec<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rec<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ["set height: 5", "set width: 10", "set height: 10", "set width: 20"]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rec<span class="token punctuation">.</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 200</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"上面的类中定义计算当前面积的方法 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">calcArea()</code>'}})," 时，使用了 ES6 引入的",e.createElement(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions"},"更简短的定义语法"),"，这种语法与 Setter 和 Getter 的语法相似，它直接将方法名赋值给了函数。"),"\n",e.createElement(s.p,null,"此外，由于 Setter 的特性，当我们在构造函数执行赋值操作，以及之后修改实例的属性时，将调用 Setter 的方法（即 Hook 函数）。因此在上面代码中的 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">rec</code>'}})," 实例中，并不存在 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">height</code>'}})," 和 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">width</code>'}})," 属性，取而代之的是 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">_height</code>'}})," 和 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">_width</code>'}})," 属性。"),"\n",e.createElement(s.h2,null,"静态方法和属性"),"\n",e.createElement(s.p,null,"在类的方法前面添加关键字 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">static</code>'}})," 可以定义",e.createElement(s.strong,null,"静态方法"),"或",e.createElement(s.strong,null,"静态属性"),"，它们可以通过类直接调用，但不能通过类的实例调用。静态方法和静态属性常用于为一个使用类的应用程序创建工具函数。"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 定义 Point 类的静态属性</span>\n  <span class="token keyword">static</span> className <span class="token operator">=</span> <span class="token string">"Point"</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 定义 Point 类的静态方法</span>\n  <span class="token keyword">static</span> <span class="token function">distance</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> dx <span class="token operator">=</span> a<span class="token punctuation">.</span>x <span class="token operator">-</span> b<span class="token punctuation">.</span>x<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> dy <span class="token operator">=</span> a<span class="token punctuation">.</span>y <span class="token operator">-</span> b<span class="token punctuation">.</span>y<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">hypot</span><span class="token punctuation">(</span>dx<span class="token punctuation">,</span> dy<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Math.hypot() 返回所有参数的平方和的平方根，在此处用于求两点之间的距离</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>distance<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Point<span class="token punctuation">.</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Point</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Point<span class="token punctuation">.</span><span class="token function">distance</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7.0710678118654755</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"上面的代码中，当我们使用实例访问静态方法和属性时，会显示 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">undefined</code>'}}),"。而当我们使用类来访问时，则能正常调用了。"),"\n",e.createElement(s.h2,null,"原型方法和静态方法中的 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">this</code>'}})),"\n",e.createElement(s.p,null,"当调用静态或原型方法时没有指定 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">this</code>'}})," 所属的上下文，那么将返回 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">undefined</code>'}}),"。这是因为 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">class</code>'}})," 内部的代码",e.createElement(s.strong,null,"总是在严格模式下执行"),"。"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>\n  <span class="token function">getThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">static</span> <span class="token function">getStaticThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> getClassStaticThis <span class="token operator">=</span> MyClass<span class="token punctuation">.</span>getStaticThis<span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>MyClass<span class="token punctuation">.</span><span class="token function">getStaticThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// MyClass 类</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getClassStaticThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> getObjThis <span class="token operator">=</span> obj<span class="token punctuation">.</span>getThis<span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// obj 实例对象</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getObjThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"作为对比，将上面的代码使用传统的基于函数的语法实现。在",e.createElement(s.strong,null,"非严格模式"),"下，若没有指定 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">this</code>'}})," 所属的上下文，那么将指向全局对象。"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token class-name">MyClass</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getThis</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// 模拟 Class 的 static 方法</span>\nMyClass<span class="token punctuation">.</span><span class="token function-variable function">getStaticThis</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> getClassStaticThis <span class="token operator">=</span> MyClass<span class="token punctuation">.</span>getStaticThis<span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>MyClass<span class="token punctuation">.</span><span class="token function">getStaticThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// MyClass 函数</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getClassStaticThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// global object</span>\n\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> getObjThis <span class="token operator">=</span> obj<span class="token punctuation">.</span>getThis<span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// obj 实例对象</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getObjThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// global object</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">this</code>'}})," 一直是 JavaScript 语言最令人困惑的特性之一，您可以阅读与之相关的文章进一步理解。"),"\n",e.createElement(s.h2,null,"生成器方法"),"\n",e.createElement(s.p,null,"生成器是 ES6 新增的高级特性，允许定义一个非连续执行的函数作为迭代算法，是替代迭代器（Iterator）的选择。"),"\n",e.createElement(s.p,null,"生成器函数使用 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">function*</code>'}})," 语法定义，例如 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">function* anyGenerator() {}</code>'}}),"。在类中对应更简短的语法，将符号 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">*</code>'}})," 放在方法名前面即可，例如 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">*anyGenerator() {}</code>'}}),"。"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Polygon</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>sides</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>sides <span class="token operator">=</span> sides<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 定义生成器方法</span>\n  <span class="token operator">*</span><span class="token function">getSides</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> side <span class="token keyword">of</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sides<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">yield</span> side<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> pentagon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Polygon</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>pentagon<span class="token punctuation">.</span><span class="token function">getSides</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1,2,3,4,5]</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"关于生成器的更多介绍可参考",e.createElement(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators"},"此页面"),"。"),"\n",e.createElement(s.h2,null,"箭头函数定义方法"),"\n",e.createElement(s.p,null,"类中还有一种常见的定义方法的方式：使用",e.createElement(s.strong,null,"箭头函数"),"。"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 使用箭头函数定义原型方法</span>\n  <span class="token function-variable function">calcArea</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"子类继承父类的箭头函数定义的方法时，会出现**属性遮蔽（Property Shadowing）**的现象。编写代码如下："),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">sayHello</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I am your father."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span>\n  <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I am a child."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nchild<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// I am your father.</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"上面的代码并没有像我们预想的那样，依次打印出 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">I am a child.</code>'}})," 和 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">I am your father.</code>'}}),"，而是只打印出了 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">I am your father.</code>'}}),"。"),"\n",e.createElement(s.p,null,"简单解释原因的话就是，箭头函数定义的方法将挂载到",e.createElement(s.strong,null,"实例的属性"),"上，而普通函数定义的方法挂载到",e.createElement(s.strong,null,"原型链"),"上。这样，当我们实例化 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">child</code>'}})," 对象时，会将原型 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Child</code>'}})," 从自己的父类 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Father</code>'}})," 继承的 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">sayHello()</code>'}})," 方法则挂载到自身的属性上。"),"\n",e.createElement(s.p,null,"回忆一下过去学过的知识，当我们尝试调用实例的方法时，JavaScript 会首先在实例的属性上查找是否存在此方法，如果存在则直接调用，如果不存在再在原型链上查找。因此，当我们调用实例 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">child</code>'}})," 的 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">sayHello()</code>'}})," 方法时，JavaScript 找到了属性上的 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">sayHello()</code>'}})," 方法，遂结束了查找并调用。"),"\n",e.createElement(s.p,null,"详细内容可以参考",e.createElement(s.a,{href:"https://github.com/dwqs/blog/issues/67#issue-327371697"},"这篇博客"),"。"),"\n",e.createElement(s.p,null,"在类中，直接使用 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">=</code>'}})," 的声明从本质上而言就是 ",e.createElement(s.a,{href:"https://github.com/tc39/proposal-class-fields#field-declarations"},"Field Declarations")," 的语法，相当于",e.createElement(s.strong,null,"直接声明了一个实例的属性"),"。在接下来的",e.createElement(s.a,{href:"#%E5%AD%97%E6%AE%B5%E5%A3%B0%E6%98%8E"},"字段声明"),"小节中，也使用到了这个语法。"),"\n",e.createElement(s.h2,null,"字段声明"),"\n",e.createElement(s.h3,null,"公有字段声明"),"\n",e.createElement(s.p,null,"在类中可以声明公有字段，使得类定义具有自我记录性，且这些字段将始终存在。字段的声明可以设置初始值。"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>\n  x<span class="token punctuation">;</span> <span class="token comment">// 公有字段 x</span>\n  y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 公有字段 y，初始值为 0</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">get</span> <span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [5, 10]</span></code></pre></div>'}}),"\n",e.createElement(s.h3,null,"私有字段声明"),"\n",e.createElement(s.p,null,"在声明的字段前面加上 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">#</code>'}})," 表明为私有字段。私有字段同样可以设置初始值。"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>\n  #x<span class="token punctuation">;</span> <span class="token comment">// 私有字段 x</span>\n  #y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 私有字段 y，初始值为 0</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>#x <span class="token operator">=</span> x<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>#y <span class="token operator">=</span> y<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">get</span> <span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>#x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#y<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [10, 5]</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"与公有字段不同的是："),"\n",e.createElement(s.ul,null,"\n",e.createElement(s.li,null,"不能从类外部引用私有字段。或私有字段在类外部不可见。"),"\n",e.createElement(s.li,null,"私有字段仅能在字段声明中预先定义。"),"\n",e.createElement(s.li,null,"在实例创建之后，不能再通过赋值来创建私有字段。"),"\n"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>\n  name <span class="token operator">=</span> <span class="token string">"point"</span><span class="token punctuation">;</span>\n  #x<span class="token punctuation">;</span>\n  #y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token comment">// #z // 假如不在这里显式声明 #z</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>#x <span class="token operator">=</span> x<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>#y <span class="token operator">=</span> y<span class="token punctuation">;</span>\n    <span class="token comment">// this.#z = z // Uncaught SyntaxError: Private field \'#z\' must be declared in an enclosing class</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">get</span> <span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>#x<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#y<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">get</span> <span class="token function">position3D</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// return [this.#x, this.#y, this.#z] // Uncaught SyntaxError: Private field \'#z\' must be declared in an enclosing class</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\np<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"point3D"</span><span class="token punctuation">;</span> <span class="token comment">// 实例可以通过赋值修改公有字段</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// point3D</span>\np<span class="token punctuation">.</span>#x <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment">// 实例不可通过赋值修改私有字段，Uncaught SyntaxError: Private field \'#x\' must be declared in an enclosing class</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>#x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 实例不可在外部访问私有字段，Uncaught SyntaxError: Private field \'#x\' must be declared in an enclosing class</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"在上面的代码中，我们尝试在类中不显式声明私有字段 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">#z</code>'}})," 的情况下，访问 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">#z</code>'}}),"，结果会抛出 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">SyntaxError</code>'}}),"。此外，我们尝试在实例中直接对私有字段 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">#x</code>'}})," 进行赋值和获取操作，也会抛出 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">SyntaxError</code>'}}),"。"),"\n",e.createElement(s.h2,null,"使用 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">extends</code>'}})," 拓展子类"),"\n",e.createElement(s.p,null,e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">extends</code>'}})," 可以用来创建子类，父类可以是自己定义的普通类，也可以是内建对象。对于后者，以继承内建的 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Date</code>'}})," 对象为例："),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">MyDate</span> <span class="token keyword">extends</span> <span class="token class-name">Date</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 必须调用父类的构造函数，否则会报错</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// 定义子类的方法，该方法可以获取格式化后的日期</span>\n  <span class="token function">getFormattedDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> months <span class="token operator">=</span> <span class="token punctuation">[</span>\n      <span class="token string">"Jan"</span><span class="token punctuation">,</span>\n      <span class="token string">"Feb"</span><span class="token punctuation">,</span>\n      <span class="token string">"Mar"</span><span class="token punctuation">,</span>\n      <span class="token string">"Apr"</span><span class="token punctuation">,</span>\n      <span class="token string">"May"</span><span class="token punctuation">,</span>\n      <span class="token string">"Jun"</span><span class="token punctuation">,</span>\n      <span class="token string">"Jul"</span><span class="token punctuation">,</span>\n      <span class="token string">"Aug"</span><span class="token punctuation">,</span>\n      <span class="token string">"Sep"</span><span class="token punctuation">,</span>\n      <span class="token string">"Oct"</span><span class="token punctuation">,</span>\n      <span class="token string">"Nov"</span><span class="token punctuation">,</span>\n      <span class="token string">"Dec"</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>\n      <span class="token string">" - "</span> <span class="token operator">+</span>\n      months<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span>\n      <span class="token string">" - "</span> <span class="token operator">+</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFormattedDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 20 - May - 2021</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"类不过是一种语法糖，因此我们也可以用 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">extends</code>'}})," 来继承传统的基于函数的“类”："),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// 定义 Animal “类”</span>\n<span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">Animal</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">speak</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" makes a noise."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 使用 extends 拓展 Animal “类”</span>\n<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>\n  <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" barks."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"Mitzie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nd<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Mitzie makes a noise.</span>\n<span class="token comment">// Mitzie barks.</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"对于",e.createElement(s.strong,null,"不可构造"),"的常规对象，要实现继承的话，可以使用 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Object.setPrototypeOf()</code>'}})," 方法，它可以设置一个指定对象的原型到另一个对象："),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// 定义 Animal 对象</span>\n<span class="token keyword">const</span> Animal <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" makes a noise."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" barks."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nObject<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span><span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> Animal<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果不这样做，在调用 speak 时会返回 TypeError</span>\n\n<span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">"Mitzie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nd<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Mitzie makes a noise.</span>\n<span class="token comment">// Mitzie barks.</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"出于性能考量，应避免使用 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Object.setPrototypeOf()</code>'}})," 方法来实现继承，在",e.createElement(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf"},"这里"),"了解它的更多。"),"\n",e.createElement(s.h2,null,"使用 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">super</code>'}})," 调用超类"),"\n",e.createElement(s.p,null,"使用 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">super</code>'}})," 关键字可以调用对象的父对象上的函数。"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: meo~~!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Lion</span> <span class="token keyword">extends</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>\n  <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用 Cat 对象的 speak 方法</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: roars!!!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lion</span><span class="token punctuation">(</span><span class="token string">"Li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nl<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// Li: meo~~!</span>\n<span class="token comment">// Li: roars!!!</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"假如我们将上面代码中 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Lion</code>'}})," 类里的 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">speak()</code>'}})," 方法删去，那么打印的结果是 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Li: meo~~!</code>'}}),"。如果认真看到这里的话，原因想必也已经了然于胸：子类继承了父类的属性和方法。那么当子类定义了与父类相同名字的方法时，根据原型链上的调用规则，会调用子类定义的方法。这就是为什么我们需要 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">super</code>'}})," 关键字的原因之一，方法名相同的情况下，在子类方法中我们仍可以调用父类的方法。"),"\n",e.createElement(s.p,null,"在",e.createElement(s.strong,null,"构造函数"),"中，",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">super()</code>'}})," 需要在使用 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">this</code>'}})," 前调用："),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">height<span class="token punctuation">,</span> width</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> <span class="token string">"Rectangle"</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_height <span class="token operator">=</span> height<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_width <span class="token operator">=</span> width<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hi, I am a </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">get</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_height <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_width<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">length</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// this._height = length // Must call super constructor in derived class before accessing \'this\' or returning from derived constructor</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用 Rectangle 的构造函数，length 分别作 height 和 width</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> <span class="token string">"Square"</span><span class="token punctuation">;</span> <span class="token comment">// 修改 name 属性为 Square</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hi, I am a Square.</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 225</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">super</code>'}})," 也可以用来调用父类的静态方法："),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">height<span class="token punctuation">,</span> width</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_height <span class="token operator">=</span> height<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>_width <span class="token operator">=</span> width<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">static</span> <span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 父类的静态方法</span>\n    <span class="token keyword">return</span> <span class="token string">"I have 4 sides."</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">length</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">static</span> <span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 子类的静态方法，使用 super 调用父类的 help 方法</span>\n    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" They are all equal."</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Square<span class="token punctuation">.</span><span class="token function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// I have 4 sides. They are all equal.</span>\n\n<span class="token comment">// 假如只去除子类 help 方法前面的 static 关键字</span>\n<span class="token comment">// console.log(new Square(10).help()) // Uncaught TypeError: (intermediate value).help is not a function</span>\n\n<span class="token comment">// 假如只去除父类 help 方法前面的 static 关键字</span>\n<span class="token comment">// console.log(Square.help()) // Uncaught TypeError: (intermediate value).help is not a function</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"在上面的代码中，",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Square</code>'}})," 中的静态方法 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">help()</code>'}})," 调用了父类的静态方法。静态方法中的 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">super</code>'}})," 只能调用父类的静态方法，假如我们去除子类或父类方法前面的 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">static</code>'}})," 关键字，会发生报错。"),"\n",e.createElement(s.p,null,"在本章节的例子中，似乎子类方法中的 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">super</code>'}})," 都调用了父类中与之同名的方法，但实际上并没有这个限制，在编写的时候可以根据实际的需求自行调整命名或调用其它父类方法。"),"\n",e.createElement(s.p,null,"在",e.createElement(s.a,{href:"#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95"},"箭头函数的使用"),"章节的例子中，既然箭头函数定义的方法挂载到了实例的属性上，那么还能用 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">super</code>'}})," 来调用吗？答案是否定的。JavaScript 没能在父对象的原型链上找到这个方法，于是什么也没有发生。"),"\n",e.createElement(s.p,null,"更多补充可以查阅 MDN 上",e.createElement(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super"},"关于 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">super</code>'}})," 的介绍"),"。"),"\n",e.createElement(s.h2,null,"使用 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Symbol.species</code>'}})," 覆盖构造函数"),"\n",e.createElement(s.p,null,e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Symbol.species</code>'}})," 访问器属性允许子类覆盖对象的默认构造函数。"),"\n",e.createElement(s.p,null,"读着很拗口，那就看两个实际的例子。当使用 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">map()</code>'}})," 这样的方法会返回默认的构造函数，我们可能想在对拓展的数组类 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">MyArray</code>'}})," 执行操作时返回 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Array</code>'}})," 对象，那么可以这样编写代码："),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">MyArray</span> <span class="token keyword">extends</span> <span class="token class-name">Array</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 设置 getter，当获取 MyArray 类的构造函数时，返回 Array 类的构造函数</span>\n  <span class="token keyword">static</span> <span class="token keyword">get</span> <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>species<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> Array<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyArray</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> mapped <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=></span> x <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mapped <span class="token keyword">instanceof</span> <span class="token class-name">MyArray</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mapped <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"又例如，我们拓展 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Promise</code>'}})," 类为 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">TimeoutPromise</code>'}})," 类，但我们不希望某一个超时的 Promise 请求影响整个 Promise 链，就可以使用 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Symbol.species</code>'}})," 来告诉 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">TimeoutPromise</code>'}})," 类返回一个 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Promise</code>'}})," 对象，方便我们执行异常处理操作："),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">TimeoutPromise</span> <span class="token keyword">extends</span> <span class="token class-name">Promise</span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> <span class="token keyword">get</span> <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>species<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> Promise<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Symbol.species</code>'}})," 允许自定义返回的类，不一定是子类继承实现的类。"),"\n",e.createElement(s.p,null,e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Symbol.species</code>'}})," 帮助我们在处理子类实例时，能够有一套标准的操作流程，方便了开发，在某些场景十分实用。"),"\n",e.createElement(s.h2,null,"使用 Mix-ins 实现多重继承"),"\n",e.createElement(s.p,null,"在 ECMAScript 中，一个类只能有一个单超类，因此想通过工具类的方法实现多重继承行为是不可能的。为了实现多重继承，我们可以使用 Mixin 的方法。"),"\n",e.createElement(s.p,null,"什么是 Mixin？简单来说，Mixin 也是一个类，包括了一些方法，这些方法可以被其它类使用。但在其它类中使用这些方法",e.createElement(s.strong,null,"不需要继承")," Mixin。举一个简单的例子："),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">let</span> sayHiMixin <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Mixin</span>\n  <span class="token comment">// Methods that useful</span>\n  <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">sayBye</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Bye, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nObject<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> sayHiMixin<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将 Mixin 中的方法复制到 Class 类中</span>\n\n<span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Dude"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello, Dude!</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"我们又知道，创建类的",e.createElement(s.a,{href:"#%E5%AE%9A%E4%B9%89%E7%B1%BB"},"两种声明方式"),"是等价的："),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Mixin1</span> <span class="token punctuation">{</span>\n  <span class="token comment">//</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 等价于</span>\n<span class="token keyword">const</span> Mixin2 <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token punctuation">{</span>\n  <span class="token comment">//</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"其中，第二种方式，或者说使用类表达式声明类的方式，允许我们",e.createElement(s.strong,null,"动态生成自定义的类"),"。根据这个特性，我们就可以编写 Mixin 代码来实现多重继承了："),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span> <span class="token comment">// 共同工具类</span>\n    <span class="token comment">//</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">CatMixin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">superClass</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">class</span> <span class="token class-name">extends</span> superClass <span class="token punctuation">{</span> <span class="token comment">// 猫猫工具类</span>\n    <span class="token comment">//</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">DogMixin</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">superClass</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">class</span> <span class="token class-name">extends</span> superClass <span class="token punctuation">{</span> <span class="token comment">// 狗狗工具类</span>\n    <span class="token comment">//</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">MyMixin</span> <span class="token keyword">extends</span> <span class="token class-name">CatMixin</span><span class="token punctuation">(</span><span class="token function">DogMixin</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 实现多重继承</span>\n    <span class="token comment">//</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"在上面的代码中，我们首先定义了一个通用的工具类 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Animal</code>'}}),"，其它 Mixin 类可能会用到这个工具类。接着我们定义了猫猫和狗狗使用的工具类 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">CatMixin</code>'}})," 与 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">DogMixin</code>'}})," 的创建规则，它们将传入的参数作为自己的父类，并创建一个新的类。最后，我们定义了想要的 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">MyMixin</code>'}})," 类，它继承了 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">CatMixin(DogMixin(Animal))</code>'}})," 类。从实现的角度来看，",e.createElement(s.strong,null,"相当于"),"执行了下面的操作："),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">DogMixin</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>\n  <span class="token comment">//</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">class</span> <span class="token class-name">CatMixin</span> <span class="token keyword">extends</span> <span class="token class-name">DogMixin</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 这显然是不合理的，猫猫工具类怎么能继承狗狗工具类</span>\n  <span class="token comment">//</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">MyMixin</span> <span class="token keyword">extends</span> <span class="token class-name">CatMixin</span> <span class="token punctuation">{</span>\n  <span class="token comment">//</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"实际上，我们并没有让 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">CatMixin</code>'}})," 类去继承 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">DogMixin</code>'}})," 类，而是使用了 Mixin 的思想，让 ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">MyMixin</code>'}})," 继承了我们基于类表达式创建的一个新的类，实现了多重继承。"),"\n",e.createElement(s.h2,null,"参考资料"),"\n",e.createElement(s.p,null,"本博文仅且记录了 JavaScript 中类在语法上的知识和运用，辅以少量的实现原理。关于底层的具体实现，就放到以后再深入探讨学习吧。"),"\n",e.createElement(s.h3,null,"技术博文"),"\n",e.createElement(s.ul,null,"\n",e.createElement(s.li,null,e.createElement(s.a,{href:"https://cloud.tencent.com/developer/article/1700017"},"JavaScript 或 ES6 如何实现多继承总结【Mixin 混合继承模式】"),", 2020-09-18"),"\n",e.createElement(s.li,null,e.createElement(s.a,{href:"https://github.com/dwqs/blog/issues/67"},"ES6 Class Methods 定义方式的差异"),", 2018-06-25"),"\n",e.createElement(s.li,null,e.createElement(s.a,{href:"https://segmentfault.com/a/1190000007356931"},"[学习 es6]setter/getter 探究"),", 2016-11-02"),"\n",e.createElement(s.li,null,e.createElement(s.a,{href:"https://www.keithcirkel.co.uk/metaprogramming-in-es6-symbols/#symbolspecies"},"Metaprogramming in ES6: Symbols and why they're awesome"),", 2015-06-18"),"\n"),"\n",e.createElement(s.h3,null,"其它资料"),"\n",e.createElement(s.p,null,"主要参考了 MDN 上关于类和相关内容的",e.createElement(s.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes"},"描述"),"。"),"\n",e.createElement(s.ul,null,"\n",e.createElement(s.li,null,e.createElement(s.a,{href:"https://javascript.info/mixins"},"Mixins - JAVASCRIPT.INFO")),"\n"))}var o=function(n){void 0===n&&(n={});const{wrapper:s}=Object.assign({},(0,t.R)(),n.components);return s?e.createElement(s,n,e.createElement(p,n)):p(n)},c=a(197),l=a(4353),u=a.n(l),k=a(4810),i=a(6947),r=a(4017),m=a(1042),d=a(1038);const g={a:n=>{let{href:s="",children:a}=n;const t=!(null!=s&&s.startsWith("#")),p=t?s:`#${encodeURIComponent(s.slice(1))}`;return e.createElement("a",{href:p,target:t?"_blank":void 0,rel:"noreferrer"},a)},img:n=>{const{alt:s="The author is too lazy to give an alt",src:a,...t}=n;return e.createElement("a",{href:a,"data-fancybox":"gallery","data-caption":s},e.createElement("img",Object.assign({src:a,alt:s},t)))},Card:i.A,Link:k.N_},h=n=>{let{children:s,pageContext:a}=n;const{frontmatter:{title:p,date:o,updated:l,categories:k,tags:i,timeliness:m=!0}}=a,h=e.useRef(null),y=u()(o),E=l?u()(l):y,w=u()().diff(E,"days");return e.useEffect((()=>{var n;const s=null===(n=h.current)||void 0===n?void 0:n.querySelectorAll("a.gatsby-resp-image-link");return null==s||s.forEach((n=>{const s=n.children.item(1);n.setAttribute("data-fancybox","gallery"),n.setAttribute("data-caption",s.alt)})),c.lX.bind("[data-fancybox]"),()=>c.lX.unbind("[data-fancybox]")}),[]),e.createElement("div",{className:"mx-auto flex max-w-xl flex-col gap-y-12"},e.createElement("div",{className:"flex flex-col gap-4"},(null==k?void 0:k.length)&&e.createElement(r.A,{name:k[0],className:"item-selectable"}),e.createElement("h1",{className:"text-3xl font-bold"},p),e.createElement("div",{className:"item-secondary flex gap-2"},o&&e.createElement("span",{title:`首次发布于：${y.toString()}\n最后更新于：${E.toString()}`},y.format("MM 月 DD 日 YYYY 年")),(null==i?void 0:i.length)&&e.createElement("div",{className:"flex flex-1 flex-wrap gap-2 before:content-['•']"},i.map((n=>e.createElement(d.A,{key:n,name:n,className:"item-secondary item-selectable"})))))),e.createElement("article",{ref:h,className:"heti post-entry"},m&&w>365&&e.createElement("blockquote",{className:"border-l-4 border-orange-400"},"这是一篇",e.createElement("strong",null,"最后更新于 ",w," 天前"),"的博客，内容可能随着时间的推移而变得不再适用，建议您仔细评估信息的有效性。"),e.createElement(t.x,{components:g},s)))},y=n=>{let{pageContext:s}=n;return e.createElement(m.A,{title:s.frontmatter.title})};function E(n){return e.createElement(h,n,e.createElement(o,n))}}}]);
//# sourceMappingURL=component---src-templates-post-tsx-content-file-path-blog-posts-js-use-class-mdx-7fc694784293fcbd953f.js.map