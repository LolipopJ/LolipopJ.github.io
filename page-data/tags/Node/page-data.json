{"componentChunkName":"component---src-templates-post-list-tsx","path":"/tags/Node/","result":{"pageContext":{"posts":[{"excerpt":"最近在捣腾我的 Timeline 时间线项目，希望将我在不同平台上的发言和活跃记录同步过来，在独立的站点上按照创建时间倒序呈现。 过去，我尝试把这个想法放到 Telegram 上实现，把发言和记录同步到我的频道上。但是格式转换的繁杂以及自由度上的限制让我大费周章，加之增量开设的同步内容会以消息的方式一条一条添加到末尾，无法按时间排序，最终我放弃了这个方案。\n\n言归正传，在项目开发的过程中…","frontmatter":{"categories":["全栈开发"],"tags":["React","TypeScript","Node","ffmpeg"],"title":"从同步 QQ 空间说说到前端呈现，我都做了些啥","date":"2024-10-17T00:00:00.000Z","updated":"2024-10-17T00:00:00.000Z","timeliness":false},"id":"58800cd8-0f9c-51be-be2c-df5e7f0ac686","internal":{"contentDigest":"57a11e179b59605ab23684afcc7e3d9a","contentFilePath":"/home/runner/work/homepage/homepage/blog/posts/sync-qzone-talks.mdx"},"slug":"sync-qzone-talks"},{"excerpt":"开发图像查重工具时遇到了这样一个问题：在查重之前，用户需要先对图像文件进行索引操作，后台将调用可执行文件并为每张图像生成特征值。索引操作所需的时间与图像的数量及大小呈正相关，笔者为大约 50000 张图片（约 170GB）生成特征值，需要花费将近 90 分钟的时间。在这种情况下，如果渲染器什么也不展示，卡在那里，用户难免会非常焦虑 —— 后台是否还在运行，我是不是卡死了？ 那么需求也就明了了…","frontmatter":{"categories":["前端开发"],"tags":["Node","Electron","TypeScript","React"],"title":"Electron 执行后台程序并在渲染器实时打印运行日志","date":"2024-08-05T00:00:00.000Z","updated":"2024-08-05T00:00:00.000Z","timeliness":false},"id":"e4e1117b-9d1a-5bfe-9f4f-c9651c62f048","internal":{"contentDigest":"c5c34be5b0dca97dc53a21a0831cbc05","contentFilePath":"/home/runner/work/homepage/homepage/blog/posts/electron-real-time-print-execution-log.mdx"},"slug":"electron-real-time-print-execution-log"},{"excerpt":"笔者最近在 OpenWRT 软路由上部署了一个 Minecraft 服务器，出于对数据安全的焦虑，于是折腾了一下存档备份的相关事宜，记录为此文。 在 CurseForge 等模组站上已有方便好用的 Minecraft 服务器存档备份插件，除非您喜欢折腾或高自由度的定制，不用像笔者这样编写一整个脚本。\n\n完整的脚本可见此。\n\n编写备份脚本\n前置准备\n\n为了脚本编写方便，约定应该在 Minecraft…","frontmatter":{"categories":["后端开发"],"tags":["Linux","OpenWRT","Minecraft","Node","JavaScript","Alist"],"title":"基于原生 Node 备份软路由上的 Minecraft 服务器存档，并通过 Alist 上传到云端","date":"2024-05-11T00:00:00.000Z","updated":"2024-05-23T00:00:00.000Z","timeliness":false},"id":"c9e1e460-ce99-56b4-a3a4-fd7b1c2652ed","internal":{"contentDigest":"f0ffaa363834fb6f6c66ea8fcf820b1d","contentFilePath":"/home/runner/work/homepage/homepage/blog/posts/backup-mc-server.mdx"},"slug":"backup-mc-server"},{"excerpt":"笔者自高中到现在，游走于 Pixiv 若干载，不慎收藏了许多名家雅作。 独乐乐不如众乐乐！笔者想做一个 web 页面来随机访问我的收藏，不过在此之前，可以先实现服务端上的内容。再之后做网页时，不过是简单的读取数据库罢了！\n\n最初，笔者以为得将我的库存全部放到服务器上项目中去，然后随机访问其中的图片实现功能，但这样做很难得同步，遂搁置。不过，笔者在最近发现有一个 Pixiv 图片代理网站 可以快速下载…","frontmatter":{"categories":["后端开发"],"tags":["Telegram","Bot","Node","Koa"],"title":"这位客官，要来一张我珍藏许久的图片吗","date":"2022-01-13T00:00:00.000Z","updated":"2022-01-15T00:00:00.000Z","timeliness":true},"id":"9d391e71-9fdf-525f-b7ab-1285bdf5a9fa","internal":{"contentDigest":"6b65cf46c5e632373d2706c9eef2f576","contentFilePath":"/home/runner/work/homepage/homepage/blog/posts/random-get-me-a-picture.mdx"},"slug":"random-get-me-a-picture"},{"excerpt":"本文基于 Koa 从零开始搭建一个简单的 Telegram Bot 应用服务，支持获取 Github Issues 的评论并转发到 Telegram 频道，帮助笔者更好地将捣玩 Telegram！ 时间推移至 2024 年，笔者现在更建议使用 Bun 开发应用服务，开箱即用的高性能服务以及完备的 TypeScript 支持，能大大提升开发体验。下面为撰写于 2022 年初的原文。\n\n本文假设您已…","frontmatter":{"categories":["后端开发"],"tags":["Telegram","Bot","Node","Koa","PostgreSQL","Sequelize"],"title":"从零开始使用 Telegram Bot","date":"2022-01-09T00:00:00.000Z","updated":"2024-07-09T00:00:00.000Z","timeliness":null},"id":"5b833204-fd5f-5105-9234-05413f0798bc","internal":{"contentDigest":"ab7d2bd0e71b7caa1da11a8eccf4f88b","contentFilePath":"/home/runner/work/homepage/homepage/blog/posts/start-telegram-bot.mdx"},"slug":"start-telegram-bot"},{"excerpt":"编写代码时使用 EditorConfig EditorConfig 能够帮助跨各种 IDE 开发同一项目的不同开发人员保持一致的编码风格。\n\nVSCode 没有内置对 EditorConfig 的支持，需要在插件市场中手动下载插件。\n\nEditorConfig 会自动读取工作区中的  文件，更详细的配置说明可以参考官方介绍。下面是笔者常用的配置：\n\n推送仓库前使用 Prettier\n\n为了进一步确保代码…","frontmatter":{"categories":["技术琐事"],"tags":["Node","EditorConfig","Prettier","VSCode"],"title":"使用 EditorConfig 和 Prettier 优雅地配置 VSCode 代码格式化","date":"2021-08-07T00:00:00.000Z","updated":"2023-12-14T00:00:00.000Z","timeliness":false},"id":"fd64a68b-2bdd-5530-9121-d433cf2baaac","internal":{"contentDigest":"7a3276355b0387cd0c5c64a6faccb4cc","contentFilePath":"/home/runner/work/homepage/homepage/blog/posts/editorconfig-prettier.mdx"},"slug":"editorconfig-prettier"},{"excerpt":"看腻了原先的字体，亦或是想满足独树一帜的设计欲望？不妨更换一下博客的字体吧！本文将基于 Hexo 和主题 Hexo-Theme-Archer 展示如何更换博客的中文字体。 引入字体文件\n\n这里提供两种引入的思路，一种是 CDN 引入，一种是本地引入。建议通过 CDN 的方式引入，可以大大提高加载效率。\n\n引入 CDN 字体文件\n\n以更换字体为思源黑体（Google 字体上叫 ，Adobe 版本叫 ）为例…","frontmatter":{"categories":["前端开发"],"tags":["Node","Hexo","hexo-theme-archer"],"title":"为 Archer 主题更换字体","date":"2021-06-26T00:00:00.000Z","updated":"2021-08-10T00:00:00.000Z","timeliness":null},"id":"ce62715c-86ad-504a-9465-dc42cca86603","internal":{"contentDigest":"1d4c76b56b9df6130916955654010803","contentFilePath":"/home/runner/work/homepage/homepage/blog/posts/web-font-for-hexo-theme-archer.mdx"},"slug":"web-font-for-hexo-theme-archer"},{"excerpt":"迷途知反！腾讯地图的 JS API 文档实在过于简陋，且库很久没有更新，转身投入高德地图的怀抱，享受 this moment 的美好！ 高德地图与腾讯地图定位功能区别\n\n高德地图将定位功能和逆地理编码功能分开为两个操作，而腾讯地图将二者合并。\n\n这意味着使用高德地图实现逆地理编码，首先需要执行定位操作，再将得到的结果传给逆地理编码插件获得最后的结果。\n\n此外…","frontmatter":{"categories":["前端开发"],"tags":["JavaScript","Node","Vue-2","Nuxt","Promise"],"title":"在 Nuxt.js 中引入高德地图并实现定位及逆地理编码","date":"2021-03-17T00:00:00.000Z","updated":"2021-03-18T00:00:00.000Z","timeliness":null},"id":"10034809-1948-5171-b8cd-d2aa98c7d1f8","internal":{"contentDigest":"9c3f50fef8e7e0f58483829d564385ac","contentFilePath":"/home/runner/work/homepage/homepage/blog/posts/amap-import-vue.mdx"},"slug":"amap-import-vue"},{"excerpt":"正在开发的 Web 项目需要获取使用者的位置信息，而使用者主要通过移动端访问此 Web 服务。位置信息需要精确到区。在腾讯位置服务的定位解决方案里想要搜索可用的 JavaScript 库，只看到了服务端的 IP 定位和移动端的几个 SDK 包，甚异之。 终于在不起眼的地方找到了前端定位组件，适用于浏览器进行定位操作。\n\n本文基于 Nuxt.js 实现前端定位功能。\n\n它能做什么\n\n组件旨在优化纯 HTM…","frontmatter":{"categories":["前端开发"],"tags":["JavaScript","Node","Vue-2","Nuxt"],"title":"使用腾讯位置服务进行 Web 前端定位","date":"2021-03-16T00:00:00.000Z","updated":"2021-03-16T00:00:00.000Z","timeliness":null},"id":"086dac5d-4f33-570b-a1cc-35148d744ed7","internal":{"contentDigest":"9f66804a42fb2622564a92d1016a37fa","contentFilePath":"/home/runner/work/homepage/homepage/blog/posts/tencent-map-api-get-current-location.mdx"},"slug":"tencent-map-api-get-current-location"},{"excerpt":"哪位代码人不希望自己的代码总有统一优美的风格，不会因为合作开发项目而杂乱呢？ 在最开始写项目代码的时候我就用起了 ESLint 和 Prettier，再装一堆预设的配置，便跑了起来。令人沮丧的是，用 ESLint 修复了代码质量问题，还是会在编译器里看到红色波浪线，提醒还有些代码风格需要修复。直到这一次，我才忽然意识到 ESLint 和 Prettier 其实分工了不同领域，协同使用体验极好。\n\n本…","frontmatter":{"categories":["前端开发"],"tags":["Node","Nuxt","ESLint","Prettier","VSCode"],"title":"Nuxt 项目配置 ESLint 和 Prettier 检查并规范代码质量与格式","date":"2021-03-03T00:00:00.000Z","updated":"2021-08-07T00:00:00.000Z","timeliness":false},"id":"c748aa72-8932-50ed-8e4e-8d2bedaa4025","internal":{"contentDigest":"91c042c627129370c3a1d465f14cb97b","contentFilePath":"/home/runner/work/homepage/homepage/blog/posts/nodejs-eslint-prettier.mdx"},"slug":"nodejs-eslint-prettier"},{"excerpt":"在开发 NetUnion 的官网页面时，有这样一个需求：读取本地目录下的新闻和博客文件，并在前端渲染，其中文件均为 Markdown 格式。 与全栈开发直接调用后端数据库不同的是，没有数据表字段来记录文件的不同属性，例如文件的题目、作者、撰写日期等，因此这些属性需要记录在 .md 文件当中。\n\n这样的撰写方式是不是很熟悉？没错，不就是我正在写的 Hexo 博客中 .md 文件的编写格式嘛！\n\n自动导入…","frontmatter":{"categories":["前端开发"],"tags":["Markdown","JavaScript","Node","Webpack"],"title":"Webpack 读取本地 Markdown 文件并进行预处理","date":"2021-02-23T00:00:00.000Z","updated":"2021-06-26T00:00:00.000Z","timeliness":null},"id":"37fa9a4a-1789-5893-bb40-c431546078fd","internal":{"contentDigest":"6f0b9bd2a15adcfadb8c9a27388269b9","contentFilePath":"/home/runner/work/homepage/homepage/blog/posts/write-md-parser.mdx"},"slug":"write-md-parser"},{"excerpt":"搭建一个自己的博客是多少投身于 IT 行业的男人女人们的梦想！撇开维护所花费的巨量时间开销不看，能够在网络上划得一片净土去传递自己的故事与思考，是一件何等快乐的事情！ 正如许多人的第一篇博客那样，在这里记录下搭建博客的流程，也许能带给你些许决意和帮助。\n\n开始前\n\n假设你已了解何为 Github Pages，并充分认识到它对于一个渴望搭建博客的中国人的难以替代性（是的，我不愿意备案）。在开始之前…","frontmatter":{"categories":["技术琐事"],"tags":["博客开发","Node","Hexo"],"title":"Hello Hexo World","date":"2019-12-27T00:00:00.000Z","updated":"2021-02-19T00:00:00.000Z","timeliness":null},"id":"a7a2765f-b56b-5ec8-aac8-b37d2467d630","internal":{"contentDigest":"d53bed3fde0013276d762e1f5875fe3b","contentFilePath":"/home/runner/work/homepage/homepage/blog/posts/hello-hexo-world.mdx"},"slug":"hello-hexo-world"}],"tag":"Node"}},"staticQueryHashes":["1770348878","4278130389"],"slicesMap":{}}