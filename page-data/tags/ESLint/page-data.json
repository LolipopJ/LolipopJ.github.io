{"componentChunkName":"component---src-templates-post-list-tsx","path":"/tags/ESLint/","result":{"pageContext":{"posts":[{"excerpt":"哪位代码人不希望自己的代码总有统一优美的风格，不会因为合作开发项目而杂乱呢？ 在最开始写项目代码的时候我就用起了 ESLint 和 Prettier，再装一堆预设的配置，便跑了起来。令人沮丧的是，用 ESLint 修复了代码质量问题，还是会在编译器里看到红色波浪线，提醒还有些代码风格需要修复。直到这一次，我才忽然意识到 ESLint 和 Prettier 其实分工了不同领域，协同使用体验极好。\n\n本…","frontmatter":{"categories":["前端开发"],"tags":["Node","Nuxt","ESLint","Prettier","VSCode"],"title":"Nuxt 项目配置 ESLint 和 Prettier 检查并规范代码质量与格式","date":"2021-03-03T00:00:00.000Z","updated":"2021-08-07T00:00:00.000Z","timeliness":false},"id":"c748aa72-8932-50ed-8e4e-8d2bedaa4025","internal":{"contentDigest":"91c042c627129370c3a1d465f14cb97b","contentFilePath":"/home/runner/work/homepage/homepage/blog/posts/nodejs-eslint-prettier.mdx"},"slug":"nodejs-eslint-prettier"}],"tag":"ESLint"}},"staticQueryHashes":["1770348878","4278130389"],"slicesMap":{}}