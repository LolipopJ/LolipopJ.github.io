{"componentChunkName":"component---src-templates-post-list-tsx","path":"/tags/Prettier/","result":{"data":{"allMdx":{"nodes":[{"excerpt":"编写代码时使用 EditorConfig EditorConfig 能够帮助跨各种 IDE 开发同一项目的不同开发人员保持一致的编码风格。\n\nVSCode 没有内置对 EditorConfig 的支持，需要在插件市场中手动搜索并安装插件。\n\nEditorConfig 会自动读取工作区中的  文件，更详细的配置说明可以参考官方介绍。下面是笔者常用的配置：\n\n推送仓库前使用 Prettier\n\n为了进一步确…","fields":{"slug":"editorconfig-prettier"},"frontmatter":{"categories":["技术琐事"],"tags":["Node","EditorConfig","Prettier","VSCode"],"title":"使用 EditorConfig 和 Prettier 优雅地配置 VSCode 代码格式化","date":"2021-08-07T00:00:00.000Z","updated":"2023-12-14T00:00:00.000Z","timeliness":true}},{"excerpt":"哪位代码人不希望自己的代码总有统一优美的风格，不会因为合作开发项目而杂乱呢？ 在最开始写项目代码的时候我就用起了 ESLint 和 Prettier，再装一堆预设的配置，便跑了起来。令人沮丧的是，用 ESLint 修复了代码质量问题，还是会在编译器里看到红色波浪线，提醒还有些代码风格需要修复。直到这一次，我才忽然意识到 ESLint 和 Prettier 其实分工了不同领域，协同使用体验极好。\n\n本…","fields":{"slug":"nodejs-eslint-prettier"},"frontmatter":{"categories":["前端开发"],"tags":["ESLint","Prettier","VSCode"],"title":"前端工程配置 ESLint 和 Prettier 检查并规范代码质量与格式","date":"2021-03-03T00:00:00.000Z","updated":"2025-04-11T00:00:00.000Z","timeliness":true}}]}},"pageContext":{"ids":["fd64a68b-2bdd-5530-9121-d433cf2baaac","c748aa72-8932-50ed-8e4e-8d2bedaa4025"],"tag":"Prettier"}},"staticQueryHashes":["4278130389","51765410"],"slicesMap":{}}