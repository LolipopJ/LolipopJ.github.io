{"componentChunkName":"component---src-templates-post-list-tsx","path":"/categories/前端开发/","result":{"data":{"allMdx":{"nodes":[{"excerpt":"搭建一个自己的博客是无数跻身于 IT 行业开发者的心中最质朴的愿望！ 回想笔者的历程，刚上大学的时候就摩拳擦掌想要实现一个博客系统，但在 Github 上创建了仓库以后就开始了无限期的拖延：自己没有任何的开发经验，不知道框架也不知道 UI 组件库，只知道要写 HTML + CSS + JavaScript 代码，面对眼前想要实现的完整系统不知该如何下手。\n\n从零开始实现博客系统的计划虽然搁浅…","fields":{"slug":"build-my-gatsby-blog"},"frontmatter":{"categories":["前端开发"],"tags":["React","TypeScript","Gatsby"],"title":"基于 Gatsby 打造我的个人博客系统","date":"2025-03-12T00:00:00.000Z","updated":"2025-03-14T00:00:00.000Z","timeliness":false}},{"excerpt":"为什么 前阵子面试的时候被问到这个问题，觉得挺有意思，于是决定亲手实现一个转盘抽奖组件试试。\n\n翻看别人的实现方案时，发现和自己面试时答得相差很大，悲 😢。但总之，是时候开始弥补自己的 CSS 和动画技能了。\n\n是什么\n\n一个转盘抽奖组件主要由三部分组成，写有中奖结果的圆形转盘、指向结果的指针和开始转动的按钮。\n\n如果每个中奖结果的概率相近，我们可以按照真实概率来划分每个奖品所占圆形的扇形比例…","fields":{"slug":"lucky-draw"},"frontmatter":{"categories":["前端开发"],"tags":["TypeScript","CSS"],"title":"纯前端如何实现一个转盘抽奖组件","date":"2024-09-06T00:00:00.000Z","updated":"2024-09-07T00:00:00.000Z","timeliness":false}},{"excerpt":"开发图像查重工具时遇到了这样一个问题：在查重之前，用户需要先对图像文件进行索引操作，后台将调用可执行文件并为每张图像生成特征值。索引操作所需的时间与图像的数量及大小呈正相关，笔者为大约 50000 张图片（约 170GB）生成特征值，需要花费将近 90 分钟的时间。在这种情况下，如果渲染器什么也不展示，卡在那里，用户难免会非常焦虑 —— 后台是否还在运行，我是不是卡死了？ 那么需求也就明了了…","fields":{"slug":"electron-real-time-print-execution-log"},"frontmatter":{"categories":["前端开发"],"tags":["Node","Electron","TypeScript","React"],"title":"Electron 执行后台程序并在渲染器实时打印运行日志","date":"2024-08-05T00:00:00.000Z","updated":"2024-08-05T00:00:00.000Z","timeliness":false}},{"excerpt":"项目中使用了 AntD 4.x 的  组件，开发环境显示正常，生产环境显示乱码，如下图所示： 问题原因\n\n 组件底层的国际化既由 AntD 提供的  控制（如上图的“年”，显示正常），又由 Moment 控制（如上图的“月”，显示乱码）。\n\n经查询，当我们以 ISO8859-1 方式读取 UTF-8 编码的中文时，会出现如“ç”±æœˆè¦�å¥½å¥½å­¦ä¹ å¤©å¤©å�‘ä¸Š…","fields":{"slug":"antd-comp-garbled-characters"},"frontmatter":{"categories":["前端开发"],"tags":["React","TypeScript","Ant-Design"],"title":"遇到 AntD 组件中文乱码问题，可以试试这么解决","date":"2023-10-09T00:00:00.000Z","updated":"2023-10-09T00:00:00.000Z","timeliness":false}},{"excerpt":"Umi 是一款企业级的 React 前端应用框架，云巧产业数字组件中心推荐使用基于 Umi 的 Koi 框架统一前端应用研发流程，支撑前端项目从研发、联调到上线、发布的全流程。 本文假设您正在或计划使用 Umi 或 Koi 作为底层框架支撑前端应用的开发，并且对 Umi 有一定的了解。\n\n数据治理的原则\n\nReact 的核心特征是“数据驱动视图”，用公式表达即 ，通过数据变化来驱动视图变化。React…","fields":{"slug":"umi-plugin-usemodel"},"frontmatter":{"categories":["前端开发"],"tags":["React","Umi"],"title":"为什么我使用 Umi 的 model 简易数据流管理插件","date":"2022-10-23T00:00:00.000Z","updated":"2022-10-23T00:00:00.000Z","timeliness":null}},{"excerpt":"业务上有这样一个需求：「若用户不活跃超过 12 个小时，自动退出当前页面，并切换路由到首页」。 想都没想，直接在  里用  定个时，12 个小时后触发相应跳转事件：\n\n没想到，今天上班来，切换到没有关闭的标签页，发现还在当前页面，掐指一算怎么也有 12 个小时了，这是怎么一回事儿……？\n\n昨天晚上走的时候还在和前辈探讨页面卸载（）事件与浏览器后台优化的坑，于是首先就想到了可能是浏览器优化的缘故…","fields":{"slug":"js-webworker-settimeout"},"frontmatter":{"categories":["前端开发"],"tags":["TypeScript","React","Web-Worker","Umi","Webpack"],"title":"定时器 SetTimeout 在后台失效？试试 Web Worker 吧","date":"2022-09-22T00:00:00.000Z","updated":"2022-09-22T00:00:00.000Z","timeliness":null}},{"excerpt":"去年投简历的时候，在 Github 上找了个开源的，星星很多的仓库 best-resume-ever 来制作自己的简历。其中的 Creative 模板我觉得很喜欢，就用它制作了我人生中的第一份找工作用的简历： 然后到了现在，到了秋招真正找工作走向社会的季节了，又该制作自己的简历了。一年的时光给自己的人生又增添了几分色彩，原先简历模板已然不够用了。正巧，这个仓库由 Vue 编写…","fields":{"slug":"build-my-resume"},"frontmatter":{"categories":["前端开发"],"tags":["resume","CSS","Vue-2","Github-actions","rxjs"],"title":"把自己的简历做成 Web 页面","date":"2021-08-19T00:00:00.000Z","updated":"2021-08-20T00:00:00.000Z","timeliness":false}},{"excerpt":"看腻了原先的字体，亦或是想满足独树一帜的设计欲望？不妨更换一下博客的字体吧！本文将基于 Hexo 和主题 Hexo-Theme-Archer 展示如何更换博客的中文字体。 引入字体文件\n\n这里提供两种引入的思路，一种是 CDN 引入，一种是本地引入。建议通过 CDN 的方式引入，可以大大提高加载效率。\n\n引入 CDN 字体文件\n\n以更换字体为思源黑体（Google 字体上叫 ，Adobe 版本叫 ）为例…","fields":{"slug":"web-font-for-hexo-theme-archer"},"frontmatter":{"categories":["前端开发"],"tags":["Node","Hexo","hexo-theme-archer"],"title":"为 Archer 主题更换字体","date":"2021-06-26T00:00:00.000Z","updated":"2021-08-10T00:00:00.000Z","timeliness":null}},{"excerpt":"在前端性能优化中存在一个老生常谈的问题：如何优化高频率执行的 JS 代码？例如： 我们为浏览器滚动 scroll 绑定了监听事件，当滚动到某位置之下后，会在浏览器右下方显示一个点击后能快速回到页面顶部的浮动按钮；而滚动回该位置之上时，浮动按钮消失。现在我们发现，用户每次使用滚轮滑动页面，都会触发很多次该事件，判断当前在该位置之上还是之下，这在一定程度上降低了前端的性能。 我们为网页添加了搜索功能…","fields":{"slug":"js-debounce-throttle"},"frontmatter":{"categories":["前端开发"],"tags":["JavaScript","Vue-2","Nuxt"],"title":"函数防抖和节流，以及在 Vue 中的运用","date":"2021-05-08T00:00:00.000Z","updated":"2021-05-08T00:00:00.000Z","timeliness":false}},{"excerpt":"迷途知反！腾讯地图的 JS API 文档实在过于简陋，且库很久没有更新，转身投入高德地图的怀抱，享受 this moment 的美好！ 高德地图与腾讯地图定位功能区别\n\n高德地图将定位功能和逆地理编码功能分开为两个操作，而腾讯地图将二者合并。\n\n这意味着使用高德地图实现逆地理编码，首先需要执行定位操作，再将得到的结果传给逆地理编码插件获得最后的结果。\n\n此外…","fields":{"slug":"amap-import-vue"},"frontmatter":{"categories":["前端开发"],"tags":["JavaScript","Node","Vue-2","Nuxt","Promise"],"title":"在 Nuxt.js 中引入高德地图并实现定位及逆地理编码","date":"2021-03-17T00:00:00.000Z","updated":"2021-03-18T00:00:00.000Z","timeliness":null}},{"excerpt":"正在开发的 Web 项目需要获取使用者的位置信息，而使用者主要通过移动端访问此 Web 服务。位置信息需要精确到区。在腾讯位置服务的定位解决方案里想要搜索可用的 JavaScript 库，只看到了服务端的 IP 定位和移动端的几个 SDK 包，甚异之。 终于在不起眼的地方找到了前端定位组件，适用于浏览器进行定位操作。\n\n本文基于 Nuxt.js 实现前端定位功能。\n\n它能做什么\n\n组件旨在优化纯 HTM…","fields":{"slug":"tencent-map-api-get-current-location"},"frontmatter":{"categories":["前端开发"],"tags":["JavaScript","Node","Vue-2","Nuxt"],"title":"使用腾讯位置服务进行 Web 前端定位","date":"2021-03-16T00:00:00.000Z","updated":"2021-03-16T00:00:00.000Z","timeliness":null}},{"excerpt":"哪位代码人不希望自己的代码总有统一优美的风格，不会因为合作开发项目而杂乱呢？ 在最开始写项目代码的时候我就用起了 ESLint 和 Prettier，再装一堆预设的配置，便跑了起来。令人沮丧的是，用 ESLint 修复了代码质量问题，还是会在编译器里看到红色波浪线，提醒还有些代码风格需要修复。直到这一次，我才忽然意识到 ESLint 和 Prettier 其实分工了不同领域，协同使用体验极好。\n\n本…","fields":{"slug":"nodejs-eslint-prettier"},"frontmatter":{"categories":["前端开发"],"tags":["Node","Nuxt","ESLint","Prettier","VSCode"],"title":"Nuxt 项目配置 ESLint 和 Prettier 检查并规范代码质量与格式","date":"2021-03-03T00:00:00.000Z","updated":"2021-08-07T00:00:00.000Z","timeliness":false}},{"excerpt":"在开发 NetUnion 的官网页面时，有这样一个需求：读取本地目录下的新闻和博客文件，并在前端渲染，其中文件均为 Markdown 格式。 与全栈开发直接调用后端数据库不同的是，没有数据表字段来记录文件的不同属性，例如文件的题目、作者、撰写日期等，因此这些属性需要记录在 .md 文件当中。\n\n这样的撰写方式是不是很熟悉？没错，不就是我正在写的 Hexo 博客中 .md 文件的编写格式嘛！\n\n自动导入…","fields":{"slug":"write-md-parser"},"frontmatter":{"categories":["前端开发"],"tags":["Markdown","JavaScript","Node","Webpack"],"title":"Webpack 读取本地 Markdown 文件并进行预处理","date":"2021-02-23T00:00:00.000Z","updated":"2021-06-26T00:00:00.000Z","timeliness":null}}]}},"pageContext":{"ids":["41b64afb-8604-58ac-8893-9191c7cea309","57709d61-94c3-56fb-a673-adad59a142e9","e4e1117b-9d1a-5bfe-9f4f-c9651c62f048","9d6ab4cb-25a5-53ff-90bf-6cbe628798b3","0f1051cc-3376-5b1b-9e53-42eb7dedd59e","ad1f4d12-c060-50ac-aabd-c7d511557a9a","b95f6d61-5eb0-5059-a978-00a50ccd4b65","ce62715c-86ad-504a-9465-dc42cca86603","f347e133-3dba-5229-ade0-f4669362b811","10034809-1948-5171-b8cd-d2aa98c7d1f8","086dac5d-4f33-570b-a1cc-35148d744ed7","c748aa72-8932-50ed-8e4e-8d2bedaa4025","37fa9a4a-1789-5893-bb40-c431546078fd"],"category":"前端开发"}},"staticQueryHashes":["4278130389","51765410"],"slicesMap":{}}