{"componentChunkName":"component---src-templates-post-list-tsx","path":"/categories/后端开发/","result":{"data":{"allMdx":{"nodes":[{"excerpt":"笔者最近在 OpenWRT 软路由上部署了一个 Minecraft 服务器，出于对数据安全的焦虑，于是折腾了一下存档备份的相关事宜，记录为此文。 在 CurseForge 等模组站上已有方便好用的 Minecraft 服务器存档备份插件，除非您喜欢折腾或高自由度的定制，不用像笔者这样编写一整个脚本。\n\n完整的脚本可见此。\n\n编写备份脚本\n前置准备\n\n为了脚本编写方便，约定应该在 Minecraft…","fields":{"slug":"backup-mc-server"},"frontmatter":{"categories":["后端开发"],"tags":["Linux","OpenWRT","Minecraft","Node","JavaScript","Alist"],"title":"基于原生 Node 备份软路由上的 Minecraft 服务器存档，并通过 Alist 上传到云端","date":"2024-05-11T00:00:00.000Z","updated":"2024-05-23T00:00:00.000Z","timeliness":false}},{"excerpt":"假设，您身边有两台电脑，一台打算用来做 PostgreSQL 数据库服务器，一台用来做客户端。服务器上的 PostgreSQL 14 安装在  目录下，数据库文件保存在  目录，欲访问的数据库名为 ，访问数据库的用户为 。 配置 \n\n编辑数据库配置文件 ，设置监听的远程连接地址。将  项的值设置为 ，如下所示：\n\n配置 \n\n编辑数据库客户端认证配置文件 ，设置允许连接到数据库的客户端 IP 地址。\n\n该…","fields":{"slug":"connect-with-pgsql"},"frontmatter":{"categories":["后端开发"],"tags":["PostgreSQL","Windows"],"title":"连接到 Windows 端的 PostgreSQL 数据库","date":"2022-02-12T00:00:00.000Z","updated":"2022-02-12T00:00:00.000Z","timeliness":null}},{"excerpt":"笔者自高中到现在，游走于 Pixiv 若干载，不慎收藏了许多名家雅作。 独乐乐不如众乐乐！笔者想做一个 web 页面来随机访问我的收藏，不过在此之前，可以先实现服务端上的内容。再之后做网页时，不过是简单的读取数据库罢了！\n\n最初，笔者以为得将我的库存全部放到服务器上项目中去，然后随机访问其中的图片实现功能，但这样做很难得同步，遂搁置。不过，笔者在最近发现有一个 Pixiv 图片代理网站 可以快速下载…","fields":{"slug":"random-get-me-a-picture"},"frontmatter":{"categories":["后端开发"],"tags":["Telegram","Bot","Node","Koa"],"title":"这位客官，要来一张我珍藏许久的图片吗","date":"2022-01-13T00:00:00.000Z","updated":"2022-01-15T00:00:00.000Z","timeliness":null}},{"excerpt":"本文基于 Koa 从零开始搭建一个简单的 Telegram Bot 应用服务，支持获取 Github Issues 的评论并转发到 Telegram 频道，帮助笔者更好地将捣玩 Telegram！ 时间推移至 2024 年，笔者现在更建议使用 Bun 开发应用服务，开箱即用的高性能服务以及完备的 TypeScript 支持，能大大提升开发体验。下面为撰写于 2022 年初的原文。\n\n本文假设您已…","fields":{"slug":"start-telegram-bot"},"frontmatter":{"categories":["后端开发"],"tags":["Telegram","Bot","Node","Koa","PostgreSQL","Sequelize"],"title":"从零开始使用 Telegram Bot","date":"2022-01-09T00:00:00.000Z","updated":"2024-07-09T00:00:00.000Z","timeliness":null}},{"excerpt":"下载 Release 在 Project-V 的 Github Releases 页面下载最新的二进制包。\n\n本文以通用于 x86_64 机器的  为例。下载完成后传入 Linux 主机即可。\n\n安装 Project-V\n\n执行  命令：\n\n文件将全部解压到当前目录。\n\n创建软链接\n\n执行  命令：\n\n这里的  是压缩包里已编译好的二进制可执行文件。\n\n配置 Project-V\n\n编辑与  相同目录下的  文件…","fields":{"slug":"linux-project-v"},"frontmatter":{"categories":["后端开发"],"tags":["Linux"],"title":"在 Linux 系统下启用 Project-V","date":"2021-06-09T00:00:00.000Z","updated":"2021-06-09T00:00:00.000Z","timeliness":null}},{"excerpt":"查看系统 OS 及架构 以 Euler 系统为例，在终端上输入命令查看，可以通过  命令找到 rpm 包，再通过  查看系统 OS 及架构信息：\n\n当然，也可以使用通用的  命令。\n\n当前系统为 Euler 2.0 (SP5)，处理器架构为 x86_64。\n\n下载 MySQL\n\nEuler 2.0 系统基于 CentOS 7 开发，而 CentOS 7 由 Red Hat Enterprise…","fields":{"slug":"euler-install-mysql"},"frontmatter":{"categories":["后端开发"],"tags":["Linux","MySQL"],"title":"在 Euler 系统上离线安装 MySQL 5.7","date":"2021-06-04T00:00:00.000Z","updated":"2021-07-29T00:00:00.000Z","timeliness":null}},{"excerpt":"本博客基于 CMake 实现编译  版本。 本博客的 Windows 端使用的命令提示符界面为 Powershell。\n\n安装编译依赖软件\n\n在 Windows 系统上编译 gRPC 需要首先准备下述软件：\n\nVisual Studio 2015（或 2017），将使用到 Visual C++ compiler Git CMake nasm ninja（可选）\nVisual Studio 2015…","fields":{"slug":"windows-install-grpc"},"frontmatter":{"categories":["后端开发"],"tags":["Windows","CPP","gRPC"],"title":"Windows 系统编译安装基于 C++ 的 gRPC","date":"2021-04-26T00:00:00.000Z","updated":"2021-04-26T00:00:00.000Z","timeliness":null}},{"excerpt":"本文适用于 C++ 版本 gRPC 的离线编译安装，但对于下载 gRPC 步骤强烈建议使用 git 进行。 如果在能直接连接外网的机器上编译，可直接按照 gRPC 官网文档的指引快速执行编译操作。\n\n安装基本依赖\n\n确保机器上包括这些基本依赖：, ,  与 C++ 编译环境。\n\ngRPC 的编译需要  版本在  及以上。假如版本低于此，应当在 Docker 容器中安装较新版本的 GCC 再执行编译操作…","fields":{"slug":"linux-docker-install-grpc"},"frontmatter":{"categories":["后端开发"],"tags":["Linux","CPP","gRPC","Docker"],"title":"Linux 系统编译安装基于 C++ 的 gRPC","date":"2021-04-22T00:00:00.000Z","updated":"2021-05-11T00:00:00.000Z","timeliness":null}},{"excerpt":"如果软件源可用，可以使用 CentOS 的 yum 包管理器或 Ubuntu 的 apt 包管理器等一键安装 GCC，例如： 本文适用于系统中包含有其它版本的 GCC 编译器情况下，手动更新或降级 GCC 编译器。编译 GCC 的过程十分耗时，如果能使用包管理器尽量还是使用包管理器吧。\n\nNOTE: 如果仅使用 GCC 进行编译操作或不确定当前系统能否兼容新版本的 GCC，建议在 Docker…","fields":{"slug":"linux-docker-gcc-update"},"frontmatter":{"categories":["后端开发"],"tags":["Linux","GCC","Docker"],"title":"Linux 容器更新或降级 GCC 版本","date":"2021-04-20T00:00:00.000Z","updated":"2021-04-20T00:00:00.000Z","timeliness":null}}]}},"pageContext":{"ids":["c9e1e460-ce99-56b4-a3a4-fd7b1c2652ed","9b5324f9-6ab0-52c8-a384-212bd3fa52a3","9d391e71-9fdf-525f-b7ab-1285bdf5a9fa","5b833204-fd5f-5105-9234-05413f0798bc","fc893055-ed12-5175-95fa-596cb36121e0","6fe74f1b-3569-56e9-a5fe-81ee7030d276","f7c6fd31-27c4-5c33-8a38-f1f1f9a0cb38","b1343f39-4753-579e-aaec-e6bb73994109","ceb029e9-ef23-513b-900a-fd2b0419deaf"],"category":"后端开发"}},"staticQueryHashes":["4278130389","51765410"],"slicesMap":{}}