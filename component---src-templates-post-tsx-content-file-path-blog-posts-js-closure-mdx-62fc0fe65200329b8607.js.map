{"version":3,"file":"component---src-templates-post-tsx-content-file-path-blog-posts-js-closure-mdx-62fc0fe65200329b8607.js","mappings":"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","sources":["webpack://homepage/./blog/posts/js-closure.mdx","webpack://homepage/./src/templates/post.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    h3: \"h3\",\n    ol: \"ol\",\n    span: \"span\",\n    blockquote: \"blockquote\",\n    em: \"em\",\n    a: \"a\"\n  }, _provideComponents(), props.components), {Link} = _components;\n  if (!Link) _missingMdxReference(\"Link\", true);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"JavaScript 中有一个叫作闭包（Closure）的概念，非常有趣且适用，值得学习并整理为一篇博客。\"), \"\\n\", React.createElement(_components.p, null, \"为了更好理解闭包的作用，不妨看看我的\", React.createElement(Link, {\n    to: \"/posts/js-hoisting\"\n  }, \"这一篇博客\"), \"关于 JS 变量提升（Hoisting）和函数提升现象的阐述。\"), \"\\n\", React.createElement(_components.h2, null, \"作用域\"), \"\\n\", React.createElement(_components.p, null, \"在 JavaScript 中，\", React.createElement(_components.strong, null, \"作用域\"), \"（Scope）是当前代码执行的上下文，也即是值和表达式在其中可访问到的上下文。\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"如果一个变量或其它表达式不在当前作用域中，就会沿\", React.createElement(_components.strong, null, \"作用域链\"), \"（Scope Chain）往父作用域搜索。如果也仍未找到它的话，那么它就是不可用的。\"), \"\\n\", React.createElement(_components.li, null, \"最顶级的父作用域是全局对象。\"), \"\\n\", React.createElement(_components.li, null, \"父作用域不能引用子作用域中的变量和定义。\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"目前，作用域有三种：\", React.createElement(_components.strong, null, \"全局作用域\"), \"和\", React.createElement(_components.strong, null, \"函数作用域\"), \"，以及 ES6 新增的\", React.createElement(_components.strong, null, \"块级作用域\"), \"。\"), \"\\n\", React.createElement(_components.h3, null, \"作用域与执行上下文\"), \"\\n\", React.createElement(_components.p, null, \"作用域与\", React.createElement(_components.strong, null, \"执行上下文\"), \"（Context）是两个不同的概念。JavaScript 系解释型语言，执行分为解释阶段和执行阶段两个阶段，两个阶段所完成的行为大抵如下：\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"解释阶段：\", \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"词法分析；\"), \"\\n\", React.createElement(_components.li, null, \"语法分析；\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"确定作用域规则\"), \"。\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"执行阶段：\", \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.strong, null, \"创建执行上下文\"), \"；\"), \"\\n\", React.createElement(_components.li, null, \"执行函数代码；\"), \"\\n\", React.createElement(_components.li, null, \"垃圾回收。\"), \"\\n\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"可以看见，在解释阶段就已经确定了作用域规则，而在执行阶段才创建了执行上下文。因而作用域在定义时就确定，不会发生改变；执行上下文在运行时确定，可以发生改变。\"), \"\\n\", React.createElement(_components.h3, null, \"全局作用域和函数作用域\"), \"\\n\", React.createElement(_components.p, null, \"最外层函数和在最外层函数外边定义的变量拥有全局作用域，而函数内部定义的其他函数和变量拥有函数作用域。如：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> outVar <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"outVar\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">outFunc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> inVar <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"inVar\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">inFunc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>outVar<span class=\\\"token punctuation\\\">,</span> inVar<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">inFunc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>outVar<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// outVar</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>inVar<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Uncaught ReferenceError: inVar is not defined</span>\\n<span class=\\\"token function\\\">outFunc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// outVar inVar</span>\\n<span class=\\\"token function\\\">inFunc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Uncaught ReferenceError: inFunc is not defined</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"在最外层，我们可以正常打印 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">outVar</code>\"\n    }\n  }), \" 和调用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">outFunc()</code>\"\n    }\n  }), \" 方法，但是在尝试直接调用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">outFunc()</code>\"\n    }\n  }), \" 方法中所定义的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">inVar</code>\"\n    }\n  }), \" 和 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">inFunc()</code>\"\n    }\n  }), \" 方法时，发生报错。此外，在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">inFunc()</code>\"\n    }\n  }), \" 方法中，成功在父作用域找到并打印出了 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">outVar</code>\"\n    }\n  }), \" 的值。\"), \"\\n\", React.createElement(_components.p, null, \"所有未定义而直接赋值的变量会自动声明为全局变量，拥有全局作用域。如：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">outFunc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  globalInVar <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"globalInVar\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> invar <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"inVar\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// 执行这个函数以赋值</span>\\n<span class=\\\"token function\\\">outFunc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>globalInVar<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// globalInVar</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>invar<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Uncaught ReferenceError: invar is not defined</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"我们在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">outFunc()</code>\"\n    }\n  }), \" 方法中未使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">var</code>\"\n    }\n  }), \" 声明而直接给 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">globalInVar</code>\"\n    }\n  }), \" 变量进行赋值，它将声明为全局变量，并能在最外层直接打印出来。应当避免此类声明的存在，在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">ESLint</code>\"\n    }\n  }), \" 等代码质量检查工具中，会标注此类错误。\"), \"\\n\", React.createElement(_components.p, null, \"接下来看一段非常经典的代码案例：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getArr</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> arr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> i<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> arr<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">var</span> testArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getArr</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>testArr<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 5</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"我们将方法传入到数组中，期望调用方法返回的值为当前数组的索引值。在调用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">testArr[2]()</code>\"\n    }\n  }), \" 时，期望得到的返回值为 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">2</code>\"\n    }\n  }), \"，但实际返回的值是 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">5</code>\"\n    }\n  }), \"，为什么？\"), \"\\n\", React.createElement(_components.p, null, \"这是由于在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">for</code>\"\n    }\n  }), \" 循环中我们使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">var</code>\"\n    }\n  }), \" 声明的变量 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">i</code>\"\n    }\n  }), \" 会发生变量提升，其作用域为 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">getArr()</code>\"\n    }\n  }), \" 这个函数作用域。在调用数组中存储的函数时，我们已经完成了循环，此时 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">i</code>\"\n    }\n  }), \" 的值变成了 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">5</code>\"\n    }\n  }), \"，则无论调用数组的哪个函数都会打印出现在的值 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">5</code>\"\n    }\n  }), \"。上面的代码使用简化的方式编写，相当于：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> arr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> i<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 变量提升，我们在 for 循环中声明的变量在全局可访问</span>\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> i<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 5</span>\\n<span class=\\\"token comment\\\">// console.log(i) // 5</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"那么，现在的问题是，要如何在函数内部保存（或记住）一个从外部传入的值，在调用的时候能正确打印出我们想要的结果呢？\"), \"\\n\", React.createElement(_components.p, null, \"ES6 中提出了块级作用域，可以顺利解决这个问题。\"), \"\\n\", React.createElement(_components.h3, null, \"块级作用域\"), \"\\n\", React.createElement(_components.p, null, \"与声明的变量只能是全局或整个函数块的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">var</code>\"\n    }\n  }), \" 命令不同，\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">let</code>\"\n    }\n  }), \" 和 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">const</code>\"\n    }\n  }), \" 命令声明的变量、语句和表达式作用域可以限制在块级以内。例如：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> varVar <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"varVar\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> letVar <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"letVar\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>varVar<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// varVar</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>letVar<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Uncaught ReferenceError: letVar is not defined</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"在 ES6 以前，不存在块级作用域，使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">var</code>\"\n    }\n  }), \" 命令声明的在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">for</code>\"\n    }\n  }), \", \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">while</code>\"\n    }\n  }), \" 等内部的变量都会提升为外部作用域的变量。\"), \"\\n\", React.createElement(_components.p, null, \"现在，我们就可以使用块级作用域替换刚刚的函数作用域了：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getArr</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> arr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 使用 let 替换 var</span>\\n    arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> i<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> arr<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">const</span> testArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getArr</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>testArr<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 2</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">let</code>\"\n    }\n  }), \" 命令声明的变量 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">i</code>\"\n    }\n  }), \" 在循环中拥有块级作用域，每次循环时每个返回的函数中引用的都是其对应块级作用域的变量。上面的代码使用简化的方式编写，相当于：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> arr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> n <span class=\\\"token operator\\\">=</span> i<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 声明的变量仅在 for 循环的块作用域可访问</span>\\n  arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> n<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 2</span>\\n<span class=\\\"token comment\\\">// console.log(i) // Uncaught ReferenceError: i is not defined</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"而在 ES6 之前，就需要用到了这篇博文真正的主角——闭包。\"), \"\\n\", React.createElement(_components.h2, null, \"什么是闭包\"), \"\\n\", React.createElement(_components.p, null, \"由于 JavaScript 的链式作用域（Chain Scope）结构，父对象的所有变量都对子变量可见，反之则不成立。出于某种原因，我们有时候需要得到函数内的局部变量，就需要使用变通的方法实现：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 子对象的变量对父对象不可见</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">outerFunc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> value <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">innerFunc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token function\\\">innerFunc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Uncaught ReferenceError: innerFunc is not defined</span>\\n\\n<span class=\\\"token comment\\\">// 变通的方法</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">outerFunc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> value <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">100</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">innerFunc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>value<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> innerFunc<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 将内部定义的方法返回</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">var</span> visitValue <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">outerFunc</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token function\\\">visitValue</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 100</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"在一些编程语言中，一个函数的局部变量仅存在于此函数的执行期间。那么一旦 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">outerFunc()</code>\"\n    }\n  }), \" 执行完毕，您可能会认为函数内部定义的变量 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">value</code>\"\n    }\n  }), \" 将不能够再访问。然而，在 JavaScript 中这段代码能够顺利执行并打印出结果。\"), \"\\n\", React.createElement(_components.p, null, \"这是由于 JavaScript 中的函数会形成\", React.createElement(_components.strong, null, \"闭包\"), \"。\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包（closure）。也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域。在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来。\\nA closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment). In other words, a closure gives you access to an outer function’s scope from an inner function. In JavaScript, closures are created every time a function is created, at function creation time.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"闭包是由函数以及声明该函数的词法环境组合而成的。该环境包含了这个闭包创建时作用域内的所有局部变量。从本质上来说，闭包可以看作将一个函数的内部和外部连接起来的桥梁。\"), \"\\n\", React.createElement(_components.p, null, \"在上面的代码中，变量 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">visitValue</code>\"\n    }\n  }), \" 是执行 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">outerFunc()</code>\"\n    }\n  }), \" 时创建的对 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">innerFunc</code>\"\n    }\n  }), \" 函数实例的引用，而 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">innerFunc</code>\"\n    }\n  }), \" 实例维持了一个对它的词法环境的引用，在这个词法环境中存在着变量 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">value</code>\"\n    }\n  }), \"。因此，当我们执行 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">visitValue()</code>\"\n    }\n  }), \" 时，变量 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">value</code>\"\n    }\n  }), \" 是可用的，最后我们成功在控制台打印出了它的值。\"), \"\\n\", React.createElement(_components.p, null, \"那么，为了解决在前文提出的不存在块级作用域的问题，我们可以像这样编写代码：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getArr</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> arr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">n</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">// n 的作用域为函数作用域</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token comment\\\">// 返回一个函数</span>\\n          <span class=\\\"token keyword\\\">return</span> n<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 调用函数返回的值为传入的 n 的值</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 传入当前的 i 值</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> arr<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">var</span> testArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getArr</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>testArr<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 2</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"对于上面的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">for</code>\"\n    }\n  }), \" 循环，相当于执行了下述代码：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\">arr<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">n</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> n<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\narr<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">n</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> n<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\narr<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">n</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> n<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 下略</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 2</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"这样一来，数组中的每个函数分别处于一个立即执行函数的\", React.createElement(_components.strong, null, \"函数作用域\"), \"中，这个立即执行的函数传入了每次循环时变量 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">i</code>\"\n    }\n  }), \" 的值。于是，当我们调用数组中的函数时，将返回\", React.createElement(_components.strong, null, \"传入时\"), \"的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">i</code>\"\n    }\n  }), \" 值，而不是循环结束后的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">i</code>\"\n    }\n  }), \" 值。\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"\\\"JavaScript 中闭包无处不在，你只需要能够识别并拥抱它。\\\"\\n\\\"最后你恍然大悟：原来在我的代码中已经到处都是闭包了，现在我终于能理解他们了。\\n\\\"理解闭包就好像 Neo 第一次见到矩阵一样。\\\"\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.em, null, \"You Don't Know Javascript\"), \" 中如是写道。\"), \"\\n\", React.createElement(_components.h2, null, \"如何使用闭包\"), \"\\n\", React.createElement(_components.p, null, \"如果不是某些特定任务需要使用到闭包，那么在函数中创建另一个函数是不明智的。闭包会使得函数中的变量保存在\", React.createElement(_components.strong, null, \"内存\"), \"中，可能造成性能问题。\"), \"\\n\", React.createElement(_components.h3, null, \"函数防抖和节流\"), \"\\n\", React.createElement(_components.p, null, \"函数防抖和函数节流就是典型的闭包用例，我在\", React.createElement(Link, {\n    to: \"/posts/js-debounce-throttle\"\n  }, \"这一篇博客\"), \"里对它们进行了编写。\"), \"\\n\", React.createElement(_components.h3, null, \"函数工厂\"), \"\\n\", React.createElement(_components.p, null, \"这是一个函数工厂的示例：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">makeAdder</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">x</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">y</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> x <span class=\\\"token operator\\\">+</span> y<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">var</span> add5 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">makeAdder</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> add10 <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">makeAdder</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">add5</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 7</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">add10</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 12</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"我们定义了一个函数 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">makeAdder(x)</code>\"\n    }\n  }), \"，它接受一个参数 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">x</code>\"\n    }\n  }), \"，并返回一个新的函数。返回的这个函数接受参数 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">y</code>\"\n    }\n  }), \"，并返回 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">x + y</code>\"\n    }\n  }), \" 的值。接着，我们创建了两个新函数 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">add5</code>\"\n    }\n  }), \" 和 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">add10</code>\"\n    }\n  }), \"，一个将它的参数与 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">5</code>\"\n    }\n  }), \" 求和，另一个与 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">10</code>\"\n    }\n  }), \" 求和。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">add5</code>\"\n    }\n  }), \" 和 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">add10</code>\"\n    }\n  }), \" 都是闭包，它们共享相同的函数定义，但是保存了不同的词法环境。在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">add5</code>\"\n    }\n  }), \" 的词法环境中，\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">x</code>\"\n    }\n  }), \" 的值为 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">5</code>\"\n    }\n  }), \"；而在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">add10</code>\"\n    }\n  }), \" 中，\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">x</code>\"\n    }\n  }), \" 为 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">10</code>\"\n    }\n  }), \"。\"), \"\\n\", React.createElement(_components.h3, null, \"面向对象编程\"), \"\\n\", React.createElement(_components.p, null, \"我们可以用闭包来模拟\", React.createElement(_components.strong, null, \"私有\"), \"属性和方法，就像面向对象编程语言中类的私有属性和方法的编写一样。以构建 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Rectangle</code>\"\n    }\n  }), \" 矩形类为例：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">Rectangle</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">height<span class=\\\"token punctuation\\\">,</span> width</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> height <span class=\\\"token operator\\\">=</span> height<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 私有的高属性</span>\\n  <span class=\\\"token keyword\\\">var</span> width <span class=\\\"token operator\\\">=</span> width<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 私有的宽属性</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">calcArea</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 私有的计算面积方法</span>\\n    <span class=\\\"token keyword\\\">return</span> height <span class=\\\"token operator\\\">*</span> width<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">setHeight</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">h</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 私有的设置高方法</span>\\n    height <span class=\\\"token operator\\\">=</span> h<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">setWidth</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">w</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 私有的设置宽方法</span>\\n    width <span class=\\\"token operator\\\">=</span> w<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 返回一个对象，对象可以访问到闭包的作用域</span>\\n    <span class=\\\"token keyword\\\">get</span> <span class=\\\"token function\\\">area</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">calcArea</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token function-variable function\\\">setHeight</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">h</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">setHeight</span><span class=\\\"token punctuation\\\">(</span>h<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token function-variable function\\\">setWidth</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">w</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">setWidth</span><span class=\\\"token punctuation\\\">(</span>w<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> square <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Rectangle</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>square<span class=\\\"token punctuation\\\">.</span>area<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 25</span>\\n\\nsquare<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setHeight</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nsquare<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setWidth</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>square<span class=\\\"token punctuation\\\">.</span>area<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 100</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>square<span class=\\\"token punctuation\\\">.</span>height<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// undefined</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"在上面的代码中，我们使用了闭包来定义公共函数，并令这些公共函数访问到私有函数和变量。这个方式又称模块模式（Module Pattern）。\"), \"\\n\", React.createElement(_components.p, null, \"在 ES6 中，可以用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">class</code>\"\n    }\n  }), \" 语法糖来声明类。上面的代码相当于：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Rectangle</span> <span class=\\\"token punctuation\\\">{</span>\\n  #height<span class=\\\"token punctuation\\\">;</span>\\n  #width<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// Constructor</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">height<span class=\\\"token punctuation\\\">,</span> width</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>#height <span class=\\\"token operator\\\">=</span> height<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>#width <span class=\\\"token operator\\\">=</span> width<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// Getter</span>\\n  <span class=\\\"token keyword\\\">get</span> <span class=\\\"token function\\\">area</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">calcArea</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// Method</span>\\n  <span class=\\\"token function\\\">calcArea</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>#height <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>#width<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">setHeight</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">h</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>#height <span class=\\\"token operator\\\">=</span> h<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">setWidth</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">w</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>#width <span class=\\\"token operator\\\">=</span> w<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> square <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Rectangle</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 使用 new 关键字来创建对象</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>square<span class=\\\"token punctuation\\\">.</span>area<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 25</span>\\n\\nsquare<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setHeight</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nsquare<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setWidth</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>square<span class=\\\"token punctuation\\\">.</span>area<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 100</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>square<span class=\\\"token punctuation\\\">.</span>height<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// undefined</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">class</code>\"\n    }\n  }), \" 内，私有属性 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">height</code>\"\n    }\n  }), \" 和 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">width</code>\"\n    }\n  }), \" 需要在前面加上 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">#</code>\"\n    }\n  }), \" 并在开头显示声明出来。\"), \"\\n\", React.createElement(_components.p, null, \"当然，相比闭包的方式，使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">class</code>\"\n    }\n  }), \" 的声明更加直观，值得推广使用。\"), \"\\n\", React.createElement(_components.p, null, \"值得补充的是，假如不需要在对象中使用私有声明，而是使用公用声明，应当避免使用闭包。同样以构建 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">PublicRectangle</code>\"\n    }\n  }), \" 矩形类为例：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">PublicRectangle</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">height<span class=\\\"token punctuation\\\">,</span> width</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 将矩形的高和宽作为返回对象的可访问属性</span>\\n    <span class=\\\"token literal-property property\\\">height</span><span class=\\\"token operator\\\">:</span> height<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token literal-property property\\\">width</span><span class=\\\"token operator\\\">:</span> width<span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token keyword\\\">get</span> <span class=\\\"token function\\\">area</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>height <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>width<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token function-variable function\\\">setHeight</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">h</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>height <span class=\\\"token operator\\\">=</span> h<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token function-variable function\\\">setWidth</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">w</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>width <span class=\\\"token operator\\\">=</span> w<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> square <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">PublicRectangle</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>square<span class=\\\"token punctuation\\\">.</span>area<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 25</span>\\n\\nsquare<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setHeight</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nsquare<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setWidth</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>square<span class=\\\"token punctuation\\\">.</span>area<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 100</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>square<span class=\\\"token punctuation\\\">.</span>height<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 10</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"上面的代码中我们并没有利用到闭包的好处，反而在每次调用构造器时都重新赋值一遍方法。因此在这里不妨变为添加\", React.createElement(_components.strong, null, \"原型方法\"), \"的方式：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">PublicRectangle</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">height<span class=\\\"token punctuation\\\">,</span> width</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>height <span class=\\\"token operator\\\">=</span> height<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>width <span class=\\\"token operator\\\">=</span> width<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nObject<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">defineProperty</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">PublicRectangle</span><span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"area\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 为 PublicRectangle 原型添加 area 的 getter</span>\\n  <span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>height <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>width<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token class-name\\\">PublicRectangle</span><span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">setHeight</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">h</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>height <span class=\\\"token operator\\\">=</span> h<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token class-name\\\">PublicRectangle</span><span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">setWidth</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">w</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>width <span class=\\\"token operator\\\">=</span> w<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">var</span> square <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">PublicRectangle</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 应使用 new 关键字</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>square<span class=\\\"token punctuation\\\">.</span>area<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 25</span>\\n\\nsquare<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setHeight</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nsquare<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setWidth</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>square<span class=\\\"token punctuation\\\">.</span>area<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 100</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>square<span class=\\\"token punctuation\\\">.</span>height<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 10</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, null, \"参考资料\"), \"\\n\", React.createElement(_components.h3, null, \"技术博客（或问答）\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://www.jianshu.com/p/ebb4eccb6625\"\n  }, \"闭包以及其 ES6 下的使用\"), \", 2020-01-13\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://blog.fundebug.com/2019/03/15/understand-javascript-scope/\"\n  }, \"深入理解 JavaScript 作用域和作用域链\"), \", 2019-03-15\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://juejin.cn/post/6844903747106111501\"\n  }, \"深入解析 ES6 中 let 和闭包\"), \", 2018-12-25\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://segmentfault.com/q/1010000016598692\"\n  }, \"如何给 js 内建对象构造器添加 getter 和 setter\"), \", 2018-10-06\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html\"\n  }, \"学习 Javascript 闭包（Closure）\"), \", 2009-08-30\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"其它资料\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures\"\n  }, \"闭包 - MDN\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes\"\n  }, \"类 - MDN\")), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://github.com/getify/You-Dont-Know-JS\"\n  }, \"You Don't Know Javascript\")), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/homepage/homepage/blog/posts/js-closure.mdx\";\nimport {Fancybox} from \"@fancyapps/ui\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport dayjs from \"dayjs\";\nimport {Link} from \"gatsby\";\nimport * as React from \"react\";\nimport Card from \"../components/card\";\nimport Category from \"../components/category\";\nimport SEO from \"../components/seo\";\nimport Tag from \"../components/tag\";\nconst FancyBoxImage = props => {\n  const {alt = \"The author is too lazy to give an alt\", src, ...restProps} = props;\n  return React.createElement(\"a\", {\n    href: src,\n    \"data-fancybox\": \"gallery\",\n    \"data-caption\": alt\n  }, React.createElement(\"img\", Object.assign({\n    src: src,\n    alt: alt\n  }, restProps)));\n};\nconst ALink = _ref => {\n  let {href = \"\", children} = _ref;\n  const isExternalHref = !(href !== null && href !== void 0 && href.startsWith(\"#\"));\n  const parsedHref = isExternalHref ? href : `#${encodeURIComponent(href.slice(1))}`;\n  return React.createElement(\"a\", {\n    href: parsedHref,\n    target: isExternalHref ? \"_blank\" : undefined,\n    rel: \"noreferrer\"\n  }, children);\n};\nconst components = {\n  a: ALink,\n  img: FancyBoxImage,\n  Card,\n  Link\n};\nconst PostTemplate = _ref2 => {\n  let {children, data} = _ref2;\n  const {mdx: {fields: {isDraft}, frontmatter: {title, date: dateString, updated: updatedDateString, categories, tags, timeliness}}} = data;\n  const articleRef = React.useRef(null);\n  const date = dayjs(dateString);\n  const updatedDate = updatedDateString ? dayjs(updatedDateString) : date;\n  const today = dayjs();\n  const diffDays = today.diff(updatedDate, \"days\");\n  React.useEffect(() => {\n    var _articleRef$current;\n    const optimizedImageLinks = (_articleRef$current = articleRef.current) === null || _articleRef$current === void 0 ? void 0 : _articleRef$current.querySelectorAll(\"a.gatsby-resp-image-link\");\n    optimizedImageLinks === null || optimizedImageLinks === void 0 ? void 0 : optimizedImageLinks.forEach(link => {\n      const image = link.children.item(1);\n      link.setAttribute(\"data-fancybox\", \"gallery\");\n      link.setAttribute(\"data-caption\", image.alt);\n    });\n    Fancybox.bind(\"[data-fancybox]\");\n    return () => Fancybox.unbind(\"[data-fancybox]\");\n  }, []);\n  return React.createElement(\"div\", {\n    className: \"mx-auto flex max-w-xl flex-col gap-y-12\"\n  }, React.createElement(\"div\", {\n    className: \"flex flex-col gap-4\"\n  }, (categories === null || categories === void 0 ? void 0 : categories.length) && React.createElement(Category, {\n    name: categories[0],\n    className: \"item-selectable\"\n  }), React.createElement(\"h1\", {\n    className: \"text-3xl font-bold\"\n  }, title), React.createElement(\"div\", {\n    className: \"item-secondary flex flex-col gap-2 lg:flex-row\"\n  }, dateString && React.createElement(\"span\", {\n    title: `首次发布于：${date.toString()}\\n最后更新于：${updatedDate.toString()}`\n  }, date.format(\"MM 月 DD 日 YYYY 年\")), (tags === null || tags === void 0 ? void 0 : tags.length) && React.createElement(\"div\", {\n    className: \"flex flex-1 flex-wrap gap-2 lg:before:content-['\\u2022']\"\n  }, tags.map(tag => React.createElement(Tag, {\n    key: tag,\n    name: tag,\n    className: \"item-secondary item-selectable\"\n  }))))), React.createElement(\"article\", {\n    ref: articleRef,\n    className: \"heti post-entry\"\n  }, isDraft && React.createElement(\"blockquote\", {\n    className: \"!border-red-400\"\n  }, \"\\u8FD9\\u662F\\u4E00\\u7BC7\", React.createElement(\"strong\", null, \"\\u672A\\u6B63\\u5F0F\\u53D1\\u5E03\"), \"\\u7684\\u535A\\u5BA2\\uFF0C\\u5185\\u5BB9\\u53EF\\u80FD\\u5C1A\\u672A\\u64B0\\u5199\\u5B8C\\u5168\\u6216\\u5B58\\u5728\\u4E00\\u4E9B\\u7EB0\\u6F0F\\uFF0C\\u5EFA\\u8BAE\\u60A8\\u4ED4\\u7EC6\\u8BC4\\u4F30\\u4FE1\\u606F\\u7684\\u6709\\u6548\\u6027\\u3002\"), timeliness !== false && diffDays > 365 && React.createElement(\"blockquote\", {\n    className: \"!border-orange-400\"\n  }, \"\\u8FD9\\u662F\\u4E00\\u7BC7\", React.createElement(\"strong\", null, \"\\u6700\\u540E\\u66F4\\u65B0\\u4E8E \", diffDays, \" \\u5929\\u524D\"), \"\\u7684\\u535A\\u5BA2\\uFF0C\\u5185\\u5BB9\\u53EF\\u80FD\\u968F\\u7740\\u65F6\\u95F4\\u7684\\u63A8\\u79FB\\u800C\\u53D8\\u5F97\\u4E0D\\u518D\\u9002\\u7528\\uFF0C\\u5EFA\\u8BAE\\u60A8\\u4ED4\\u7EC6\\u8BC4\\u4F30\\u4FE1\\u606F\\u7684\\u6709\\u6548\\u6027\\u3002\"), React.createElement(MDXProvider, {\n    components: components\n  }, children)));\n};\nconst query = \"2264136072\";\nexport const Head = _ref3 => {\n  let {data} = _ref3;\n  return React.createElement(SEO, {\n    title: String(data.mdx.frontmatter.title)\n  });\n};\nPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h2","strong","ul","li","h3","ol","span","blockquote","em","a","_provideComponents","components","Link","id","component","Error","_missingMdxReference","React","to","dangerouslySetInnerHTML","__html","href","wrapper","MDXLayout","_ref","children","isExternalHref","startsWith","parsedHref","encodeURIComponent","slice","target","undefined","rel","img","alt","src","restProps","Card","PostTemplate","_ref2","data","mdx","fields","isDraft","frontmatter","title","date","dateString","updated","updatedDateString","categories","tags","timeliness","articleRef","dayjs","updatedDate","diffDays","diff","_articleRef$current","optimizedImageLinks","current","querySelectorAll","forEach","link","image","item","setAttribute","Fancybox","bind","unbind","className","length","Category","name","toString","format","map","tag","Tag","key","ref","MDXProvider","Head","_ref3","SEO","String","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}