"use strict";(self.webpackChunkhomepage=self.webpackChunkhomepage||[]).push([[3116],{5600:function(n,a,s){s.r(a),s.d(a,{Head:function(){return y},default:function(){return E}});var t=s(8453),e=s(6540);function p(n){const a=Object.assign({p:"p",h2:"h2",strong:"strong",ul:"ul",li:"li",h3:"h3",ol:"ol",span:"span",blockquote:"blockquote",em:"em",a:"a"},(0,t.R)(),n.components),{Link:s}=a;return s||function(n,a){throw new Error("Expected "+(a?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Link",!0),e.createElement(e.Fragment,null,e.createElement(a.p,null,"JavaScript 中有一个叫作闭包（Closure）的概念，非常有趣且适用，值得学习并整理为一篇博客。"),"\n",e.createElement(a.p,null,"为了更好理解闭包的作用，不妨看看我的",e.createElement(s,{to:"/posts/js-hoisting"},"这一篇博客"),"关于 JS 变量提升（Hoisting）和函数提升现象的阐述。"),"\n",e.createElement(a.h2,null,"作用域"),"\n",e.createElement(a.p,null,"在 JavaScript 中，",e.createElement(a.strong,null,"作用域"),"（Scope）是当前代码执行的上下文，也即是值和表达式在其中可访问到的上下文。"),"\n",e.createElement(a.ul,null,"\n",e.createElement(a.li,null,"如果一个变量或其它表达式不在当前作用域中，就会沿",e.createElement(a.strong,null,"作用域链"),"（Scope Chain）往父作用域搜索。如果也仍未找到它的话，那么它就是不可用的。"),"\n",e.createElement(a.li,null,"最顶级的父作用域是全局对象。"),"\n",e.createElement(a.li,null,"父作用域不能引用子作用域中的变量和定义。"),"\n"),"\n",e.createElement(a.p,null,"目前，作用域有三种：",e.createElement(a.strong,null,"全局作用域"),"和",e.createElement(a.strong,null,"函数作用域"),"，以及 ES6 新增的",e.createElement(a.strong,null,"块级作用域"),"。"),"\n",e.createElement(a.h3,null,"作用域与执行上下文"),"\n",e.createElement(a.p,null,"作用域与",e.createElement(a.strong,null,"执行上下文"),"（Context）是两个不同的概念。JavaScript 系解释型语言，执行分为解释阶段和执行阶段两个阶段，两个阶段所完成的行为大抵如下："),"\n",e.createElement(a.ul,null,"\n",e.createElement(a.li,null,"解释阶段：","\n",e.createElement(a.ol,null,"\n",e.createElement(a.li,null,"词法分析；"),"\n",e.createElement(a.li,null,"语法分析；"),"\n",e.createElement(a.li,null,e.createElement(a.strong,null,"确定作用域规则"),"。"),"\n"),"\n"),"\n",e.createElement(a.li,null,"执行阶段：","\n",e.createElement(a.ol,null,"\n",e.createElement(a.li,null,e.createElement(a.strong,null,"创建执行上下文"),"；"),"\n",e.createElement(a.li,null,"执行函数代码；"),"\n",e.createElement(a.li,null,"垃圾回收。"),"\n"),"\n"),"\n"),"\n",e.createElement(a.p,null,"可以看见，在解释阶段就已经确定了作用域规则，而在执行阶段才创建了执行上下文。因而作用域在定义时就确定，不会发生改变；执行上下文在运行时确定，可以发生改变。"),"\n",e.createElement(a.h3,null,"全局作用域和函数作用域"),"\n",e.createElement(a.p,null,"最外层函数和在最外层函数外边定义的变量拥有全局作用域，而函数内部定义的其他函数和变量拥有函数作用域。如："),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">var</span> outVar <span class="token operator">=</span> <span class="token string">"outVar"</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">outFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> inVar <span class="token operator">=</span> <span class="token string">"inVar"</span><span class="token punctuation">;</span>\n  <span class="token keyword">function</span> <span class="token function">inFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>outVar<span class="token punctuation">,</span> inVar<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">inFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>outVar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// outVar</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>inVar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Uncaught ReferenceError: inVar is not defined</span>\n<span class="token function">outFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// outVar inVar</span>\n<span class="token function">inFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Uncaught ReferenceError: inFunc is not defined</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"在最外层，我们可以正常打印 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">outVar</code>'}})," 和调用 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">outFunc()</code>'}})," 方法，但是在尝试直接调用 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">outFunc()</code>'}})," 方法中所定义的 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">inVar</code>'}})," 和 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">inFunc()</code>'}})," 方法时，发生报错。此外，在 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">inFunc()</code>'}})," 方法中，成功在父作用域找到并打印出了 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">outVar</code>'}})," 的值。"),"\n",e.createElement(a.p,null,"所有未定义而直接赋值的变量会自动声明为全局变量，拥有全局作用域。如："),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">outFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  globalInVar <span class="token operator">=</span> <span class="token string">"globalInVar"</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> invar <span class="token operator">=</span> <span class="token string">"inVar"</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 执行这个函数以赋值</span>\n<span class="token function">outFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>globalInVar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// globalInVar</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>invar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Uncaught ReferenceError: invar is not defined</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"我们在 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">outFunc()</code>'}})," 方法中未使用 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">var</code>'}})," 声明而直接给 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">globalInVar</code>'}})," 变量进行赋值，它将声明为全局变量，并能在最外层直接打印出来。应当避免此类声明的存在，在 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ESLint</code>'}})," 等代码质量检查工具中，会标注此类错误。"),"\n",e.createElement(a.p,null,"接下来看一段非常经典的代码案例："),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> i<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> arr<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> testArr <span class="token operator">=</span> <span class="token function">getArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>testArr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"我们将方法传入到数组中，期望调用方法返回的值为当前数组的索引值。在调用 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">testArr[2]()</code>'}})," 时，期望得到的返回值为 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">2</code>'}}),"，但实际返回的值是 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">5</code>'}}),"，为什么？"),"\n",e.createElement(a.p,null,"这是由于在 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">for</code>'}})," 循环中我们使用 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">var</code>'}})," 声明的变量 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">i</code>'}})," 会发生变量提升，其作用域为 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">getArr()</code>'}})," 这个函数作用域。在调用数组中存储的函数时，我们已经完成了循环，此时 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">i</code>'}})," 的值变成了 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">5</code>'}}),"，则无论调用数组的哪个函数都会打印出现在的值 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">5</code>'}}),"。上面的代码使用简化的方式编写，相当于："),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> i<span class="token punctuation">;</span> <span class="token comment">// 变量提升，我们在 for 循环中声明的变量在全局可访问</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> i<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>\n<span class="token comment">// console.log(i) // 5</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"那么，现在的问题是，要如何在函数内部保存（或记住）一个从外部传入的值，在调用的时候能正确打印出我们想要的结果呢？"),"\n",e.createElement(a.p,null,"ES6 中提出了块级作用域，可以顺利解决这个问题。"),"\n",e.createElement(a.h3,null,"块级作用域"),"\n",e.createElement(a.p,null,"与声明的变量只能是全局或整个函数块的 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">var</code>'}})," 命令不同，",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">let</code>'}})," 和 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">const</code>'}})," 命令声明的变量、语句和表达式作用域可以限制在块级以内。例如："),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token punctuation">{</span>\n  <span class="token keyword">var</span> varVar <span class="token operator">=</span> <span class="token string">"varVar"</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> letVar <span class="token operator">=</span> <span class="token string">"letVar"</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>varVar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// varVar</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>letVar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Uncaught ReferenceError: letVar is not defined</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"在 ES6 以前，不存在块级作用域，使用 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">var</code>'}})," 命令声明的在 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">for</code>'}}),", ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">while</code>'}})," 等内部的变量都会提升为外部作用域的变量。"),"\n",e.createElement(a.p,null,"现在，我们就可以使用块级作用域替换刚刚的函数作用域了："),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 使用 let 替换 var</span>\n    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> i<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> arr<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> testArr <span class="token operator">=</span> <span class="token function">getArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>testArr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"使用 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">let</code>'}})," 命令声明的变量 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">i</code>'}})," 在循环中拥有块级作用域，每次循环时每个返回的函数中引用的都是其对应块级作用域的变量。上面的代码使用简化的方式编写，相当于："),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> n <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">// 声明的变量仅在 for 循环的块作用域可访问</span>\n  arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> n<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>\n<span class="token comment">// console.log(i) // Uncaught ReferenceError: i is not defined</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"而在 ES6 之前，就需要用到了这篇博文真正的主角——闭包。"),"\n",e.createElement(a.h2,null,"什么是闭包"),"\n",e.createElement(a.p,null,"由于 JavaScript 的链式作用域（Chain Scope）结构，父对象的所有变量都对子变量可见，反之则不成立。出于某种原因，我们有时候需要得到函数内的局部变量，就需要使用变通的方法实现："),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// 子对象的变量对父对象不可见</span>\n<span class="token keyword">function</span> <span class="token function">outerFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>\n  <span class="token keyword">function</span> <span class="token function">innerFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token function">innerFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Uncaught ReferenceError: innerFunc is not defined</span>\n\n<span class="token comment">// 变通的方法</span>\n<span class="token keyword">function</span> <span class="token function">outerFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>\n  <span class="token keyword">function</span> <span class="token function">innerFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> innerFunc<span class="token punctuation">;</span> <span class="token comment">// 将内部定义的方法返回</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> visitValue <span class="token operator">=</span> <span class="token function">outerFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">visitValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"在一些编程语言中，一个函数的局部变量仅存在于此函数的执行期间。那么一旦 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">outerFunc()</code>'}})," 执行完毕，您可能会认为函数内部定义的变量 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">value</code>'}})," 将不能够再访问。然而，在 JavaScript 中这段代码能够顺利执行并打印出结果。"),"\n",e.createElement(a.p,null,"这是由于 JavaScript 中的函数会形成",e.createElement(a.strong,null,"闭包"),"。"),"\n",e.createElement(a.blockquote,null,"\n",e.createElement(a.p,null,"一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包（closure）。也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域。在 JavaScript 中，每当创建一个函数，闭包就会在函数创建的同时被创建出来。\nA closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment). In other words, a closure gives you access to an outer function’s scope from an inner function. In JavaScript, closures are created every time a function is created, at function creation time."),"\n"),"\n",e.createElement(a.p,null,"闭包是由函数以及声明该函数的词法环境组合而成的。该环境包含了这个闭包创建时作用域内的所有局部变量。从本质上来说，闭包可以看作将一个函数的内部和外部连接起来的桥梁。"),"\n",e.createElement(a.p,null,"在上面的代码中，变量 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">visitValue</code>'}})," 是执行 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">outerFunc()</code>'}})," 时创建的对 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">innerFunc</code>'}})," 函数实例的引用，而 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">innerFunc</code>'}})," 实例维持了一个对它的词法环境的引用，在这个词法环境中存在着变量 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">value</code>'}}),"。因此，当我们执行 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">visitValue()</code>'}})," 时，变量 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">value</code>'}})," 是可用的，最后我们成功在控制台打印出了它的值。"),"\n",e.createElement(a.p,null,"那么，为了解决在前文提出的不存在块级作用域的问题，我们可以像这样编写代码："),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>\n      <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// n 的作用域为函数作用域</span>\n        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// 返回一个函数</span>\n          <span class="token keyword">return</span> n<span class="token punctuation">;</span> <span class="token comment">// 调用函数返回的值为传入的 n 的值</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 传入当前的 i 值</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> arr<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> testArr <span class="token operator">=</span> <span class="token function">getArr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>testArr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"对于上面的 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">for</code>'}})," 循环，相当于执行了下述代码："),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js">arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> n<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\narr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> n<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\narr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> n<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 下略</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"这样一来，数组中的每个函数分别处于一个立即执行函数的",e.createElement(a.strong,null,"函数作用域"),"中，这个立即执行的函数传入了每次循环时变量 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">i</code>'}})," 的值。于是，当我们调用数组中的函数时，将返回",e.createElement(a.strong,null,"传入时"),"的 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">i</code>'}})," 值，而不是循环结束后的 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">i</code>'}})," 值。"),"\n",e.createElement(a.blockquote,null,"\n",e.createElement(a.p,null,'"JavaScript 中闭包无处不在，你只需要能够识别并拥抱它。"\n"最后你恍然大悟：原来在我的代码中已经到处都是闭包了，现在我终于能理解他们了。\n"理解闭包就好像 Neo 第一次见到矩阵一样。"'),"\n"),"\n",e.createElement(a.p,null,e.createElement(a.em,null,"You Don't Know Javascript")," 中如是写道。"),"\n",e.createElement(a.h2,null,"如何使用闭包"),"\n",e.createElement(a.p,null,"如果不是某些特定任务需要使用到闭包，那么在函数中创建另一个函数是不明智的。闭包会使得函数中的变量保存在",e.createElement(a.strong,null,"内存"),"中，可能造成性能问题。"),"\n",e.createElement(a.h3,null,"函数防抖和节流"),"\n",e.createElement(a.p,null,"函数防抖和函数节流就是典型的闭包用例，我在",e.createElement(s,{to:"/posts/js-debounce-throttle"},"这一篇博客"),"里对它们进行了编写。"),"\n",e.createElement(a.h3,null,"函数工厂"),"\n",e.createElement(a.p,null,"这是一个函数工厂的示例："),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">makeAdder</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> add5 <span class="token operator">=</span> <span class="token function">makeAdder</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> add10 <span class="token operator">=</span> <span class="token function">makeAdder</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add5</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add10</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 12</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"我们定义了一个函数 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">makeAdder(x)</code>'}}),"，它接受一个参数 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">x</code>'}}),"，并返回一个新的函数。返回的这个函数接受参数 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">y</code>'}}),"，并返回 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">x + y</code>'}})," 的值。接着，我们创建了两个新函数 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">add5</code>'}})," 和 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">add10</code>'}}),"，一个将它的参数与 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">5</code>'}})," 求和，另一个与 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">10</code>'}})," 求和。"),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">add5</code>'}})," 和 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">add10</code>'}})," 都是闭包，它们共享相同的函数定义，但是保存了不同的词法环境。在 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">add5</code>'}})," 的词法环境中，",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">x</code>'}})," 的值为 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">5</code>'}}),"；而在 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">add10</code>'}})," 中，",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">x</code>'}})," 为 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">10</code>'}}),"。"),"\n",e.createElement(a.h3,null,"面向对象编程"),"\n",e.createElement(a.p,null,"我们可以用闭包来模拟",e.createElement(a.strong,null,"私有"),"属性和方法，就像面向对象编程语言中类的私有属性和方法的编写一样。以构建 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Rectangle</code>'}})," 矩形类为例："),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">Rectangle</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">height<span class="token punctuation">,</span> width</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> height <span class="token operator">=</span> height<span class="token punctuation">;</span> <span class="token comment">// 私有的高属性</span>\n  <span class="token keyword">var</span> width <span class="token operator">=</span> width<span class="token punctuation">;</span> <span class="token comment">// 私有的宽属性</span>\n  <span class="token keyword">function</span> <span class="token function">calcArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 私有的计算面积方法</span>\n    <span class="token keyword">return</span> height <span class="token operator">*</span> width<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 私有的设置高方法</span>\n    height <span class="token operator">=</span> h<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">function</span> <span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token parameter">w</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 私有的设置宽方法</span>\n    width <span class="token operator">=</span> w<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 返回一个对象，对象可以访问到闭包的作用域</span>\n    <span class="token keyword">get</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token function">calcArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">setHeight</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">setHeight</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">setWidth</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">w</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">setWidth</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> square <span class="token operator">=</span> <span class="token function">Rectangle</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>square<span class="token punctuation">.</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 25</span>\n\nsquare<span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nsquare<span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>square<span class="token punctuation">.</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>square<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"在上面的代码中，我们使用了闭包来定义公共函数，并令这些公共函数访问到私有函数和变量。这个方式又称模块模式（Module Pattern）。"),"\n",e.createElement(a.p,null,"在 ES6 中，可以用 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">class</code>'}})," 语法糖来声明类。上面的代码相当于："),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>\n  #height<span class="token punctuation">;</span>\n  #width<span class="token punctuation">;</span>\n  <span class="token comment">// Constructor</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">height<span class="token punctuation">,</span> width</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>#height <span class="token operator">=</span> height<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>#width <span class="token operator">=</span> width<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// Getter</span>\n  <span class="token keyword">get</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">calcArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// Method</span>\n  <span class="token function">calcArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#height <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#width<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>#height <span class="token operator">=</span> h<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token parameter">w</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>#width <span class="token operator">=</span> w<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> square <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用 new 关键字来创建对象</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>square<span class="token punctuation">.</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 25</span>\n\nsquare<span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nsquare<span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>square<span class="token punctuation">.</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>square<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"在 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">class</code>'}})," 内，私有属性 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">height</code>'}})," 和 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">width</code>'}})," 需要在前面加上 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">#</code>'}})," 并在开头显示声明出来。"),"\n",e.createElement(a.p,null,"当然，相比闭包的方式，使用 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">class</code>'}})," 的声明更加直观，值得推广使用。"),"\n",e.createElement(a.p,null,"值得补充的是，假如不需要在对象中使用私有声明，而是使用公用声明，应当避免使用闭包。同样以构建 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">PublicRectangle</code>'}})," 矩形类为例："),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">PublicRectangle</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">height<span class="token punctuation">,</span> width</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 将矩形的高和宽作为返回对象的可访问属性</span>\n    <span class="token literal-property property">height</span><span class="token operator">:</span> height<span class="token punctuation">,</span>\n    <span class="token literal-property property">width</span><span class="token operator">:</span> width<span class="token punctuation">,</span>\n    <span class="token keyword">get</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">setHeight</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> h<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">setWidth</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">w</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> w<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> square <span class="token operator">=</span> <span class="token function">PublicRectangle</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>square<span class="token punctuation">.</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 25</span>\n\nsquare<span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nsquare<span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>square<span class="token punctuation">.</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>square<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"上面的代码中我们并没有利用到闭包的好处，反而在每次调用构造器时都重新赋值一遍方法。因此在这里不妨变为添加",e.createElement(a.strong,null,"原型方法"),"的方式："),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token function-variable function">PublicRectangle</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">height<span class="token punctuation">,</span> width</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nObject<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token class-name">PublicRectangle</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">"area"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 为 PublicRectangle 原型添加 area 的 getter</span>\n  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>width<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">PublicRectangle</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">setHeight</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">h</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> h<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token class-name">PublicRectangle</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">setWidth</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">w</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> w<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> square <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PublicRectangle</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 应使用 new 关键字</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>square<span class="token punctuation">.</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 25</span>\n\nsquare<span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nsquare<span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>square<span class="token punctuation">.</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>square<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span></code></pre></div>'}}),"\n",e.createElement(a.h2,null,"参考资料"),"\n",e.createElement(a.h3,null,"技术博客（或问答）"),"\n",e.createElement(a.ul,null,"\n",e.createElement(a.li,null,e.createElement(a.a,{href:"https://www.jianshu.com/p/ebb4eccb6625"},"闭包以及其 ES6 下的使用"),", 2020-01-13"),"\n",e.createElement(a.li,null,e.createElement(a.a,{href:"https://blog.fundebug.com/2019/03/15/understand-javascript-scope/"},"深入理解 JavaScript 作用域和作用域链"),", 2019-03-15"),"\n",e.createElement(a.li,null,e.createElement(a.a,{href:"https://juejin.cn/post/6844903747106111501"},"深入解析 ES6 中 let 和闭包"),", 2018-12-25"),"\n",e.createElement(a.li,null,e.createElement(a.a,{href:"https://segmentfault.com/q/1010000016598692"},"如何给 js 内建对象构造器添加 getter 和 setter"),", 2018-10-06"),"\n",e.createElement(a.li,null,e.createElement(a.a,{href:"http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html"},"学习 Javascript 闭包（Closure）"),", 2009-08-30"),"\n"),"\n",e.createElement(a.h3,null,"其它资料"),"\n",e.createElement(a.ul,null,"\n",e.createElement(a.li,null,e.createElement(a.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures"},"闭包 - MDN")),"\n",e.createElement(a.li,null,e.createElement(a.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes"},"类 - MDN")),"\n",e.createElement(a.li,null,e.createElement(a.a,{href:"https://github.com/getify/You-Dont-Know-JS"},"You Don't Know Javascript")),"\n"))}var o=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,t.R)(),n.components);return a?e.createElement(a,n,e.createElement(p,n)):p(n)};var c=s(197),l=s(4353),u=s.n(l),r=s(4810),k=s(6947),i=s(4017),d=s(1042),m=s(1038);const g={a:n=>{let{href:a="",children:s}=n;const t=!(null!=a&&a.startsWith("#")),p=t?a:`#${encodeURIComponent(a.slice(1))}`;return e.createElement("a",{href:p,target:t?"_blank":void 0,rel:"noreferrer"},s)},img:n=>{const{alt:a="The author is too lazy to give an alt",src:s,...t}=n;return e.createElement("a",{href:s,"data-fancybox":"gallery","data-caption":a},e.createElement("img",Object.assign({src:s,alt:a},t)))},Card:k.A,Link:r.N_},h=n=>{let{children:a,pageContext:s}=n;const{frontmatter:{title:p,date:o,updated:l,categories:r,tags:k,timeliness:d=!0}}=s,h=e.useRef(null),y=u()(o),E=l?u()(l):y,f=u()().diff(E,"days");return e.useEffect((()=>{var n;const a=null===(n=h.current)||void 0===n?void 0:n.querySelectorAll("a.gatsby-resp-image-link");return null==a||a.forEach((n=>{const a=n.children.item(1);n.setAttribute("data-fancybox","gallery"),n.setAttribute("data-caption",a.alt)})),c.lX.bind("[data-fancybox]"),()=>c.lX.unbind("[data-fancybox]")}),[]),e.createElement("div",{className:"mx-auto flex max-w-xl flex-col gap-y-12"},e.createElement("div",{className:"flex flex-col gap-4"},(null==r?void 0:r.length)&&e.createElement(i.A,{name:r[0],className:"item-selectable"}),e.createElement("h1",{className:"text-3xl font-bold"},p),e.createElement("div",{className:"item-secondary flex gap-2"},o&&e.createElement("span",{title:`首次发布于：${y.toString()}\n最后更新于：${E.toString()}`},y.format("MM 月 DD 日 YYYY 年")),(null==k?void 0:k.length)&&e.createElement("div",{className:"flex flex-1 flex-wrap gap-2 before:content-['•']"},k.map((n=>e.createElement(m.A,{key:n,name:n,className:"item-secondary item-selectable"})))))),e.createElement("article",{ref:h,className:"heti post-entry"},d&&f>365&&e.createElement("blockquote",{className:"border-l-4 border-orange-400"},"这是一篇",e.createElement("strong",null,"最后更新于 ",f," 天前"),"的博客，内容可能随着时间的推移而变得不再适用，建议您仔细评估信息的有效性。"),e.createElement(t.x,{components:g},a)))},y=n=>{let{pageContext:a}=n;return e.createElement(d.A,{title:a.frontmatter.title})};function E(n){return e.createElement(h,n,e.createElement(o,n))}}}]);
//# sourceMappingURL=component---src-templates-post-tsx-content-file-path-blog-posts-js-closure-mdx-c3db00e1a3b1b53e4516.js.map