{"version":3,"file":"component---src-templates-post-tsx-content-file-path-blog-posts-website-deployment-docker-nginx-mdx-dd053294cb6a5eca04d2.js","mappings":"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","sources":["webpack://homepage/./blog/posts/website-deployment-docker-nginx.mdx","webpack://homepage/./src/templates/post.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    span: \"span\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"现在，我已经安装了 Docker，并拉取了 Nginx 的镜像。除此之外，我也购买了域名，完成了备案，并且为域名配置了 SSL。一切准备就绪，那么我该怎么将我的静态网页项目在 Linux 主机上通过 Nginx 部署，最终实现域名访问呢？\"), \"\\n\", React.createElement(_components.p, null, \"本文以部署我的个人博客页面为例，介绍如何使用基于 Docker 的 Nginx 部署静态网页项目。\"), \"\\n\", React.createElement(_components.h2, null, \"准备静态网页项目\"), \"\\n\", React.createElement(_components.p, null, \"为了更方便管理网页项目，可以在主机根目录下新建一个目录，例如 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">www</code>\"\n    }\n  }), \"：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token function\\\">sudo</span> <span class=\\\"token parameter variable\\\">-i</span> <span class=\\\"token comment\\\"># 切换为管理员用户</span>\\n<span class=\\\"token builtin class-name\\\">cd</span> /\\n<span class=\\\"token function\\\">mkdir</span> www</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"现在，我已经有了一个完整的静态网页项目——我的\", React.createElement(_components.a, {\n    href: \"https://github.com/LolipopJ/LolipopJ.github.io\"\n  }, \"个人博客\"), \"。我的个人博客基于 Hexo，其中代码放在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">source</code>\"\n    }\n  }), \" 分支，生成的静态网页文件放在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">master</code>\"\n    }\n  }), \" 分支。首先通过 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">git</code>\"\n    }\n  }), \" 命令将静态网页文件克隆下来：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token builtin class-name\\\">cd</span> /www\\n<span class=\\\"token function\\\">git</span> clone https://github.com/LolipopJ/LolipopJ.github.io.git <span class=\\\"token parameter variable\\\">-b</span> master</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, null, \"准备 SSL 证书\"), \"\\n\", React.createElement(_components.p, null, \"我使用了腾讯云执行了备案操作，并申请了免费的 SSL 证书。参考\", React.createElement(_components.a, {\n    href: \"https://cloud.tencent.com/document/product/400/35244\"\n  }, \"腾讯云官方文档\"), \"，下面执行安装 SSL 证书操作。\"), \"\\n\", React.createElement(_components.p, null, \"将下载的证书文件传入 Linux 主机中并解压。以 SSL 证书文件压缩包 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">blog.towind.fun.zip</code>\"\n    }\n  }), \" 为例：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token comment\\\"># 将文件解压到当前目录下的 blog.towind.fun 目录中</span>\\n<span class=\\\"token function\\\">unzip</span> blog.towind.fun.zip <span class=\\\"token parameter variable\\\">-d</span> blog.towind.fun</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"可以将 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">blog.towind.fun/Nginx</code>\"\n    }\n  }), \" 目录下的文件放置到 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">/www/cert</code>\"\n    }\n  }), \" 目录下：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token function\\\">mkdir</span> /www/cert\\n<span class=\\\"token function\\\">cp</span> blog.towind.fun/Nginx/* /www/cert</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"之后，只需要将 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">/www/cert</code>\"\n    }\n  }), \" 目录挂载到 Nginx 的容器中，再通过 Nginx 配置访问即可。\"), \"\\n\", React.createElement(_components.h2, null, \"创建 Nginx 容器\"), \"\\n\", React.createElement(_components.p, null, \"从 Nginx 1.19 版本开始，允许在配置中自定义环境变量，只需要编写一个 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">docker-compose.yml</code>\"\n    }\n  }), \" 文件。\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">docker-compose</code>\"\n    }\n  }), \" 是用来将 Docker 自动化的命令，如果还没有，需要先安装它：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token function\\\">sudo</span> <span class=\\\"token function\\\">curl</span> <span class=\\\"token parameter variable\\\">-L</span> <span class=\\\"token string\\\">\\\"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class=\\\"token variable\\\"><span class=\\\"token variable\\\">$(</span><span class=\\\"token function\\\">uname</span> <span class=\\\"token parameter variable\\\">-s</span><span class=\\\"token variable\\\">)</span></span>-<span class=\\\"token variable\\\"><span class=\\\"token variable\\\">$(</span><span class=\\\"token function\\\">uname</span> <span class=\\\"token parameter variable\\\">-m</span><span class=\\\"token variable\\\">)</span></span>\\\"</span> <span class=\\\"token parameter variable\\\">-o</span> /usr/local/bin/docker-compose\\n<span class=\\\"token function\\\">sudo</span> <span class=\\\"token function\\\">chmod</span> +x /usr/local/bin/docker-compose\\n<span class=\\\"token function\\\">sudo</span> <span class=\\\"token function\\\">ln</span> <span class=\\\"token parameter variable\\\">-s</span> /usr/local/bin/docker-compose /usr/bin/docker-compose</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"可以用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">docker-compose --version</code>\"\n    }\n  }), \" 命令测试安装的结果。\"), \"\\n\", React.createElement(_components.p, null, \"在默认情况下，Nginx 会寻找容器的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">/usr/share/nginx/html</code>\"\n    }\n  }), \" 目录下的网页文件，因此我们需要把网页文件放到这个目录下去。最简单的方式是通过挂载 volume 使得容器可以访问到我们的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">/www/LolipopJ.github.io</code>\"\n    }\n  }), \" 目录。\"), \"\\n\", React.createElement(_components.p, null, \"在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">/www/LolipopJ.github.io</code>\"\n    }\n  }), \" 目录下创建 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">docker-compose.yml</code>\"\n    }\n  }), \"，编辑如下：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"yml\\\"><pre class=\\\"language-yml\\\"><code class=\\\"language-yml\\\"><span class=\\\"token key atrule\\\">version</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"1.0\\\"</span>\\n<span class=\\\"token key atrule\\\">services</span><span class=\\\"token punctuation\\\">:</span>\\n  <span class=\\\"token key atrule\\\">blog</span><span class=\\\"token punctuation\\\">:</span>\\n    <span class=\\\"token key atrule\\\">image</span><span class=\\\"token punctuation\\\">:</span> nginx<span class=\\\"token punctuation\\\">:</span>1.21.0\\n    <span class=\\\"token key atrule\\\">container_name</span><span class=\\\"token punctuation\\\">:</span> blog<span class=\\\"token punctuation\\\">-</span>nginx\\n    <span class=\\\"token key atrule\\\">restart</span><span class=\\\"token punctuation\\\">:</span> always\\n    <span class=\\\"token key atrule\\\">volumes</span><span class=\\\"token punctuation\\\">:</span>\\n      <span class=\\\"token punctuation\\\">-</span> ./<span class=\\\"token punctuation\\\">:</span>/usr/share/nginx/html <span class=\\\"token comment\\\"># 挂载当前静态网页文件目录</span>\\n      <span class=\\\"token punctuation\\\">-</span> ./templates<span class=\\\"token punctuation\\\">:</span>/etc/nginx/templates <span class=\\\"token comment\\\"># 挂载 Nginx 配置模板目录</span>\\n      <span class=\\\"token punctuation\\\">-</span> /www/cert<span class=\\\"token punctuation\\\">:</span>/etc/nginx/cert <span class=\\\"token comment\\\"># 挂载 SSL 证书目录</span>\\n    <span class=\\\"token key atrule\\\">ports</span><span class=\\\"token punctuation\\\">:</span>\\n      <span class=\\\"token punctuation\\\">-</span> <span class=\\\"token datetime number\\\">80:80</span>\\n      <span class=\\\"token punctuation\\\">-</span> 443<span class=\\\"token punctuation\\\">:</span><span class=\\\"token number\\\">443</span>\\n    <span class=\\\"token key atrule\\\">environment</span><span class=\\\"token punctuation\\\">:</span>\\n      <span class=\\\"token punctuation\\\">-</span> NGINX_HOST=blog.towind.fun\\n      <span class=\\\"token punctuation\\\">-</span> NGINX_HOST_SSL_CRT=cert/1_blog.towind.fun_bundle.crt\\n      <span class=\\\"token punctuation\\\">-</span> NGINX_HOST_SSL_KEY=cert/2_blog.towind.fun.key</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"由于 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">nginx.conf</code>\"\n    }\n  }), \" 读取文件时，默认以 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">/etc/nginx</code>\"\n    }\n  }), \" 为起始目录，因此当把 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">/www/cert</code>\"\n    }\n  }), \" 目录挂载到 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">/etc/nginx/cert</code>\"\n    }\n  }), \" 目录时，应当设置环境变量 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">NGINX_HOST_SSL_CRT</code>\"\n    }\n  }), \" 为 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">cert/1_www.example.com_bundle.crt</code>\"\n    }\n  }), \"。\"), \"\\n\", React.createElement(_components.p, null, \"在默认情况下，执行此文件后，将会读取 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">templates</code>\"\n    }\n  }), \"（对应容器中的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">/etc/nginx/templates</code>\"\n    }\n  }), \"）目录下的模板文件，并将结果输出到容器中 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">/etc/nginx/conf.d</code>\"\n    }\n  }), \" 目录下。因此，可以在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">/www/LolipopJ.github.io</code>\"\n    }\n  }), \" 目录下创建 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">templates</code>\"\n    }\n  }), \" 目录，并编写 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">templates/default.conf.template</code>\"\n    }\n  }), \" 文件如下：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"conf\\\"><pre class=\\\"language-conf\\\"><code class=\\\"language-conf\\\">server {\\n  listen 443 ssl;\\n  listen [::]:443 ssl;\\n  server_name ${NGINX_HOST};\\n  ssl_certificate ${NGINX_HOST_SSL_CRT};\\n  ssl_certificate_key ${NGINX_HOST_SSL_KEY};\\n\\n  location / {\\n    root /usr/share/nginx/html;\\n    index index.html index.htm;\\n  }\\n\\n  error_page 404 /404.html;\\n\\n  error_page 500 502 503 504 /50x.html;\\n  location = /50x.html {\\n    root /usr/share/nginx/html;\\n  }\\n}\\n\\n# 将 http 请求转为 https 请求\\nserver {\\n  listen 80;\\n  listen [::]:80;\\n  server_name ${NGINX_HOST};\\n  return 301 https://$host$request_uri;\\n}</code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"现在，在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">/www/LolipopJ.github.io</code>\"\n    }\n  }), \" 目录下有我们编写好的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">docker-compose.yml</code>\"\n    }\n  }), \" 和 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">templates/default.conf.template</code>\"\n    }\n  }), \" 文件；另外，为部署 https 服务所需的 ssl 证书文件在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">/www/cert</code>\"\n    }\n  }), \" 目录下。那么最后只需要在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">/www/LolipopJ.github.io</code>\"\n    }\n  }), \" 目录执行下面的命令即可：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token function\\\">docker-compose</span> up <span class=\\\"token parameter variable\\\">-d</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"其中，\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">-d</code>\"\n    }\n  }), \" 表示在后台运行容器。执行后，将拉起 Nginx 容器，并在容器中生成对应的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">/etc/nginx/conf.d/default.conf</code>\"\n    }\n  }), \" 文件，供 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">/etc/nginx/nginx.conf</code>\"\n    }\n  }), \" 读取。\"), \"\\n\", React.createElement(_components.h2, null, \"从浏览器访问\"), \"\\n\", React.createElement(_components.p, null, \"嘿！一切就绪，从浏览器访问我的博客吧！网址是：\", React.createElement(_components.a, {\n    href: \"https://blog.towind.fun/\"\n  }, \"https://blog.towind.fun\")), \"\\n\", React.createElement(_components.p, null, \"当我的个人博客有更新时，可以通过 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">git</code>\"\n    }\n  }), \" 命令来拉取，然后重新执行 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">docker-compose up -d</code>\"\n    }\n  }), \" 即可：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"bash\\\"><pre class=\\\"language-bash\\\"><code class=\\\"language-bash\\\"><span class=\\\"token builtin class-name\\\">cd</span> /www/LolipopJ.github.io\\n<span class=\\\"token function\\\">git</span> pull\\n<span class=\\\"token function\\\">docker-compose</span> up <span class=\\\"token parameter variable\\\">-d</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, null, \"参考文档\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://www.docker.com/blog/how-to-use-the-official-nginx-docker-image/\"\n  }, \"How To Use the Official NGINX Docker Image\")), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/homepage/homepage/blog/posts/website-deployment-docker-nginx.mdx\";\nimport {Fancybox} from \"@fancyapps/ui\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport dayjs from \"dayjs\";\nimport {Link} from \"gatsby\";\nimport * as React from \"react\";\nimport Card from \"../components/card\";\nimport Category from \"../components/category\";\nimport SEO from \"../components/seo\";\nimport Tag from \"../components/tag\";\nconst FancyBoxImage = props => {\n  const {alt = \"The author is too lazy to give an alt\", src, ...restProps} = props;\n  return React.createElement(\"a\", {\n    href: src,\n    \"data-fancybox\": \"gallery\",\n    \"data-caption\": alt\n  }, React.createElement(\"img\", Object.assign({\n    src: src,\n    alt: alt\n  }, restProps)));\n};\nconst ALink = _ref => {\n  let {href = \"\", children} = _ref;\n  const isExternalHref = !(href !== null && href !== void 0 && href.startsWith(\"#\"));\n  const parsedHref = isExternalHref ? href : `#${encodeURIComponent(href.slice(1))}`;\n  return React.createElement(\"a\", {\n    href: parsedHref,\n    target: isExternalHref ? \"_blank\" : undefined,\n    rel: \"noreferrer\"\n  }, children);\n};\nconst components = {\n  a: ALink,\n  img: FancyBoxImage,\n  Card,\n  Link\n};\nconst PostTemplate = _ref2 => {\n  let {children, data} = _ref2;\n  const {mdx: {frontmatter: {title, date: dateString, updated: updatedDateString, categories, tags, timeliness = true}}} = data;\n  const articleRef = React.useRef(null);\n  const date = dayjs(dateString);\n  const updatedDate = updatedDateString ? dayjs(updatedDateString) : date;\n  const today = dayjs();\n  const diffDays = today.diff(updatedDate, \"days\");\n  React.useEffect(() => {\n    var _articleRef$current;\n    const optimizedImageLinks = (_articleRef$current = articleRef.current) === null || _articleRef$current === void 0 ? void 0 : _articleRef$current.querySelectorAll(\"a.gatsby-resp-image-link\");\n    optimizedImageLinks === null || optimizedImageLinks === void 0 ? void 0 : optimizedImageLinks.forEach(link => {\n      const image = link.children.item(1);\n      link.setAttribute(\"data-fancybox\", \"gallery\");\n      link.setAttribute(\"data-caption\", image.alt);\n    });\n    Fancybox.bind(\"[data-fancybox]\");\n    return () => Fancybox.unbind(\"[data-fancybox]\");\n  }, []);\n  return React.createElement(\"div\", {\n    className: \"mx-auto flex max-w-xl flex-col gap-y-12\"\n  }, React.createElement(\"div\", {\n    className: \"flex flex-col gap-4\"\n  }, (categories === null || categories === void 0 ? void 0 : categories.length) && React.createElement(Category, {\n    name: categories[0],\n    className: \"item-selectable\"\n  }), React.createElement(\"h1\", {\n    className: \"text-3xl font-bold\"\n  }, title), React.createElement(\"div\", {\n    className: \"item-secondary flex flex-col gap-2 lg:flex-row\"\n  }, dateString && React.createElement(\"span\", {\n    title: `首次发布于：${date.toString()}\\n最后更新于：${updatedDate.toString()}`\n  }, date.format(\"MM 月 DD 日 YYYY 年\")), (tags === null || tags === void 0 ? void 0 : tags.length) && React.createElement(\"div\", {\n    className: \"flex flex-1 flex-wrap gap-2 lg:before:content-['\\u2022']\"\n  }, tags.map(tag => React.createElement(Tag, {\n    key: tag,\n    name: tag,\n    className: \"item-secondary item-selectable\"\n  }))))), React.createElement(\"article\", {\n    ref: articleRef,\n    className: \"heti post-entry\"\n  }, timeliness && diffDays > 365 && React.createElement(\"blockquote\", {\n    className: \"border-l-4 border-orange-400\"\n  }, \"\\u8FD9\\u662F\\u4E00\\u7BC7\", React.createElement(\"strong\", null, \"\\u6700\\u540E\\u66F4\\u65B0\\u4E8E \", diffDays, \" \\u5929\\u524D\"), \"\\u7684\\u535A\\u5BA2\\uFF0C\\u5185\\u5BB9\\u53EF\\u80FD\\u968F\\u7740\\u65F6\\u95F4\\u7684\\u63A8\\u79FB\\u800C\\u53D8\\u5F97\\u4E0D\\u518D\\u9002\\u7528\\uFF0C\\u5EFA\\u8BAE\\u60A8\\u4ED4\\u7EC6\\u8BC4\\u4F30\\u4FE1\\u606F\\u7684\\u6709\\u6548\\u6027\\u3002\"), React.createElement(MDXProvider, {\n    components: components\n  }, children)));\n};\nconst query = \"2697480803\";\nexport const Head = _ref3 => {\n  let {data} = _ref3;\n  return React.createElement(SEO, {\n    title: String(data.mdx.frontmatter.title)\n  });\n};\nPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","h2","span","a","ul","li","_provideComponents","components","React","dangerouslySetInnerHTML","__html","href","wrapper","MDXLayout","_ref","children","isExternalHref","startsWith","parsedHref","encodeURIComponent","slice","target","undefined","rel","img","alt","src","restProps","Card","Link","PostTemplate","_ref2","data","mdx","frontmatter","title","date","dateString","updated","updatedDateString","categories","tags","timeliness","articleRef","dayjs","updatedDate","diffDays","diff","_articleRef$current","optimizedImageLinks","current","querySelectorAll","forEach","link","image","item","setAttribute","Fancybox","bind","unbind","className","length","Category","name","toString","format","map","tag","Tag","key","ref","MDXProvider","Head","_ref3","SEO","String","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}