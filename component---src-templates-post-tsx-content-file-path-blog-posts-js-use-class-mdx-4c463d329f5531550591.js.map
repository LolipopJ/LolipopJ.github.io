{"version":3,"file":"component---src-templates-post-tsx-content-file-path-blog-posts-js-use-class-mdx-4c463d329f5531550591.js","mappings":"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","sources":["webpack://homepage/./blog/posts/js-use-class.mdx","webpack://homepage/./src/templates/post.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    span: \"span\",\n    strong: \"strong\",\n    a: \"a\",\n    h2: \"h2\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"类（Class）是用于创建对象的模板，他们用代码封装数据以处理该数据，是面向对象编程方法的重要特性之一。JavaScript 中的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">class</code>\"\n    }\n  }), \" 语法在 ES6 中引入，其底层实现基于原型（Prototype），系原型继承的语法糖（Syntactic Sugar）。\"), \"\\n\", React.createElement(_components.p, null, \"本博文将探讨 JavaScript 中\", React.createElement(_components.strong, null, \"如何使用类\"), \"的相关知识，文章组织架构和内容基于 MDN 上关于类的\", React.createElement(_components.a, {\n    href: \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\"\n  }, \"章节\"), \"。\"), \"\\n\", React.createElement(_components.h2, null, \"定义类\"), \"\\n\", React.createElement(_components.p, null, \"类可以被看作一种“特殊的函数”，和函数的定义方法一样，类的定义方法有两种：\", React.createElement(_components.strong, null, \"类声明\"), \"和\", React.createElement(_components.strong, null, \"类表达式\"), \"。\"), \"\\n\", React.createElement(_components.p, null, \"第一种方法是，直接使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">class</code>\"\n    }\n  }), \" 关键字声明类，即\", React.createElement(_components.strong, null, \"类声明\"), \"的方法。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">User</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">//</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"但是，与函数声明不同的是，使用类声明的方式\", React.createElement(_components.strong, null, \"不会提升\"), \"。这意味着必须先声明类，再使用它。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> u <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">User</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Uncaught ReferenceError: User is not defined</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">User</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">//</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"另一种方法是，将 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">class</code>\"\n    }\n  }), \" 声明的类赋值给变量，即\", React.createElement(_components.strong, null, \"类表达式\"), \"的方法。类表达式可以命名或匿名，其中，命名类表达式的名称（类的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">name</code>\"\n    }\n  }), \" 属性）是该类体的局部名称。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 匿名类</span>\\n<span class=\\\"token keyword\\\">let</span> User <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">//</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>User<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// User</span>\\n\\n<span class=\\\"token comment\\\">// 命名类</span>\\n<span class=\\\"token keyword\\\">let</span> User <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Admin</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">//</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>User<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Admin</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"同样，使用类表达式的方式也\", React.createElement(_components.strong, null, \"不会提升\"), \"。\"), \"\\n\", React.createElement(_components.p, null, \"定义类之后，就可以使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">new</code>\"\n    }\n  }), \" 关键字实例化类了。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">const</span> u <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">User</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, null, \"构造函数\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">constructor()</code>\"\n    }\n  }), \" 方法或\", React.createElement(_components.strong, null, \"构造函数\"), \"，是用于创建和初始化一个由 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">class</code>\"\n    }\n  }), \" 创建的对象的特殊方法，一个类只能拥有一个 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">constructor()</code>\"\n    }\n  }), \" 方法。\"), \"\\n\", React.createElement(_components.p, null, \"如果一个类中有构造函数，那么执行 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">new</code>\"\n    }\n  }), \" 创建实例时，将调用这个构造函数。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">User</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 构造函数</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">name<span class=\\\"token punctuation\\\">,</span> gender</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> name<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>gender <span class=\\\"token operator\\\">=</span> gender<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> u <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">User</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Ming\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"Male\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 初始化对象</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>u<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">,</span> u<span class=\\\"token punctuation\\\">.</span>gender<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Ming Male</span>\\n\\n<span class=\\\"token keyword\\\">const</span> u2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">User</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Xiao\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 初始化赋值参数少于构造函数参数时</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>u2<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">,</span> u2<span class=\\\"token punctuation\\\">.</span>gender<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Xiao undefined</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"对于 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">new</code>\"\n    }\n  }), \" 创建实例时的每个参数，将依次赋值给构造函数。多余的参数将被忽略。\"), \"\\n\", React.createElement(_components.p, null, \"特别的，ES6 规定，子类的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">constructor()</code>\"\n    }\n  }), \" 中必须使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">super()</code>\"\n    }\n  }), \" 调用父类的构造函数，否则会报错。一个合法的例子：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">User</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">name<span class=\\\"token punctuation\\\">,</span> gender</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> name<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>gender <span class=\\\"token operator\\\">=</span> gender<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 使用 extends 创建 User 的子类 Admin</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Admin</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">User</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">name<span class=\\\"token punctuation\\\">,</span> gender<span class=\\\"token punctuation\\\">,</span> openId</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>name<span class=\\\"token punctuation\\\">,</span> gender<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 调用父类的构造函数</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>openId <span class=\\\"token operator\\\">=</span> openId<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Admin</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Ming\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"Male\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">\\\"xxx489\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">,</span> a<span class=\\\"token punctuation\\\">.</span>gender<span class=\\\"token punctuation\\\">,</span> a<span class=\\\"token punctuation\\\">.</span>openId<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Ming Male xxx489</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h2, null, \"原型方法\"), \"\\n\", React.createElement(_components.p, null, \"在类体中可以声明函数方法。从底层实现来看，这些方法将会在对象的原型链上定义出来，故称作\", React.createElement(_components.strong, null, \"原型方法\"), \"。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Rectangle</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// Field declarations</span>\\n  log <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 日志属性</span>\\n  <span class=\\\"token comment\\\">// Constructor</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">height<span class=\\\"token punctuation\\\">,</span> width</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>height <span class=\\\"token operator\\\">=</span> height<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>width <span class=\\\"token operator\\\">=</span> width<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// Getter 获取当前的面积</span>\\n  <span class=\\\"token keyword\\\">get</span> <span class=\\\"token function\\\">area</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">calcArea</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// Setter 修改 height 属性时添加日志</span>\\n  <span class=\\\"token keyword\\\">set</span> <span class=\\\"token function\\\">height</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">h</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_height <span class=\\\"token operator\\\">=</span> h<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 如果为 this.height = h 会循环调用这个 Setter，发生堆栈溢出</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>log<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token template-punctuation string\\\">`</span><span class=\\\"token string\\\">set height: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>h<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token template-punctuation string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// Setter 修改 width 属性时添加日志</span>\\n  <span class=\\\"token keyword\\\">set</span> <span class=\\\"token function\\\">width</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">w</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_width <span class=\\\"token operator\\\">=</span> w<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>log<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token template-punctuation string\\\">`</span><span class=\\\"token string\\\">set width: </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>w<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token template-punctuation string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// Method 计算当前的面积</span>\\n  <span class=\\\"token function\\\">calcArea</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_height <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_width<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> rec <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Rectangle</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>rec<span class=\\\"token punctuation\\\">.</span>log<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [\\\"set height: 5\\\", \\\"set width: 10\\\"]</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>rec<span class=\\\"token punctuation\\\">.</span>area<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 50</span>\\n\\nrec<span class=\\\"token punctuation\\\">.</span>height <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">;</span>\\nrec<span class=\\\"token punctuation\\\">.</span>width <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">20</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>rec<span class=\\\"token punctuation\\\">.</span>log<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [\\\"set height: 5\\\", \\\"set width: 10\\\", \\\"set height: 10\\\", \\\"set width: 20\\\"]</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>rec<span class=\\\"token punctuation\\\">.</span>area<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 200</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"上面的类中定义计算当前面积的方法 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">calcArea()</code>\"\n    }\n  }), \" 时，使用了 ES6 引入的\", React.createElement(_components.a, {\n    href: \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions\"\n  }, \"更简短的定义语法\"), \"，这种语法与 Setter 和 Getter 的语法相似，它直接将方法名赋值给了函数。\"), \"\\n\", React.createElement(_components.p, null, \"此外，由于 Setter 的特性，当我们在构造函数执行赋值操作，以及之后修改实例的属性时，将调用 Setter 的方法（即 Hook 函数）。因此在上面代码中的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">rec</code>\"\n    }\n  }), \" 实例中，并不存在 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">height</code>\"\n    }\n  }), \" 和 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">width</code>\"\n    }\n  }), \" 属性，取而代之的是 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">_height</code>\"\n    }\n  }), \" 和 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">_width</code>\"\n    }\n  }), \" 属性。\"), \"\\n\", React.createElement(_components.h2, null, \"静态方法和属性\"), \"\\n\", React.createElement(_components.p, null, \"在类的方法前面添加关键字 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">static</code>\"\n    }\n  }), \" 可以定义\", React.createElement(_components.strong, null, \"静态方法\"), \"或\", React.createElement(_components.strong, null, \"静态属性\"), \"，它们可以通过类直接调用，但不能通过类的实例调用。静态方法和静态属性常用于为一个使用类的应用程序创建工具函数。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Point</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">x<span class=\\\"token punctuation\\\">,</span> y</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>x <span class=\\\"token operator\\\">=</span> x<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>y <span class=\\\"token operator\\\">=</span> y<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// 定义 Point 类的静态属性</span>\\n  <span class=\\\"token keyword\\\">static</span> className <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Point\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// 定义 Point 类的静态方法</span>\\n  <span class=\\\"token keyword\\\">static</span> <span class=\\\"token function\\\">distance</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">a<span class=\\\"token punctuation\\\">,</span> b</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> dx <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">.</span>x <span class=\\\"token operator\\\">-</span> b<span class=\\\"token punctuation\\\">.</span>x<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">const</span> dy <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">.</span>y <span class=\\\"token operator\\\">-</span> b<span class=\\\"token punctuation\\\">.</span>y<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">hypot</span><span class=\\\"token punctuation\\\">(</span>dx<span class=\\\"token punctuation\\\">,</span> dy<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Math.hypot() 返回所有参数的平方和的平方根，在此处用于求两点之间的距离</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> p1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Point</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> p2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Point</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>p1<span class=\\\"token punctuation\\\">.</span>className<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// undefined</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>p1<span class=\\\"token punctuation\\\">.</span>distance<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// undefined</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>Point<span class=\\\"token punctuation\\\">.</span>className<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Point</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>Point<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">distance</span><span class=\\\"token punctuation\\\">(</span>p1<span class=\\\"token punctuation\\\">,</span> p2<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 7.0710678118654755</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"上面的代码中，当我们使用实例访问静态方法和属性时，会显示 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">undefined</code>\"\n    }\n  }), \"。而当我们使用类来访问时，则能正常调用了。\"), \"\\n\", React.createElement(_components.h2, null, \"原型方法和静态方法中的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">this</code>\"\n    }\n  })), \"\\n\", React.createElement(_components.p, null, \"当调用静态或原型方法时没有指定 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">this</code>\"\n    }\n  }), \" 所属的上下文，那么将返回 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">undefined</code>\"\n    }\n  }), \"。这是因为 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">class</code>\"\n    }\n  }), \" 内部的代码\", React.createElement(_components.strong, null, \"总是在严格模式下执行\"), \"。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyClass</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">getThis</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">static</span> <span class=\\\"token function\\\">getStaticThis</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> getClassStaticThis <span class=\\\"token operator\\\">=</span> MyClass<span class=\\\"token punctuation\\\">.</span>getStaticThis<span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>MyClass<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getStaticThis</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// MyClass 类</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">getClassStaticThis</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// undefined</span>\\n\\n<span class=\\\"token keyword\\\">const</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">MyClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> getObjThis <span class=\\\"token operator\\\">=</span> obj<span class=\\\"token punctuation\\\">.</span>getThis<span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getThis</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// obj 实例对象</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">getObjThis</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// undefined</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"作为对比，将上面的代码使用传统的基于函数的语法实现。在\", React.createElement(_components.strong, null, \"非严格模式\"), \"下，若没有指定 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">this</code>\"\n    }\n  }), \" 所属的上下文，那么将指向全局对象。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">MyClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token class-name\\\">MyClass</span><span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">getThis</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 模拟 Class 的 static 方法</span>\\nMyClass<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">getStaticThis</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> getClassStaticThis <span class=\\\"token operator\\\">=</span> MyClass<span class=\\\"token punctuation\\\">.</span>getStaticThis<span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>MyClass<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getStaticThis</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// MyClass 函数</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">getClassStaticThis</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// global object</span>\\n\\n<span class=\\\"token keyword\\\">const</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">MyClass</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> getObjThis <span class=\\\"token operator\\\">=</span> obj<span class=\\\"token punctuation\\\">.</span>getThis<span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getThis</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// obj 实例对象</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">getObjThis</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// global object</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">this</code>\"\n    }\n  }), \" 一直是 JavaScript 语言最令人困惑的特性之一，您可以阅读与之相关的文章进一步理解。\"), \"\\n\", React.createElement(_components.h2, null, \"生成器方法\"), \"\\n\", React.createElement(_components.p, null, \"生成器是 ES6 新增的高级特性，允许定义一个非连续执行的函数作为迭代算法，是替代迭代器（Iterator）的选择。\"), \"\\n\", React.createElement(_components.p, null, \"生成器函数使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">function*</code>\"\n    }\n  }), \" 语法定义，例如 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">function* anyGenerator() {}</code>\"\n    }\n  }), \"。在类中对应更简短的语法，将符号 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">*</code>\"\n    }\n  }), \" 放在方法名前面即可，例如 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">*anyGenerator() {}</code>\"\n    }\n  }), \"。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Polygon</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\"><span class=\\\"token operator\\\">...</span>sides</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>sides <span class=\\\"token operator\\\">=</span> sides<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// 定义生成器方法</span>\\n  <span class=\\\"token operator\\\">*</span><span class=\\\"token function\\\">getSides</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> side <span class=\\\"token keyword\\\">of</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>sides<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">yield</span> side<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> pentagon <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Polygon</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span>pentagon<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getSides</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [1,2,3,4,5]</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"关于生成器的更多介绍可参考\", React.createElement(_components.a, {\n    href: \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators\"\n  }, \"此页面\"), \"。\"), \"\\n\", React.createElement(_components.h2, null, \"箭头函数定义方法\"), \"\\n\", React.createElement(_components.p, null, \"类中还有一种常见的定义方法的方式：使用\", React.createElement(_components.strong, null, \"箭头函数\"), \"。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Rectangle</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 使用箭头函数定义原型方法</span>\\n  <span class=\\\"token function-variable function\\\">calcArea</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>height <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>width<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"子类继承父类的箭头函数定义的方法时，会出现**属性遮蔽（Property Shadowing）**的现象。编写代码如下：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Father</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function-variable function\\\">sayHello</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"I am your father.\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Child</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Father</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">sayHello</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"I am a child.\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sayHello</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> child <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Child</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nchild<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sayHello</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// I am your father.</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"上面的代码并没有像我们预想的那样，依次打印出 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">I am a child.</code>\"\n    }\n  }), \" 和 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">I am your father.</code>\"\n    }\n  }), \"，而是只打印出了 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">I am your father.</code>\"\n    }\n  }), \"。\"), \"\\n\", React.createElement(_components.p, null, \"简单解释原因的话就是，箭头函数定义的方法将挂载到\", React.createElement(_components.strong, null, \"实例的属性\"), \"上，而普通函数定义的方法挂载到\", React.createElement(_components.strong, null, \"原型链\"), \"上。这样，当我们实例化 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">child</code>\"\n    }\n  }), \" 对象时，会将原型 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Child</code>\"\n    }\n  }), \" 从自己的父类 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Father</code>\"\n    }\n  }), \" 继承的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">sayHello()</code>\"\n    }\n  }), \" 方法则挂载到自身的属性上。\"), \"\\n\", React.createElement(_components.p, null, \"回忆一下过去学过的知识，当我们尝试调用实例的方法时，JavaScript 会首先在实例的属性上查找是否存在此方法，如果存在则直接调用，如果不存在再在原型链上查找。因此，当我们调用实例 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">child</code>\"\n    }\n  }), \" 的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">sayHello()</code>\"\n    }\n  }), \" 方法时，JavaScript 找到了属性上的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">sayHello()</code>\"\n    }\n  }), \" 方法，遂结束了查找并调用。\"), \"\\n\", React.createElement(_components.p, null, \"详细内容可以参考\", React.createElement(_components.a, {\n    href: \"https://github.com/dwqs/blog/issues/67#issue-327371697\"\n  }, \"这篇博客\"), \"。\"), \"\\n\", React.createElement(_components.p, null, \"在类中，直接使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">=</code>\"\n    }\n  }), \" 的声明从本质上而言就是 \", React.createElement(_components.a, {\n    href: \"https://github.com/tc39/proposal-class-fields#field-declarations\"\n  }, \"Field Declarations\"), \" 的语法，相当于\", React.createElement(_components.strong, null, \"直接声明了一个实例的属性\"), \"。在接下来的\", React.createElement(_components.a, {\n    href: \"#%E5%AD%97%E6%AE%B5%E5%A3%B0%E6%98%8E\"\n  }, \"字段声明\"), \"小节中，也使用到了这个语法。\"), \"\\n\", React.createElement(_components.h2, null, \"字段声明\"), \"\\n\", React.createElement(_components.h3, null, \"公有字段声明\"), \"\\n\", React.createElement(_components.p, null, \"在类中可以声明公有字段，使得类定义具有自我记录性，且这些字段将始终存在。字段的声明可以设置初始值。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Point</span> <span class=\\\"token punctuation\\\">{</span>\\n  x<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 公有字段 x</span>\\n  y <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 公有字段 y，初始值为 0</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">x<span class=\\\"token punctuation\\\">,</span> y</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>x <span class=\\\"token operator\\\">=</span> x<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>y <span class=\\\"token operator\\\">=</span> y<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">get</span> <span class=\\\"token function\\\">position</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>x<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>y<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Point</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>position<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [5, 10]</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.h3, null, \"私有字段声明\"), \"\\n\", React.createElement(_components.p, null, \"在声明的字段前面加上 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">#</code>\"\n    }\n  }), \" 表明为私有字段。私有字段同样可以设置初始值。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Point</span> <span class=\\\"token punctuation\\\">{</span>\\n  #x<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 私有字段 x</span>\\n  #y <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 私有字段 y，初始值为 0</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">x<span class=\\\"token punctuation\\\">,</span> y</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>#x <span class=\\\"token operator\\\">=</span> x<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>#y <span class=\\\"token operator\\\">=</span> y<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">get</span> <span class=\\\"token function\\\">position</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>#x<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>#y<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Point</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>position<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [10, 5]</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"与公有字段不同的是：\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"不能从类外部引用私有字段。或私有字段在类外部不可见。\"), \"\\n\", React.createElement(_components.li, null, \"私有字段仅能在字段声明中预先定义。\"), \"\\n\", React.createElement(_components.li, null, \"在实例创建之后，不能再通过赋值来创建私有字段。\"), \"\\n\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Point</span> <span class=\\\"token punctuation\\\">{</span>\\n  name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"point\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n  #x<span class=\\\"token punctuation\\\">;</span>\\n  #y <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// #z // 假如不在这里显式声明 #z</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">x<span class=\\\"token punctuation\\\">,</span> y<span class=\\\"token punctuation\\\">,</span> z</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>#x <span class=\\\"token operator\\\">=</span> x<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>#y <span class=\\\"token operator\\\">=</span> y<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// this.#z = z // Uncaught SyntaxError: Private field '#z' must be declared in an enclosing class</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">get</span> <span class=\\\"token function\\\">position</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>#x<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>#y<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">get</span> <span class=\\\"token function\\\">position3D</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// return [this.#x, this.#y, this.#z] // Uncaught SyntaxError: Private field '#z' must be declared in an enclosing class</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> p <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Point</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">10</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">15</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\np<span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"point3D\\\"</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 实例可以通过赋值修改公有字段</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>p<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// point3D</span>\\np<span class=\\\"token punctuation\\\">.</span>#x <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">20</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 实例不可通过赋值修改私有字段，Uncaught SyntaxError: Private field '#x' must be declared in an enclosing class</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>p<span class=\\\"token punctuation\\\">.</span>#x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 实例不可在外部访问私有字段，Uncaught SyntaxError: Private field '#x' must be declared in an enclosing class</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"在上面的代码中，我们尝试在类中不显式声明私有字段 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">#z</code>\"\n    }\n  }), \" 的情况下，访问 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">#z</code>\"\n    }\n  }), \"，结果会抛出 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">SyntaxError</code>\"\n    }\n  }), \"。此外，我们尝试在实例中直接对私有字段 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">#x</code>\"\n    }\n  }), \" 进行赋值和获取操作，也会抛出 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">SyntaxError</code>\"\n    }\n  }), \"。\"), \"\\n\", React.createElement(_components.h2, null, \"使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">extends</code>\"\n    }\n  }), \" 拓展子类\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">extends</code>\"\n    }\n  }), \" 可以用来创建子类，父类可以是自己定义的普通类，也可以是内建对象。对于后者，以继承内建的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Date</code>\"\n    }\n  }), \" 对象为例：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyDate</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Date</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 必须调用父类的构造函数，否则会报错</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// 定义子类的方法，该方法可以获取格式化后的日期</span>\\n  <span class=\\\"token function\\\">getFormattedDate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> months <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n      <span class=\\\"token string\\\">\\\"Jan\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token string\\\">\\\"Feb\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token string\\\">\\\"Mar\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token string\\\">\\\"Apr\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token string\\\">\\\"May\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token string\\\">\\\"Jun\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token string\\\">\\\"Jul\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token string\\\">\\\"Aug\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token string\\\">\\\"Sep\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token string\\\">\\\"Oct\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token string\\\">\\\"Nov\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token string\\\">\\\"Dec\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getDate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span>\\n      <span class=\\\"token string\\\">\\\" - \\\"</span> <span class=\\\"token operator\\\">+</span>\\n      months<span class=\\\"token punctuation\\\">[</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getMonth</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">+</span>\\n      <span class=\\\"token string\\\">\\\" - \\\"</span> <span class=\\\"token operator\\\">+</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getFullYear</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">MyDate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getFormattedDate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 20 - May - 2021</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"类不过是一种语法糖，因此我们也可以用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">extends</code>\"\n    }\n  }), \" 来继承传统的基于函数的“类”：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 定义 Animal “类”</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">Animal</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">name</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> name<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token class-name\\\">Animal</span><span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">speak</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\" makes a noise.\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 使用 extends 拓展 Animal “类”</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Dog</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Animal</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">speak</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">speak</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\" barks.\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> d <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Dog</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Mitzie\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nd<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">speak</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// Mitzie makes a noise.</span>\\n<span class=\\\"token comment\\\">// Mitzie barks.</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"对于\", React.createElement(_components.strong, null, \"不可构造\"), \"的常规对象，要实现继承的话，可以使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Object.setPrototypeOf()</code>\"\n    }\n  }), \" 方法，它可以设置一个指定对象的原型到另一个对象：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 定义 Animal 对象</span>\\n<span class=\\\"token keyword\\\">const</span> Animal <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">speak</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\" makes a noise.\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Dog</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">name</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> name<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">speak</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">speak</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\" barks.\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nObject<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setPrototypeOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">Dog</span><span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">,</span> Animal<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 如果不这样做，在调用 speak 时会返回 TypeError</span>\\n\\n<span class=\\\"token keyword\\\">const</span> d <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Dog</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Mitzie\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nd<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">speak</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// Mitzie makes a noise.</span>\\n<span class=\\\"token comment\\\">// Mitzie barks.</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"出于性能考量，应避免使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Object.setPrototypeOf()</code>\"\n    }\n  }), \" 方法来实现继承，在\", React.createElement(_components.a, {\n    href: \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"\n  }, \"这里\"), \"了解它的更多。\"), \"\\n\", React.createElement(_components.h2, null, \"使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">super</code>\"\n    }\n  }), \" 调用超类\"), \"\\n\", React.createElement(_components.p, null, \"使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">super</code>\"\n    }\n  }), \" 关键字可以调用对象的父对象上的函数。\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Cat</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">name</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> name<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">speak</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token template-punctuation string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">: meo~~!</span><span class=\\\"token template-punctuation string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Lion</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Cat</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">speak</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">speak</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 调用 Cat 对象的 speak 方法</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token template-punctuation string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">: roars!!!</span><span class=\\\"token template-punctuation string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> l <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Lion</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Li\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nl<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">speak</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// Li: meo~~!</span>\\n<span class=\\\"token comment\\\">// Li: roars!!!</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"假如我们将上面代码中 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Lion</code>\"\n    }\n  }), \" 类里的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">speak()</code>\"\n    }\n  }), \" 方法删去，那么打印的结果是 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Li: meo~~!</code>\"\n    }\n  }), \"。如果认真看到这里的话，原因想必也已经了然于胸：子类继承了父类的属性和方法。那么当子类定义了与父类相同名字的方法时，根据原型链上的调用规则，会调用子类定义的方法。这就是为什么我们需要 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">super</code>\"\n    }\n  }), \" 关键字的原因之一，方法名相同的情况下，在子类方法中我们仍可以调用父类的方法。\"), \"\\n\", React.createElement(_components.p, null, \"在\", React.createElement(_components.strong, null, \"构造函数\"), \"中，\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">super()</code>\"\n    }\n  }), \" 需要在使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">this</code>\"\n    }\n  }), \" 前调用：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Rectangle</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">height<span class=\\\"token punctuation\\\">,</span> width</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Rectangle\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_height <span class=\\\"token operator\\\">=</span> height<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_width <span class=\\\"token operator\\\">=</span> width<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">get</span> <span class=\\\"token function\\\">name</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token template-string\\\"><span class=\\\"token template-punctuation string\\\">`</span><span class=\\\"token string\\\">Hi, I am a </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_name<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">.</span><span class=\\\"token template-punctuation string\\\">`</span></span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">get</span> <span class=\\\"token function\\\">area</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_height <span class=\\\"token operator\\\">*</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_width<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Square</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Rectangle</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">length</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// this._height = length // Must call super constructor in derived class before accessing 'this' or returning from derived constructor</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>length<span class=\\\"token punctuation\\\">,</span> length<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 调用 Rectangle 的构造函数，length 分别作 height 和 width</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_name <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"Square\\\"</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 修改 name 属性为 Square</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> s <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Square</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">15</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Hi, I am a Square.</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>s<span class=\\\"token punctuation\\\">.</span>area<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 225</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">super</code>\"\n    }\n  }), \" 也可以用来调用父类的静态方法：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Rectangle</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">height<span class=\\\"token punctuation\\\">,</span> width</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_height <span class=\\\"token operator\\\">=</span> height<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>_width <span class=\\\"token operator\\\">=</span> width<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">static</span> <span class=\\\"token function\\\">help</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 父类的静态方法</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token string\\\">\\\"I have 4 sides.\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Square</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Rectangle</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">length</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>length<span class=\\\"token punctuation\\\">,</span> length<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">static</span> <span class=\\\"token function\\\">help</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 子类的静态方法，使用 super 调用父类的 help 方法</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">help</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">\\\" They are all equal.\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>Square<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">help</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// I have 4 sides. They are all equal.</span>\\n\\n<span class=\\\"token comment\\\">// 假如只去除子类 help 方法前面的 static 关键字</span>\\n<span class=\\\"token comment\\\">// console.log(new Square(10).help()) // Uncaught TypeError: (intermediate value).help is not a function</span>\\n\\n<span class=\\\"token comment\\\">// 假如只去除父类 help 方法前面的 static 关键字</span>\\n<span class=\\\"token comment\\\">// console.log(Square.help()) // Uncaught TypeError: (intermediate value).help is not a function</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"在上面的代码中，\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Square</code>\"\n    }\n  }), \" 中的静态方法 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">help()</code>\"\n    }\n  }), \" 调用了父类的静态方法。静态方法中的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">super</code>\"\n    }\n  }), \" 只能调用父类的静态方法，假如我们去除子类或父类方法前面的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">static</code>\"\n    }\n  }), \" 关键字，会发生报错。\"), \"\\n\", React.createElement(_components.p, null, \"在本章节的例子中，似乎子类方法中的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">super</code>\"\n    }\n  }), \" 都调用了父类中与之同名的方法，但实际上并没有这个限制，在编写的时候可以根据实际的需求自行调整命名或调用其它父类方法。\"), \"\\n\", React.createElement(_components.p, null, \"在\", React.createElement(_components.a, {\n    href: \"#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E6%96%B9%E6%B3%95\"\n  }, \"箭头函数的使用\"), \"章节的例子中，既然箭头函数定义的方法挂载到了实例的属性上，那么还能用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">super</code>\"\n    }\n  }), \" 来调用吗？答案是否定的。JavaScript 没能在父对象的原型链上找到这个方法，于是什么也没有发生。\"), \"\\n\", React.createElement(_components.p, null, \"更多补充可以查阅 MDN 上\", React.createElement(_components.a, {\n    href: \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super\"\n  }, \"关于 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">super</code>\"\n    }\n  }), \" 的介绍\"), \"。\"), \"\\n\", React.createElement(_components.h2, null, \"使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Symbol.species</code>\"\n    }\n  }), \" 覆盖构造函数\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Symbol.species</code>\"\n    }\n  }), \" 访问器属性允许子类覆盖对象的默认构造函数。\"), \"\\n\", React.createElement(_components.p, null, \"读着很拗口，那就看两个实际的例子。当使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">map()</code>\"\n    }\n  }), \" 这样的方法会返回默认的构造函数，我们可能想在对拓展的数组类 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">MyArray</code>\"\n    }\n  }), \" 执行操作时返回 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Array</code>\"\n    }\n  }), \" 对象，那么可以这样编写代码：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyArray</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Array</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 设置 getter，当获取 MyArray 类的构造函数时，返回 Array 类的构造函数</span>\\n  <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">get</span> <span class=\\\"token punctuation\\\">[</span>Symbol<span class=\\\"token punctuation\\\">.</span>species<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> Array<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">MyArray</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">const</span> mapped <span class=\\\"token operator\\\">=</span> a<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">x</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> x <span class=\\\"token operator\\\">*</span> x<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>mapped <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">MyArray</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// false</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>mapped <span class=\\\"token keyword\\\">instanceof</span> <span class=\\\"token class-name\\\">Array</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// true</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"又例如，我们拓展 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Promise</code>\"\n    }\n  }), \" 类为 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">TimeoutPromise</code>\"\n    }\n  }), \" 类，但我们不希望某一个超时的 Promise 请求影响整个 Promise 链，就可以使用 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Symbol.species</code>\"\n    }\n  }), \" 来告诉 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">TimeoutPromise</code>\"\n    }\n  }), \" 类返回一个 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Promise</code>\"\n    }\n  }), \" 对象，方便我们执行异常处理操作：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">TimeoutPromise</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Promise</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">get</span> <span class=\\\"token punctuation\\\">[</span>Symbol<span class=\\\"token punctuation\\\">.</span>species<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> Promise<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Symbol.species</code>\"\n    }\n  }), \" 允许自定义返回的类，不一定是子类继承实现的类。\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Symbol.species</code>\"\n    }\n  }), \" 帮助我们在处理子类实例时，能够有一套标准的操作流程，方便了开发，在某些场景十分实用。\"), \"\\n\", React.createElement(_components.h2, null, \"使用 Mix-ins 实现多重继承\"), \"\\n\", React.createElement(_components.p, null, \"在 ECMAScript 中，一个类只能有一个单超类，因此想通过工具类的方法实现多重继承行为是不可能的。为了实现多重继承，我们可以使用 Mixin 的方法。\"), \"\\n\", React.createElement(_components.p, null, \"什么是 Mixin？简单来说，Mixin 也是一个类，包括了一些方法，这些方法可以被其它类使用。但在其它类中使用这些方法\", React.createElement(_components.strong, null, \"不需要继承\"), \" Mixin。举一个简单的例子：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">let</span> sayHiMixin <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// Mixin</span>\\n  <span class=\\\"token comment\\\">// Methods that useful</span>\\n  <span class=\\\"token function\\\">sayHi</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token template-punctuation string\\\">`</span><span class=\\\"token string\\\">Hello, </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token template-punctuation string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">sayBye</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">alert</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token template-punctuation string\\\">`</span><span class=\\\"token string\\\">Bye, </span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token template-punctuation string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">User</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">name</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">=</span> name<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nObject<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">assign</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">User</span><span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">,</span> sayHiMixin<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 将 Mixin 中的方法复制到 Class 类中</span>\\n\\n<span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">User</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Dude\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sayHi</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// Hello, Dude!</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"我们又知道，创建类的\", React.createElement(_components.a, {\n    href: \"#%E5%AE%9A%E4%B9%89%E7%B1%BB\"\n  }, \"两种声明方式\"), \"是等价的：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Mixin1</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">//</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 等价于</span>\\n<span class=\\\"token keyword\\\">const</span> Mixin2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">//</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"其中，第二种方式，或者说使用类表达式声明类的方式，允许我们\", React.createElement(_components.strong, null, \"动态生成自定义的类\"), \"。根据这个特性，我们就可以编写 Mixin 代码来实现多重继承了：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Animal</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 共同工具类</span>\\n    <span class=\\\"token comment\\\">//</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">CatMixin</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">superClass</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">extends</span> superClass <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 猫猫工具类</span>\\n    <span class=\\\"token comment\\\">//</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">DogMixin</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">superClass</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">extends</span> superClass <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 狗狗工具类</span>\\n    <span class=\\\"token comment\\\">//</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyMixin</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">CatMixin</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">DogMixin</span><span class=\\\"token punctuation\\\">(</span>Animal<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">// 实现多重继承</span>\\n    <span class=\\\"token comment\\\">//</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"在上面的代码中，我们首先定义了一个通用的工具类 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">Animal</code>\"\n    }\n  }), \"，其它 Mixin 类可能会用到这个工具类。接着我们定义了猫猫和狗狗使用的工具类 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">CatMixin</code>\"\n    }\n  }), \" 与 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">DogMixin</code>\"\n    }\n  }), \" 的创建规则，它们将传入的参数作为自己的父类，并创建一个新的类。最后，我们定义了想要的 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">MyMixin</code>\"\n    }\n  }), \" 类，它继承了 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">CatMixin(DogMixin(Animal))</code>\"\n    }\n  }), \" 类。从实现的角度来看，\", React.createElement(_components.strong, null, \"相当于\"), \"执行了下面的操作：\"), \"\\n\", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\"><pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">DogMixin</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">Animal</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">//</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">CatMixin</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">DogMixin</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 这显然是不合理的，猫猫工具类怎么能继承狗狗工具类</span>\\n  <span class=\\\"token comment\\\">//</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyMixin</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">CatMixin</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">//</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre></div>\"\n    }\n  }), \"\\n\", React.createElement(_components.p, null, \"实际上，我们并没有让 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">CatMixin</code>\"\n    }\n  }), \" 类去继承 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">DogMixin</code>\"\n    }\n  }), \" 类，而是使用了 Mixin 的思想，让 \", React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<code class=\\\"language-text\\\">MyMixin</code>\"\n    }\n  }), \" 继承了我们基于类表达式创建的一个新的类，实现了多重继承。\"), \"\\n\", React.createElement(_components.h2, null, \"参考资料\"), \"\\n\", React.createElement(_components.p, null, \"本博文仅且记录了 JavaScript 中类在语法上的知识和运用，辅以少量的实现原理。关于底层的具体实现，就放到以后再深入探讨学习吧。\"), \"\\n\", React.createElement(_components.h3, null, \"技术博文\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://cloud.tencent.com/developer/article/1700017\"\n  }, \"JavaScript 或 ES6 如何实现多继承总结【Mixin 混合继承模式】\"), \", 2020-09-18\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://github.com/dwqs/blog/issues/67\"\n  }, \"ES6 Class Methods 定义方式的差异\"), \", 2018-06-25\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://segmentfault.com/a/1190000007356931\"\n  }, \"[学习 es6]setter/getter 探究\"), \", 2016-11-02\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://www.keithcirkel.co.uk/metaprogramming-in-es6-symbols/#symbolspecies\"\n  }, \"Metaprogramming in ES6: Symbols and why they're awesome\"), \", 2015-06-18\"), \"\\n\"), \"\\n\", React.createElement(_components.h3, null, \"其它资料\"), \"\\n\", React.createElement(_components.p, null, \"主要参考了 MDN 上关于类和相关内容的\", React.createElement(_components.a, {\n    href: \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\"\n  }, \"描述\"), \"。\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://javascript.info/mixins\"\n  }, \"Mixins - JAVASCRIPT.INFO\")), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/homepage/homepage/blog/posts/js-use-class.mdx\";\nimport {Fancybox} from \"@fancyapps/ui\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport dayjs from \"dayjs\";\nimport {Link} from \"gatsby\";\nimport * as React from \"react\";\nimport Card from \"../components/card\";\nimport Category from \"../components/category\";\nimport SEO from \"../components/seo\";\nimport Tag from \"../components/tag\";\nconst FancyBoxImage = props => {\n  const {alt = \"The author is too lazy to give an alt\", src, ...restProps} = props;\n  return React.createElement(\"a\", {\n    href: src,\n    \"data-fancybox\": \"gallery\",\n    \"data-caption\": alt\n  }, React.createElement(\"img\", Object.assign({\n    src: src,\n    alt: alt\n  }, restProps)));\n};\nconst ALink = _ref => {\n  let {href = \"\", children} = _ref;\n  const isExternalHref = !(href !== null && href !== void 0 && href.startsWith(\"#\"));\n  const parsedHref = isExternalHref ? href : `#${encodeURIComponent(href.slice(1))}`;\n  return React.createElement(\"a\", {\n    href: parsedHref,\n    target: isExternalHref ? \"_blank\" : undefined,\n    rel: \"noreferrer\"\n  }, children);\n};\nconst components = {\n  a: ALink,\n  img: FancyBoxImage,\n  Card,\n  Link\n};\nconst PostTemplate = _ref2 => {\n  let {children, data} = _ref2;\n  const {mdx: {frontmatter: {title, date: dateString, updated: updatedDateString, categories, tags, timeliness = true}}} = data;\n  const articleRef = React.useRef(null);\n  const date = dayjs(dateString);\n  const updatedDate = updatedDateString ? dayjs(updatedDateString) : date;\n  const today = dayjs();\n  const diffDays = today.diff(updatedDate, \"days\");\n  React.useEffect(() => {\n    var _articleRef$current;\n    const optimizedImageLinks = (_articleRef$current = articleRef.current) === null || _articleRef$current === void 0 ? void 0 : _articleRef$current.querySelectorAll(\"a.gatsby-resp-image-link\");\n    optimizedImageLinks === null || optimizedImageLinks === void 0 ? void 0 : optimizedImageLinks.forEach(link => {\n      const image = link.children.item(1);\n      link.setAttribute(\"data-fancybox\", \"gallery\");\n      link.setAttribute(\"data-caption\", image.alt);\n    });\n    Fancybox.bind(\"[data-fancybox]\");\n    return () => Fancybox.unbind(\"[data-fancybox]\");\n  }, []);\n  return React.createElement(\"div\", {\n    className: \"mx-auto flex max-w-xl flex-col gap-y-12\"\n  }, React.createElement(\"div\", {\n    className: \"flex flex-col gap-4\"\n  }, (categories === null || categories === void 0 ? void 0 : categories.length) && React.createElement(Category, {\n    name: categories[0],\n    className: \"item-selectable\"\n  }), React.createElement(\"h1\", {\n    className: \"text-3xl font-bold\"\n  }, title), React.createElement(\"div\", {\n    className: \"item-secondary flex flex-col gap-2 lg:flex-row\"\n  }, dateString && React.createElement(\"span\", {\n    title: `首次发布于：${date.toString()}\\n最后更新于：${updatedDate.toString()}`\n  }, date.format(\"MM 月 DD 日 YYYY 年\")), (tags === null || tags === void 0 ? void 0 : tags.length) && React.createElement(\"div\", {\n    className: \"flex flex-1 flex-wrap gap-2 lg:before:content-['\\u2022']\"\n  }, tags.map(tag => React.createElement(Tag, {\n    key: tag,\n    name: tag,\n    className: \"item-secondary item-selectable\"\n  }))))), React.createElement(\"article\", {\n    ref: articleRef,\n    className: \"heti post-entry\"\n  }, timeliness && diffDays > 365 && React.createElement(\"blockquote\", {\n    className: \"border-l-4 border-orange-400\"\n  }, \"\\u8FD9\\u662F\\u4E00\\u7BC7\", React.createElement(\"strong\", null, \"\\u6700\\u540E\\u66F4\\u65B0\\u4E8E \", diffDays, \" \\u5929\\u524D\"), \"\\u7684\\u535A\\u5BA2\\uFF0C\\u5185\\u5BB9\\u53EF\\u80FD\\u968F\\u7740\\u65F6\\u95F4\\u7684\\u63A8\\u79FB\\u800C\\u53D8\\u5F97\\u4E0D\\u518D\\u9002\\u7528\\uFF0C\\u5EFA\\u8BAE\\u60A8\\u4ED4\\u7EC6\\u8BC4\\u4F30\\u4FE1\\u606F\\u7684\\u6709\\u6548\\u6027\\u3002\"), React.createElement(MDXProvider, {\n    components: components\n  }, children)));\n};\nconst query = \"2697480803\";\nexport const Head = _ref3 => {\n  let {data} = _ref3;\n  return React.createElement(SEO, {\n    title: String(data.mdx.frontmatter.title)\n  });\n};\nPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["_createMdxContent","props","_components","Object","assign","p","span","strong","a","h2","h3","ul","li","_provideComponents","components","React","dangerouslySetInnerHTML","__html","href","wrapper","MDXLayout","_ref","children","isExternalHref","startsWith","parsedHref","encodeURIComponent","slice","target","undefined","rel","img","alt","src","restProps","Card","Link","PostTemplate","_ref2","data","mdx","frontmatter","title","date","dateString","updated","updatedDateString","categories","tags","timeliness","articleRef","dayjs","updatedDate","diffDays","diff","_articleRef$current","optimizedImageLinks","current","querySelectorAll","forEach","link","image","item","setAttribute","Fancybox","bind","unbind","className","length","Category","name","toString","format","map","tag","Tag","key","ref","MDXProvider","Head","_ref3","SEO","String","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}