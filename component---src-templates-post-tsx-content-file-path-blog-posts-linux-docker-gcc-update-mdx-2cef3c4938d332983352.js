"use strict";(self.webpackChunkhomepage=self.webpackChunkhomepage||[]).push([[3866],{2177:function(e,a,n){n.r(a),n.d(a,{Head:function(){return k},default:function(){return E}});var s=n(8453),t=n(6540);function l(e){const a=Object.assign({p:"p",span:"span",strong:"strong",h2:"h2",a:"a",hr:"hr",ul:"ul",li:"li"},(0,s.R)(),e.components);return t.createElement(t.Fragment,null,t.createElement(a.p,null,"如果软件源可用，可以使用 CentOS 的 yum 包管理器或 Ubuntu 的 apt 包管理器等一键安装 GCC，例如："),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash">yum <span class="token parameter variable">-y</span> <span class="token function">install</span> gcc\nyum <span class="token parameter variable">-y</span> <span class="token function">install</span> gcc-c++\n\n<span class="token comment"># 或是一键安装开发工具软件包，包括 gcc, g++ 等</span>\nyum groupinstall <span class="token string">"Development Tools"</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"本文适用于系统中",t.createElement(a.strong,null,"包含有"),"其它版本的 GCC 编译器情况下，手动更新或降级 GCC 编译器。编译 GCC 的过程十分耗时，如果能使用包管理器尽量还是使用包管理器吧。"),"\n",t.createElement(a.p,null,"NOTE: 如果仅使用 GCC 进行编译操作或不确定当前系统能否兼容新版本的 GCC，建议在 ",t.createElement(a.strong,null,"Docker 容器环境"),"中执行编译和安装操作，并在容器中使用 GCC 编译器进行编译源码。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token comment"># 查看当前系统中 GCC 的版本</span>\ngcc <span class="token parameter variable">-v</span></code></pre></div>'}}),"\n",t.createElement(a.h2,null,"下载 GCC 并解压"),"\n",t.createElement(a.p,null,"在 ",t.createElement(a.a,{href:"https://gcc.gnu.org/mirrors.html"},"GCC 官网"),"选择下载 GCC 的镜像站点，选择进入 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">release/</code>'}})," 目录，选择需要的 GCC 版本下载即可。"),"\n",t.createElement(a.p,null,"本文以安装 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">GCC 10.3.0</code>'}})," 为例，进入 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">release/gcc-10.3.0/</code>'}})," 目录，选择 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">gcc-10.3.0.tar.gz</code>'}})," 进行下载。"),"\n",t.createElement(a.p,null,"将压缩包传入 Docker 容器环境，并解压到容器的 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">/usr/local/</code>'}})," 目录下。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-xf</span> gcc-10.3.0.tar.gz <span class="token parameter variable">-C</span> /usr/local/</code></pre></div>'}}),"\n",t.createElement(a.h2,null,"下载 GCC 依赖包"),"\n",t.createElement(a.p,null,"执行以下命令，下载 GCC 编译所需的依赖包："),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local/gcc-10.3.0\n<span class="token comment"># 执行脚本下载依赖包</span>\n./contrib/download_prerequisites</code></pre></div>'}}),"\n",t.createElement(a.p,null,"对于较老版本的 GCC（例如 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">4.9.4</code>'}})," 版本），执行脚本时可能会无法连接服务器，可以更换代理进行下载："),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token comment"># 编辑 contrib/download_prerequisites 文件</span>\n<span class="token function">vim</span> ./contrib/download_prerequisites</code></pre></div>'}}),"\n",t.createElement(a.p,null,"将文件中 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ftp://gcc.gnu.org/pub/gcc/infrastructure</code>'}})," 字段更换为 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">http://www.mirrorservice.org/sites/sourceware.org/pub/gcc/infrastructure</code>'}}),"，然后再在根目录执行 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">./contrib/download_prerequisites</code>'}})," 命令下载依赖包即可。"),"\n",t.createElement(a.p,null,"对于较新版本的 GCC（例如 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">10.3.0</code>'}})," 版本），依赖包包括 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">gmp</code>'}}),", ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">mpfr</code>'}}),", ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">mpc</code>'}})," 以及 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">isl</code>'}}),"。提示如下，表示依赖下载成功："),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token number">2021</span>-04-19 <span class="token number">15</span>:32:27 URL:http://gcc.gnu.org/pub/gcc/infrastructure/gmp-6.1.0.tar.bz2 <span class="token punctuation">[</span><span class="token number">2383840</span>/2383840<span class="token punctuation">]</span> -<span class="token operator">></span> <span class="token string">"./gmp-6.1.0.tar.bz2"</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n<span class="token number">2021</span>-04-19 <span class="token number">15</span>:32:30 URL:http://gcc.gnu.org/pub/gcc/infrastructure/mpfr-3.1.4.tar.bz2 <span class="token punctuation">[</span><span class="token number">1279284</span>/1279284<span class="token punctuation">]</span> -<span class="token operator">></span> <span class="token string">"./mpfr-3.1.4.tar.bz2"</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n<span class="token number">2021</span>-04-19 <span class="token number">15</span>:32:34 URL:http://gcc.gnu.org/pub/gcc/infrastructure/mpc-1.0.3.tar.gz <span class="token punctuation">[</span><span class="token number">669925</span>/669925<span class="token punctuation">]</span> -<span class="token operator">></span> <span class="token string">"./mpc-1.0.3.tar.gz"</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n<span class="token number">2021</span>-04-19 <span class="token number">15</span>:32:38 URL:http://gcc.gnu.org/pub/gcc/infrastructure/isl-0.18.tar.bz2 <span class="token punctuation">[</span><span class="token number">1658291</span>/1658291<span class="token punctuation">]</span> -<span class="token operator">></span> <span class="token string">"./isl-0.18.tar.bz2"</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\ngmp-6.1.0.tar.bz2: OK\nmpfr-3.1.4.tar.bz2: OK\nmpc-1.0.3.tar.gz: OK\nisl-0.18.tar.bz2: OK\nAll prerequisites downloaded successfully.</code></pre></div>'}}),"\n",t.createElement(a.h2,null,"编译 GCC"),"\n",t.createElement(a.p,null,"回到上一级目录即 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">/usr/local</code>'}}),"，手动创建一个目录，存放编译 GCC 源码生成的文件："),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local\n<span class="token function">mkdir</span> gcc-build-10.3.0\n<span class="token builtin class-name">cd</span> gcc-build-10.3.0</code></pre></div>'}}),"\n",t.createElement(a.p,null,"现在我们在 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">/usr/local/</code>'}})," 路径下创建了一个名为 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">gcc-build-10.3.0</code>'}})," 的目录，并进入到此目录中。"),"\n",t.createElement(a.p,null,"GCC 编译器支持多种编程语言的编译，但我们一般使用它来编译 C 和 C++ 语言程序的源码。因此在编译 GCC 之前可以配置只启用 C 和 C++ 语言支持。这一步为",t.createElement(a.strong,null,"可选"),"操作："),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash">/usr/local/gcc-10.3.0/configure --enable-checking<span class="token operator">=</span>release --enable-languages<span class="token operator">=</span>c,c++ --disable-multilib</code></pre></div>'}}),"\n",t.createElement(a.p,null,"如果不需要禁用多语言编译支持，则直接运行 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">configure</code>'}})," 即可："),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash">/usr/local/gcc-10.3.0/configure</code></pre></div>'}}),"\n",t.createElement(a.p,null,"执行完成后，会在当前路径创建 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Makefile</code>'}})," 文件，执行 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">make</code>'}})," 命令编译 GCC 源程序即可。"),"\n",t.createElement(a.p,null,"编译过程会占用很大的空间，请确保当前目录的空间足够使用。"),"\n",t.createElement(a.p,null,"考虑到单作业执行编译操作十分之慢（参考文档的作者在他的机器上花费了 6 小时才完成编译），可以设置 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">-j</code>'}})," 选项执行",t.createElement(a.a,{href:"https://stackoverflow.com/questions/414714/compiling-with-g-using-multiple-cores"},"并行作业"),"，选项后边的数字建议为 CPU 内核数量的 1.5 倍甚至 2 倍。如下述命令同时启用 8 个作业并行编译 GCC："),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token function">make</span> <span class="token parameter variable">-j</span> <span class="token number">8</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"现在，忘记这边的事情，去做一些其它的事儿吧！"),"\n",t.createElement(a.hr),"\n",t.createElement(a.p,null,"Tue Apr 20 9:52 CST 2021 - Tue Apr 20 12:33:29 CST 2021."),"\n",t.createElement(a.p,null,"好久不见！我的机器在 8 个作业并行编译的情况下，大约花费了 2.5 小时完成了编译。"),"\n",t.createElement(a.p,null,"现在执行下述命令安装 GCC 即可："),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token function">make</span> <span class="token function">install</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"此时直接执行 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">gcc -v</code>'}})," 仍会显示以前安装的版本，在",t.createElement(a.strong,null,"重启系统"),"之后就会显示为当前安装的版本。"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token comment"># 重启容器环境</span>\n<span class="token function">docker</span> restart <span class="token variable">${CONTAINER}</span>\n\n<span class="token comment"># 检查安装是否成功</span>\ngcc <span class="token parameter variable">-v</span>\n\n<span class="token comment"># 显示如下内容表示安装成功</span>\nUsing built-in specs.\n<span class="token assign-left variable">COLLECT_GCC</span><span class="token operator">=</span>gcc\n<span class="token assign-left variable">COLLECT_LTO_WRAPPER</span><span class="token operator">=</span>/usr/local/libexec/gcc/x86_64-pc-linux-gnu/10.3.0/lto-wrapper\nTarget: x86_64-pc-linux-gnu\nConfigured with: /usr/local/gcc-10.3.0/configure --enable-checking<span class="token operator">=</span>release --enable-languages<span class="token operator">=</span>c,c++ --disable-multilib\nThread model: posix\nSupported LTO compression algorithms: zlib\ngcc version <span class="token number">10.3</span>.0 <span class="token punctuation">(</span>GCC<span class="token punctuation">)</span></code></pre></div>'}}),"\n",t.createElement(a.h2,null,"文末碎碎念"),"\n",t.createElement(a.p,null,"我没有在 Docker 容器环境里执行 ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">make install</code>'}})," 操作，接着直接重启了当前主机，导致主机出现问题没法登陆。"),"\n",t.createElement(a.p,null,"一般建议编译和安装操作都在 Docker 容器环境里进行，不要直接操作宿主机环境！"),"\n",t.createElement(a.h2,null,"参考文档"),"\n",t.createElement(a.ul,null,"\n",t.createElement(a.li,null,t.createElement(a.a,{href:"http://c.biancheng.net/view/7933.html"},"GCC 编译器下载和安装教程（针对 Linux 发行版）")),"\n"))}var c=function(e){void 0===e&&(e={});const{wrapper:a}=Object.assign({},(0,s.R)(),e.components);return a?t.createElement(a,e,t.createElement(l,e)):l(e)},r=n(197),o=n(4353),p=n.n(o),u=n(4810),g=n(6947),m=n(4017),i=n(1042),d=n(1038);const h={a:e=>{let{href:a="",children:n}=e;const s=!(null!=a&&a.startsWith("#")),l=s?a:`#${encodeURIComponent(a.slice(1))}`;return t.createElement("a",{href:l,target:s?"_blank":void 0,rel:"noreferrer"},n)},img:e=>{const{alt:a="The author is too lazy to give an alt",src:n,...s}=e;return t.createElement("a",{href:n,"data-fancybox":"gallery","data-caption":a},t.createElement("img",Object.assign({src:n,alt:a},s)))},Card:g.A,Link:u.N_},b=e=>{let{children:a,pageContext:n}=e;const{frontmatter:{title:l,date:c,updated:o,categories:u,tags:g,timeliness:i=!0}}=n,b=t.useRef(null),k=p()(c),E=o?p()(o):k,_=p()().diff(E,"days");return t.useEffect((()=>{var e;const a=null===(e=b.current)||void 0===e?void 0:e.querySelectorAll("a.gatsby-resp-image-link");return null==a||a.forEach((e=>{const a=e.children.item(1);e.setAttribute("data-fancybox","gallery"),e.setAttribute("data-caption",a.alt)})),r.lX.bind("[data-fancybox]"),()=>r.lX.unbind("[data-fancybox]")}),[]),t.createElement("div",{className:"mx-auto flex max-w-xl flex-col gap-y-12"},t.createElement("div",{className:"flex flex-col gap-4"},(null==u?void 0:u.length)&&t.createElement(m.A,{name:u[0],className:"item-selectable"}),t.createElement("h1",{className:"text-3xl font-bold"},l),t.createElement("div",{className:"item-secondary flex gap-2"},c&&t.createElement("span",{title:`首次发布于：${k.toString()}\n最后更新于：${E.toString()}`},k.format("MM 月 DD 日 YYYY 年")),(null==g?void 0:g.length)&&t.createElement("div",{className:"flex flex-1 flex-wrap gap-2 before:content-['•']"},g.map((e=>t.createElement(d.A,{key:e,name:e,className:"item-secondary item-selectable"})))))),t.createElement("article",{ref:b,className:"heti post-entry"},i&&_>365&&t.createElement("blockquote",{className:"border-l-4 border-orange-400"},"这是一篇",t.createElement("strong",null,"最后更新于 ",_," 天前"),"的博客，内容可能随着时间的推移而变得不再适用，建议您仔细评估信息的有效性。"),t.createElement(s.x,{components:h},a)))},k=e=>{let{pageContext:a}=e;return t.createElement(i.A,{title:a.frontmatter.title})};function E(e){return t.createElement(b,e,t.createElement(c,e))}}}]);
//# sourceMappingURL=component---src-templates-post-tsx-content-file-path-blog-posts-linux-docker-gcc-update-mdx-2cef3c4938d332983352.js.map