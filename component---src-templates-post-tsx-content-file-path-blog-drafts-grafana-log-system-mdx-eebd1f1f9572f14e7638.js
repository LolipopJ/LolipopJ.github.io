"use strict";(self.webpackChunkhomepage=self.webpackChunkhomepage||[]).push([[5465],{8670:function(a,e,n){n.r(e),n.d(e,{Head:function(){return y},default:function(){return E}});var t=n(8453),s=n(6540);function l(a){const e=Object.assign({p:"p",h2:"h2",span:"span",a:"a",h3:"h3"},(0,t.R)(),a.components);return s.createElement(s.Fragment,null,s.createElement(e.p,null,"新买了服务器果然能为自己创造一个又一个接连不断的需求。例如今天，想到公网服务器上跑的定时脚本会把日志重定向到指定的文件里，但是并不会自动清理，意味着它们会在几十年后占满笔者的硬盘空间，这是不可接受不可妥协的！因此今天，笔者打算部署日志管理服务，统一存储各个地方的日志信息，方便管理，也方便快速发现并定位问题。"),"\n",s.createElement(e.h2,null,"部署 Loki 和 Grafana 容器"),"\n",s.createElement(e.p,null,"在 Github 上以 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">log</code>'}})," 为关键词，按星标数排序，目前排名第一的开源软件是 ",s.createElement(e.a,{href:"https://github.com/grafana/grafana"},s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">grafana/grafana</code>'}})),"，浏览使用文档后觉得它远远满足笔者的需要，就该用大炮打蚊子，遂决定在 Docker 上部署之。"),"\n",s.createElement(e.h2,null,"重定向日志信息到 Loki"),"\n",s.createElement(e.h3,null,"重定向定时脚本日志信息"),"\n",s.createElement(e.h3,null,"重定向 Docker 容器日志信息"),"\n",s.createElement(e.p,null,"忘记当时 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">docker run</code>'}})," 后面的一串参数怎么办？用 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">docker inspect</code>'}})," 去找灵感也太麻烦了！这烦恼了笔者一阵，幸运的是以前有人遇到这样的烦恼后，开发了 ",s.createElement(e.a,{href:"https://github.com/lavie/runlike"},s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">runlike</code>'}}))," 工具，它可以帮助打印出运行指定容器时可能使用到的参数。"),"\n",s.createElement(e.p,null,"拉取 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">assaflavie/runlike</code>'}})," 镜像："),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token function">docker</span> pull assaflavie/runlike</code></pre></div>'}}),"\n",s.createElement(e.p,null,"编辑 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">~/.bashrc</code>'}})," 或 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">~/.zshrc</code>'}}),"，添加命令别名 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">runlike</code>'}}),"："),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">runlike</span><span class="token operator">=</span><span class="token string">"docker run --rm -v /var/run/docker.sock:/var/run/docker.sock assaflavie/runlike"</span></code></pre></div>'}}),"\n",s.createElement(e.p,null,"重启终端，只需要执行 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">runlike &lt;container-name></code>'}})," 即可查看可以用于启动容器的命令了。"),"\n",s.createElement(e.p,null,"以笔者部署的 AList 容器为例，查看它的启动命令："),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token comment"># 添加 -p 以多行显示</span>\n% runlike <span class="token parameter variable">-p</span> alist\n<span class="token function">docker</span> run <span class="token parameter variable">--name</span><span class="token operator">=</span>alist <span class="token punctuation">\\</span>\n        <span class="token parameter variable">--hostname</span><span class="token operator">=</span>xxxxxx <span class="token punctuation">\\</span>\n        --mac-address<span class="token operator">=</span>xx:xx:xx:xx:xx:xx <span class="token punctuation">\\</span>\n        <span class="token parameter variable">--volume</span> /local/path/to/AList/data:/opt/alist/data <span class="token punctuation">\\</span>\n        <span class="token parameter variable">--network</span><span class="token operator">=</span>bridge <span class="token punctuation">\\</span>\n        <span class="token parameter variable">--workdir</span><span class="token operator">=</span>/opt/alist/ <span class="token punctuation">\\</span>\n        <span class="token parameter variable">-p</span> <span class="token number">5244</span>:5244 <span class="token punctuation">\\</span>\n        <span class="token parameter variable">--expose</span><span class="token operator">=</span><span class="token number">5245</span> <span class="token punctuation">\\</span>\n        <span class="token parameter variable">--restart</span><span class="token operator">=</span>unless-stopped <span class="token punctuation">\\</span>\n        <span class="token parameter variable">--runtime</span><span class="token operator">=</span>runc <span class="token punctuation">\\</span>\n        <span class="token parameter variable">--detach</span><span class="token operator">=</span>true <span class="token punctuation">\\</span>\n        xhofe/alist <span class="token punctuation">\\</span>\n        /entrypoint.sh</code></pre></div>'}}),"\n",s.createElement(e.p,null,"摘取其中笔者确实使用到的参数，简洁的启动命令就是：",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">docker run --name=alist --volume /local/path/to/AList/data:/opt/alist/data -p 5244:5244 --restart=unless-stopped xhofe/alist</code>'}}),"。"),"\n",s.createElement(e.p,null,"随着服务容器化和自动化的发展，",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">docker run</code>'}})," 也该被扫进历史的垃圾堆，彻底使用 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">docker-compose</code>'}})," 命令来替代了。趁着这次机会，笔者也将所有容器的启动替换为 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">docker-compose</code>'}})," 的方式，以后再遇到修改参数或镜像更新等情况，就可以省心地一键启动新容器了。"),"\n",s.createElement(e.p,null,"对于笔者的 AList 服务，可以编写 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">docker-compose.yaml</code>'}})," 文件如下："),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="yml"><pre class="language-yml"><code class="language-yml"><span class="token key atrule">services</span><span class="token punctuation">:</span>\n  <span class="token key atrule">alist</span><span class="token punctuation">:</span>\n    <span class="token key atrule">image</span><span class="token punctuation">:</span> xhofe/alist\n    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> alist<span class="token punctuation">-</span>server\n    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> /local/path/to/AList/data<span class="token punctuation">:</span>/opt/alist/data\n    <span class="token key atrule">ports</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> 5244<span class="token punctuation">:</span><span class="token number">5244</span>\n    <span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped</code></pre></div>'}}),"\n",s.createElement(e.p,null,"重定向容器日志信息到 Loki，完整的 ",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">docker-compose.yaml</code>'}})," 文件如下："),"\n",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="yml"><pre class="language-yml"><code class="language-yml"><span class="token key atrule">services</span><span class="token punctuation">:</span>\n  <span class="token key atrule">alist</span><span class="token punctuation">:</span>\n    <span class="token key atrule">image</span><span class="token punctuation">:</span> xhofe/alist\n    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> alist<span class="token punctuation">-</span>server\n    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> /local/path/to/AList/data<span class="token punctuation">:</span>/opt/alist/data\n    <span class="token key atrule">ports</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> 5244<span class="token punctuation">:</span><span class="token number">5244</span>\n    <span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped\n    <span class="token key atrule">logging</span><span class="token punctuation">:</span>\n      <span class="token key atrule">driver</span><span class="token punctuation">:</span> loki\n      <span class="token key atrule">options</span><span class="token punctuation">:</span>\n        <span class="token key atrule">loki-url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//192.168.100.239<span class="token punctuation">:</span>3100/loki/api/v1/push</code></pre></div>'}}),"\n",s.createElement(e.p,null,"执行命令启动容器：",s.createElement(e.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">docker-compose up -d</code>'}}),"。"),"\n",s.createElement(e.h2,null,"？"),"\n",s.createElement(e.p,null,"请看 VRC：",s.createElement(e.a,{href:"https://www.v2ex.com/t/1123367"},"《2999,入手 16+256G 内存的 macmini4，如何通过部署 50 个服务实现最大价值化》"),"。还有高手……！"))}var c=function(a){void 0===a&&(a={});const{wrapper:e}=Object.assign({},(0,t.R)(),a.components);return e?s.createElement(e,a,s.createElement(l,a)):l(a)},o=n(197),p=n(4353),r=n.n(p),u=n(4794),i=n(6947),m=n(4017),k=n(1042),d=n(1038);const g={a:a=>{let{href:e="",children:n}=a;const t=!(null!=e&&e.startsWith("#")),l=t?e:`#${encodeURIComponent(e.slice(1))}`;return s.createElement("a",{href:l,target:t?"_blank":void 0,rel:"noreferrer"},n)},img:a=>{const{alt:e="The author is too lazy to give an alt",src:n,...t}=a;return s.createElement("a",{href:n,"data-fancybox":"gallery","data-caption":e},s.createElement("img",Object.assign({src:n,alt:e},t)))},Card:i.A,Link:u.Link},h=a=>{let{children:e,data:n}=a;const{mdx:{frontmatter:{title:l,date:c,updated:p,categories:u,tags:i,timeliness:k}}}=n,h=s.useRef(null),y=r()(c),E=p?r()(p):y,x=r()().diff(E,"days");return s.useEffect((()=>{var a;const e=null===(a=h.current)||void 0===a?void 0:a.querySelectorAll("a.gatsby-resp-image-link");return null==e||e.forEach((a=>{const e=a.children.item(1);a.setAttribute("data-fancybox","gallery"),a.setAttribute("data-caption",e.alt)})),o.lX.bind("[data-fancybox]"),()=>o.lX.unbind("[data-fancybox]")}),[]),s.createElement("div",{className:"mx-auto flex max-w-xl flex-col gap-y-12"},s.createElement("div",{className:"flex flex-col gap-4"},(null==u?void 0:u.length)&&s.createElement(m.A,{name:u[0],className:"item-selectable"}),s.createElement("h1",{className:"text-3xl font-bold"},l),s.createElement("div",{className:"item-secondary flex flex-col gap-2 lg:flex-row"},c&&s.createElement("span",{title:`首次发布于：${y.toString()}\n最后更新于：${E.toString()}`},y.format("MM 月 DD 日 YYYY 年")),(null==i?void 0:i.length)&&s.createElement("div",{className:"flex flex-1 flex-wrap gap-2 lg:before:content-['•']"},i.map((a=>s.createElement(d.A,{key:a,name:a,className:"item-secondary item-selectable"})))))),s.createElement("article",{ref:h,className:"heti post-entry"},!1!==k&&x>365&&s.createElement("blockquote",{className:"border-l-4 border-orange-400"},"这是一篇",s.createElement("strong",null,"最后更新于 ",x," 天前"),"的博客，内容可能随着时间的推移而变得不再适用，建议您仔细评估信息的有效性。"),s.createElement(t.x,{components:g},e)))},y=a=>{let{data:e}=a;return s.createElement(k.A,{title:String(e.mdx.frontmatter.title)})};function E(a){return s.createElement(h,a,s.createElement(c,a))}}}]);
//# sourceMappingURL=component---src-templates-post-tsx-content-file-path-blog-drafts-grafana-log-system-mdx-eebd1f1f9572f14e7638.js.map