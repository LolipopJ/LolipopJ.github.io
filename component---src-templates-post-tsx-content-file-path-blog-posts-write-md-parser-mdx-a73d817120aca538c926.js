"use strict";(self.webpackChunkhomepage=self.webpackChunkhomepage||[]).push([[7876],{5329:function(n,a,s){s.r(a),s.d(a,{Head:function(){return h},default:function(){return f}});var t=s(8453),e=s(6540);function p(n){const a=Object.assign({p:"p",h2:"h2",span:"span",strong:"strong",a:"a"},(0,t.R)(),n.components);return e.createElement(e.Fragment,null,e.createElement(a.p,null,"在开发 NetUnion 的官网页面时，有这样一个需求：读取本地目录下的新闻和博客文件，并在前端渲染，其中文件均为 Markdown 格式。"),"\n",e.createElement(a.p,null,"与全栈开发直接调用后端数据库不同的是，没有数据表字段来记录文件的不同属性，例如文件的题目、作者、撰写日期等，因此这些属性需要记录在 .md 文件当中。"),"\n",e.createElement(a.p,null,"这样的撰写方式是不是很熟悉？没错，不就是我正在写的 Hexo 博客中 .md 文件的编写格式嘛！"),"\n",e.createElement(a.h2,null,"自动导入本地的 .md 文件"),"\n",e.createElement(a.p,null,"当然，首先要读取某个目录下已经撰写好的 .md 文件，才能对内容进行预处理。"),"\n",e.createElement(a.p,null,"但如果每撰写好一个新的新闻或博客文件，就得在代码中 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">require</code>'}})," 出来，太过于麻烦且不现实，因此就需要",e.createElement(a.strong,null,"自动导入"),"的方法。"),"\n",e.createElement(a.p,null,"Webpack 提供了 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">require.context()</code>'}})," 方法可以完美解决导入目录下所有文件的问题，该方法可以导入指定目录（也可以包括子目录）下指定格式的所有文件。关于此方法的更多细节可以在 Webpack 官方文档中",e.createElement(a.a,{href:"https://webpack.js.org/guides/dependency-management/#requirecontext"},"了解"),"。"),"\n",e.createElement(a.p,null,"撰写代码自动读取 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">@/docs/blog/</code>'}})," 及其子目录下的所有 .md 文件如下所示，其中 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">blogFiles(key)</code>'}})," 为文件存储的具体内容："),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> blogFiles <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">"@/docs/blog/"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.md$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nblogFiles<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">blogFiles</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(a.h2,null,"对 .md 文件进行预处理"),"\n",e.createElement(a.p,null,"参考 Hexo 博客的撰写格式，可以规定 NetUnion 官网的新闻和博客撰写格式如下："),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="md"><pre class="language-md"><code class="language-md"><span class="token front-matter-block"><span class="token punctuation">---</span>\n<span class="token front-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>title<span class="token punctuation">}</span>\n<span class="token key atrule">date</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>date<span class="token punctuation">}</span>\n<span class="token key atrule">author</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>author<span class="token punctuation">}</span></span>\n<span class="token punctuation">---</span></span>\n\n${main-text}</code></pre></div>'}}),"\n",e.createElement(a.p,null,"即用两个 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">---</code>'}})," 框住",e.createElement(a.strong,null,"属性内容"),"，在第二个 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">---</code>'}})," 下面为",e.createElement(a.strong,null,"正文内容"),"。"),"\n",e.createElement(a.p,null,"那么首先，可以用 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">split()</code>'}})," 方法根据 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">---</code>'}})," 及换行符将文章划分为长度不少于 3 （因为在正文中可能出现 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">---</code>'}}),"）的数组 arr。其中 arr[0] 为空，arr[1] 存储有属性内容，arr[2] 及之后存储正文内容。"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// content 为传入的 .md 文件内容</span>\n<span class="token keyword">const</span> contentArray <span class="token operator">=</span> content<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">---+\\r?\\n</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"对属性内容的处理同样可以先使用 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">split()</code>'}})," 方法按换行符拆分为数组。"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> contentInfo <span class="token operator">=</span> contentArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> contentInfoArray <span class="token operator">=</span> contentInfo<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\r?\\n</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"值得一提的是，在上面两次按换行符分割时，我都使用了 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">/\\r?\\n/g</code>'}})," 正则表达式。其含义是匹配 0 个或 1 个 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">\\r</code>'}})," 及 1 个 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">\\n</code>'}}),"，直到结束。因为在 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">CRLF</code>'}})," 行尾序列的文件中，换行符由 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">\\r\\n</code>'}})," 表示；而在 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">LF</code>'}})," 行尾序列中，换行符由 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">\\n</code>'}})," 表示。这样就确保了在 Windows 和 Unix 两种不同的系统上撰写的文件，其解析不会受行尾序列所影响。"),"\n",e.createElement(a.p,null,"接下来就可以提取属性对象了。这里使用 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">trim()</code>'}})," 方法来删除属性名和属性值前后可能出现的多余空格。"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> contentInfoItem <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> contentInfoArray<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> contentInfoParamArray <span class="token operator">=</span> contentInfoArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> contentInfoParamValue <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> contentInfoParamArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    contentInfoParamValue <span class="token operator">+=</span> contentInfoParamArray<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">":"</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  contentInfoItem<span class="token punctuation">[</span>contentInfoParamArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> contentInfoParamValue\n    <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"对正文内容的处理就相当简单了，只需要把 arr[2] 及之后存储的内容用 ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">---\\n</code>'}})," 连接起来就可以了。"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">let</span> contentText <span class="token operator">=</span> contentArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>contentArray<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> contentArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    contentText <span class="token operator">+=</span> <span class="token string">"---\\n"</span><span class="token punctuation">;</span>\n    contentText <span class="token operator">+=</span> contentArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"将属性对象与正文内容合并为一个新的对象，解析就完成了！"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token operator">...</span>contentInfoItem<span class="token punctuation">,</span>\n  <span class="token literal-property property">content</span><span class="token operator">:</span> contentText<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"如果愿意，还可以在最后对格式进行一定规范，例如可以对 date 属性进行处理："),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// 格式为 YYYY-MM-DD</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>date <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> dateArray <span class="token operator">=</span> result<span class="token punctuation">.</span>date<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> dateYear <span class="token operator">=</span> dateArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> dateMonth <span class="token operator">=</span> dateArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> dateDay <span class="token operator">=</span> dateArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>dateMonth<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    dateMonth <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token operator">+</span> dateMonth<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>dateDay<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    dateDay <span class="token operator">=</span> <span class="token string">"0"</span> <span class="token operator">+</span> dateDay<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  result<span class="token punctuation">.</span>date <span class="token operator">=</span> dateYear <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> dateMonth <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> dateDay<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(a.h2,null,"解析 .md 为 HTML"),"\n",e.createElement(a.p,null,"将结果中的正文内容交给给任意 .md 解析器就可以了，例如 ",e.createElement(a.a,{href:"https://github.com/markdown-it/markdown-it"},"markdown-it"),"。"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> md <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"markdown-it"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">linkify</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 一些设置，并不重要，下同</span>\n  <span class="token literal-property property">breaks</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">typographer</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> htmlContent <span class="token operator">=</span> md<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"完整的解析文件",e.createElement(a.a,{href:"https://github.com/uestclug/nu-official/blob/frontend/src/utils/mdParser.js"},"在这里"),"。"))}var o=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,t.R)(),n.components);return a?e.createElement(a,n,e.createElement(p,n)):p(n)},c=s(197),l=s(4353),r=s.n(l),u=s(4810),k=s(6947),i=s(4017),g=s(1042),d=s(1038);const m={a:n=>{let{href:a="",children:s}=n;const t=!(null!=a&&a.startsWith("#")),p=t?a:`#${encodeURIComponent(a.slice(1))}`;return e.createElement("a",{href:p,target:t?"_blank":void 0,rel:"noreferrer"},s)},img:n=>{const{alt:a="The author is too lazy to give an alt",src:s,...t}=n;return e.createElement("a",{href:s,"data-fancybox":"gallery","data-caption":a},e.createElement("img",Object.assign({src:s,alt:a},t)))},Card:k.A,Link:u.N_},y=n=>{let{children:a,data:s}=n;const{mdx:{frontmatter:{title:p,date:o,updated:l,categories:u,tags:k,timeliness:g=!0}}}=s,y=e.useRef(null),h=r()(o),f=l?r()(l):h,E=r()().diff(f,"days");return e.useEffect((()=>{var n;const a=null===(n=y.current)||void 0===n?void 0:n.querySelectorAll("a.gatsby-resp-image-link");return null==a||a.forEach((n=>{const a=n.children.item(1);n.setAttribute("data-fancybox","gallery"),n.setAttribute("data-caption",a.alt)})),c.lX.bind("[data-fancybox]"),()=>c.lX.unbind("[data-fancybox]")}),[]),e.createElement("div",{className:"mx-auto flex max-w-xl flex-col gap-y-12"},e.createElement("div",{className:"flex flex-col gap-4"},(null==u?void 0:u.length)&&e.createElement(i.A,{name:u[0],className:"item-selectable"}),e.createElement("h1",{className:"text-3xl font-bold"},p),e.createElement("div",{className:"item-secondary flex flex-col gap-2 lg:flex-row"},o&&e.createElement("span",{title:`首次发布于：${h.toString()}\n最后更新于：${f.toString()}`},h.format("MM 月 DD 日 YYYY 年")),(null==k?void 0:k.length)&&e.createElement("div",{className:"flex flex-1 flex-wrap gap-2 lg:before:content-['•']"},k.map((n=>e.createElement(d.A,{key:n,name:n,className:"item-secondary item-selectable"})))))),e.createElement("article",{ref:y,className:"heti post-entry"},g&&E>365&&e.createElement("blockquote",{className:"border-l-4 border-orange-400"},"这是一篇",e.createElement("strong",null,"最后更新于 ",E," 天前"),"的博客，内容可能随着时间的推移而变得不再适用，建议您仔细评估信息的有效性。"),e.createElement(t.x,{components:m},a)))},h=n=>{let{data:a}=n;return e.createElement(g.A,{title:String(a.mdx.frontmatter.title)})};function f(n){return e.createElement(y,n,e.createElement(o,n))}}}]);
//# sourceMappingURL=component---src-templates-post-tsx-content-file-path-blog-posts-write-md-parser-mdx-a73d817120aca538c926.js.map